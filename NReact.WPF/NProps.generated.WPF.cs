using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Interop;
using System.Windows.Media;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace NReact
{

  public partial class NProperties
  {
    public NProperty AcceptsReturn { get { return _acceptsReturn ?? (_acceptsReturn = NPropFactories.CreateAcceptsReturn()); } }
           NProperty _acceptsReturn;

    public NProperty AcceptsTab { get { return _acceptsTab ?? (_acceptsTab = NPropFactories.CreateAcceptsTab()); } }
           NProperty _acceptsTab;

    public NProperty Activated { get { return _activated ?? (_activated = NPropFactories.CreateActivated()); } }
           NProperty _activated;

    public NProperty ActiveEditingModeChanged { get { return _activeEditingModeChanged ?? (_activeEditingModeChanged = NPropFactories.CreateActiveEditingModeChanged()); } }
           NProperty _activeEditingModeChanged;

    public NProperty AddingNewItem { get { return _addingNewItem ?? (_addingNewItem = NPropFactories.CreateAddingNewItem()); } }
           NProperty _addingNewItem;

    public NProperty AllowDrop { get { return _allowDrop ?? (_allowDrop = NPropFactories.CreateAllowDrop()); } }
           NProperty _allowDrop;

    public NProperty AllowsColumnReorder { get { return _allowsColumnReorder ?? (_allowsColumnReorder = NPropFactories.CreateAllowsColumnReorder()); } }
           NProperty _allowsColumnReorder;

    public NProperty AllowsTransparency { get { return _allowsTransparency ?? (_allowsTransparency = NPropFactories.CreateAllowsTransparency()); } }
           NProperty _allowsTransparency;

    public NProperty AlternatingRowBackground { get { return _alternatingRowBackground ?? (_alternatingRowBackground = NPropFactories.CreateAlternatingRowBackground()); } }
           NProperty _alternatingRowBackground;

    public NProperty AlternationCount { get { return _alternationCount ?? (_alternationCount = NPropFactories.CreateAlternationCount()); } }
           NProperty _alternationCount;

    public NProperty AnnotationAlternates { get { return _annotationAlternates ?? (_annotationAlternates = NPropFactories.CreateAnnotationAlternates()); } }
           NProperty _annotationAlternates;

    public NProperty AreRowDetailsFrozen { get { return _areRowDetailsFrozen ?? (_areRowDetailsFrozen = NPropFactories.CreateAreRowDetailsFrozen()); } }
           NProperty _areRowDetailsFrozen;

    public NProperty AutoGenerateColumns { get { return _autoGenerateColumns ?? (_autoGenerateColumns = NPropFactories.CreateAutoGenerateColumns()); } }
           NProperty _autoGenerateColumns;

    public NProperty AutoGeneratedColumns { get { return _autoGeneratedColumns ?? (_autoGeneratedColumns = NPropFactories.CreateAutoGeneratedColumns()); } }
           NProperty _autoGeneratedColumns;

    public NProperty AutoGeneratingColumn { get { return _autoGeneratingColumn ?? (_autoGeneratingColumn = NPropFactories.CreateAutoGeneratingColumn()); } }
           NProperty _autoGeneratingColumn;

    public NProperty AutoToolTipPlacement { get { return _autoToolTipPlacement ?? (_autoToolTipPlacement = NPropFactories.CreateAutoToolTipPlacement()); } }
           NProperty _autoToolTipPlacement;

    public NProperty AutoToolTipPrecision { get { return _autoToolTipPrecision ?? (_autoToolTipPrecision = NPropFactories.CreateAutoToolTipPrecision()); } }
           NProperty _autoToolTipPrecision;

    public NProperty AutoWordSelection { get { return _autoWordSelection ?? (_autoWordSelection = NPropFactories.CreateAutoWordSelection()); } }
           NProperty _autoWordSelection;

    public NProperty Background { get { return _background ?? (_background = NPropFactories.CreateBackground()); } }
           NProperty _background;

    public NProperty Balance { get { return _balance ?? (_balance = NPropFactories.CreateBalance()); } }
           NProperty _balance;

    public NProperty Band { get { return _band ?? (_band = NPropFactories.CreateBand()); } }
           NProperty _band;

    public NProperty BandIndex { get { return _bandIndex ?? (_bandIndex = NPropFactories.CreateBandIndex()); } }
           NProperty _bandIndex;

    public NProperty BaselineAlignment { get { return _baselineAlignment ?? (_baselineAlignment = NPropFactories.CreateBaselineAlignment()); } }
           NProperty _baselineAlignment;

    public NProperty BaselineOffset { get { return _baselineOffset ?? (_baselineOffset = NPropFactories.CreateBaselineOffset()); } }
           NProperty _baselineOffset;

    public NProperty BeginningEdit { get { return _beginningEdit ?? (_beginningEdit = NPropFactories.CreateBeginningEdit()); } }
           NProperty _beginningEdit;

    public NProperty BidiLevel { get { return _bidiLevel ?? (_bidiLevel = NPropFactories.CreateBidiLevel()); } }
           NProperty _bidiLevel;

    public NProperty BindingGroup { get { return _bindingGroup ?? (_bindingGroup = NPropFactories.CreateBindingGroup()); } }
           NProperty _bindingGroup;

    public NProperty BitmapEffect { get { return _bitmapEffect ?? (_bitmapEffect = NPropFactories.CreateBitmapEffect()); } }
           NProperty _bitmapEffect;

    public NProperty BitmapEffectInput { get { return _bitmapEffectInput ?? (_bitmapEffectInput = NPropFactories.CreateBitmapEffectInput()); } }
           NProperty _bitmapEffectInput;

    public NProperty BlackoutDates { get { return _blackoutDates ?? (_blackoutDates = NPropFactories.CreateBlackoutDates()); } }
           NProperty _blackoutDates;

    public NProperty BleedBox { get { return _bleedBox ?? (_bleedBox = NPropFactories.CreateBleedBox()); } }
           NProperty _bleedBox;

    public NProperty BlockIsHyphenationEnabled { get { return _blockIsHyphenationEnabled ?? (_blockIsHyphenationEnabled = NPropFactories.CreateBlockIsHyphenationEnabled()); } }
           NProperty _blockIsHyphenationEnabled;

    public NProperty BlockLineHeight { get { return _blockLineHeight ?? (_blockLineHeight = NPropFactories.CreateBlockLineHeight()); } }
           NProperty _blockLineHeight;

    public NProperty BlockLineStackingStrategy { get { return _blockLineStackingStrategy ?? (_blockLineStackingStrategy = NPropFactories.CreateBlockLineStackingStrategy()); } }
           NProperty _blockLineStackingStrategy;

    public NProperty Blocks { get { return _blocks ?? (_blocks = NPropFactories.CreateBlocks()); } }
           NProperty _blocks;

    public NProperty BlockTextAlignment { get { return _blockTextAlignment ?? (_blockTextAlignment = NPropFactories.CreateBlockTextAlignment()); } }
           NProperty _blockTextAlignment;

    public NProperty BorderBrush { get { return _borderBrush ?? (_borderBrush = NPropFactories.CreateBorderBrush()); } }
           NProperty _borderBrush;

    public NProperty BorderThickness { get { return _borderThickness ?? (_borderThickness = NPropFactories.CreateBorderThickness()); } }
           NProperty _borderThickness;

    public NProperty BreakColumnBefore { get { return _breakColumnBefore ?? (_breakColumnBefore = NPropFactories.CreateBreakColumnBefore()); } }
           NProperty _breakColumnBefore;

    public NProperty BreakPageBefore { get { return _breakPageBefore ?? (_breakPageBefore = NPropFactories.CreateBreakPageBefore()); } }
           NProperty _breakPageBefore;

    public NProperty BufferingEnded { get { return _bufferingEnded ?? (_bufferingEnded = NPropFactories.CreateBufferingEnded()); } }
           NProperty _bufferingEnded;

    public NProperty BufferingStarted { get { return _bufferingStarted ?? (_bufferingStarted = NPropFactories.CreateBufferingStarted()); } }
           NProperty _bufferingStarted;

    public NProperty Bullet { get { return _bullet ?? (_bullet = NPropFactories.CreateBullet()); } }
           NProperty _bullet;

    public NProperty CacheMode { get { return _cacheMode ?? (_cacheMode = NPropFactories.CreateCacheMode()); } }
           NProperty _cacheMode;

    public NProperty CalendarButtonStyle { get { return _calendarButtonStyle ?? (_calendarButtonStyle = NPropFactories.CreateCalendarButtonStyle()); } }
           NProperty _calendarButtonStyle;

    public NProperty CalendarClosed { get { return _calendarClosed ?? (_calendarClosed = NPropFactories.CreateCalendarClosed()); } }
           NProperty _calendarClosed;

    public NProperty CalendarDayButtonStyle { get { return _calendarDayButtonStyle ?? (_calendarDayButtonStyle = NPropFactories.CreateCalendarDayButtonStyle()); } }
           NProperty _calendarDayButtonStyle;

    public NProperty CalendarItemStyle { get { return _calendarItemStyle ?? (_calendarItemStyle = NPropFactories.CreateCalendarItemStyle()); } }
           NProperty _calendarItemStyle;

    public NProperty CalendarOpened { get { return _calendarOpened ?? (_calendarOpened = NPropFactories.CreateCalendarOpened()); } }
           NProperty _calendarOpened;

    public NProperty CalendarStyle { get { return _calendarStyle ?? (_calendarStyle = NPropFactories.CreateCalendarStyle()); } }
           NProperty _calendarStyle;

    public NProperty Camera { get { return _camera ?? (_camera = NPropFactories.CreateCamera()); } }
           NProperty _camera;

    public NProperty CanContentScroll { get { return _canContentScroll ?? (_canContentScroll = NPropFactories.CreateCanContentScroll()); } }
           NProperty _canContentScroll;

    public NProperty CanDelayPlacement { get { return _canDelayPlacement ?? (_canDelayPlacement = NPropFactories.CreateCanDelayPlacement()); } }
           NProperty _canDelayPlacement;

    public NProperty CanHorizontallyScroll { get { return _canHorizontallyScroll ?? (_canHorizontallyScroll = NPropFactories.CreateCanHorizontallyScroll()); } }
           NProperty _canHorizontallyScroll;

    public NProperty CanUserAddRows { get { return _canUserAddRows ?? (_canUserAddRows = NPropFactories.CreateCanUserAddRows()); } }
           NProperty _canUserAddRows;

    public NProperty CanUserDeleteRows { get { return _canUserDeleteRows ?? (_canUserDeleteRows = NPropFactories.CreateCanUserDeleteRows()); } }
           NProperty _canUserDeleteRows;

    public NProperty CanUserReorderColumns { get { return _canUserReorderColumns ?? (_canUserReorderColumns = NPropFactories.CreateCanUserReorderColumns()); } }
           NProperty _canUserReorderColumns;

    public NProperty CanUserResizeColumns { get { return _canUserResizeColumns ?? (_canUserResizeColumns = NPropFactories.CreateCanUserResizeColumns()); } }
           NProperty _canUserResizeColumns;

    public NProperty CanUserResizeRows { get { return _canUserResizeRows ?? (_canUserResizeRows = NPropFactories.CreateCanUserResizeRows()); } }
           NProperty _canUserResizeRows;

    public NProperty CanUserSortColumns { get { return _canUserSortColumns ?? (_canUserSortColumns = NPropFactories.CreateCanUserSortColumns()); } }
           NProperty _canUserSortColumns;

    public NProperty CanvasBottom { get { return _canvasBottom ?? (_canvasBottom = NPropFactories.CreateCanvasBottom()); } }
           NProperty _canvasBottom;

    public NProperty CanvasLeft { get { return _canvasLeft ?? (_canvasLeft = NPropFactories.CreateCanvasLeft()); } }
           NProperty _canvasLeft;

    public NProperty CanvasRight { get { return _canvasRight ?? (_canvasRight = NPropFactories.CreateCanvasRight()); } }
           NProperty _canvasRight;

    public NProperty CanvasTop { get { return _canvasTop ?? (_canvasTop = NPropFactories.CreateCanvasTop()); } }
           NProperty _canvasTop;

    public NProperty CanVerticallyScroll { get { return _canVerticallyScroll ?? (_canVerticallyScroll = NPropFactories.CreateCanVerticallyScroll()); } }
           NProperty _canVerticallyScroll;

    public NProperty Capitals { get { return _capitals ?? (_capitals = NPropFactories.CreateCapitals()); } }
           NProperty _capitals;

    public NProperty CapitalSpacing { get { return _capitalSpacing ?? (_capitalSpacing = NPropFactories.CreateCapitalSpacing()); } }
           NProperty _capitalSpacing;

    public NProperty CaptionFontFamily { get { return _captionFontFamily ?? (_captionFontFamily = NPropFactories.CreateCaptionFontFamily()); } }
           NProperty _captionFontFamily;

    public NProperty CaptionFontSize { get { return _captionFontSize ?? (_captionFontSize = NPropFactories.CreateCaptionFontSize()); } }
           NProperty _captionFontSize;

    public NProperty CaptionFontStretch { get { return _captionFontStretch ?? (_captionFontStretch = NPropFactories.CreateCaptionFontStretch()); } }
           NProperty _captionFontStretch;

    public NProperty CaptionFontStyle { get { return _captionFontStyle ?? (_captionFontStyle = NPropFactories.CreateCaptionFontStyle()); } }
           NProperty _captionFontStyle;

    public NProperty CaptionFontWeight { get { return _captionFontWeight ?? (_captionFontWeight = NPropFactories.CreateCaptionFontWeight()); } }
           NProperty _captionFontWeight;

    public NProperty CaretBrush { get { return _caretBrush ?? (_caretBrush = NPropFactories.CreateCaretBrush()); } }
           NProperty _caretBrush;

    public NProperty CaretIndex { get { return _caretIndex ?? (_caretIndex = NPropFactories.CreateCaretIndex()); } }
           NProperty _caretIndex;

    public NProperty CaretStops { get { return _caretStops ?? (_caretStops = NPropFactories.CreateCaretStops()); } }
           NProperty _caretStops;

    public NProperty CaseSensitiveForms { get { return _caseSensitiveForms ?? (_caseSensitiveForms = NPropFactories.CreateCaseSensitiveForms()); } }
           NProperty _caseSensitiveForms;

    public NProperty CellEditEnding { get { return _cellEditEnding ?? (_cellEditEnding = NPropFactories.CreateCellEditEnding()); } }
           NProperty _cellEditEnding;

    public NProperty Cells { get { return _cells ?? (_cells = NPropFactories.CreateCells()); } }
           NProperty _cells;

    public NProperty CellSpacing { get { return _cellSpacing ?? (_cellSpacing = NPropFactories.CreateCellSpacing()); } }
           NProperty _cellSpacing;

    public NProperty CellStyle { get { return _cellStyle ?? (_cellStyle = NPropFactories.CreateCellStyle()); } }
           NProperty _cellStyle;

    public NProperty CharacterCasing { get { return _characterCasing ?? (_characterCasing = NPropFactories.CreateCharacterCasing()); } }
           NProperty _characterCasing;

    public NProperty Checked { get { return _checked ?? (_checked = NPropFactories.CreateChecked()); } }
           NProperty _checked;

    public NProperty Child { get { return _child ?? (_child = NPropFactories.CreateChild()); } }
           NProperty _child;

    public NProperty Children { get { return _children ?? (_children = NPropFactories.CreateChildren()); } }
           NProperty _children;

    public NProperty ClearFloaters { get { return _clearFloaters ?? (_clearFloaters = NPropFactories.CreateClearFloaters()); } }
           NProperty _clearFloaters;

    public NProperty Click { get { return _click ?? (_click = NPropFactories.CreateClick()); } }
           NProperty _click;

    public NProperty ClickMode { get { return _clickMode ?? (_clickMode = NPropFactories.CreateClickMode()); } }
           NProperty _clickMode;

    public NProperty Clip { get { return _clip ?? (_clip = NPropFactories.CreateClip()); } }
           NProperty _clip;

    public NProperty ClipboardCopyMode { get { return _clipboardCopyMode ?? (_clipboardCopyMode = NPropFactories.CreateClipboardCopyMode()); } }
           NProperty _clipboardCopyMode;

    public NProperty ClipToBounds { get { return _clipToBounds ?? (_clipToBounds = NPropFactories.CreateClipToBounds()); } }
           NProperty _clipToBounds;

    public NProperty Closed { get { return _closed ?? (_closed = NPropFactories.CreateClosed()); } }
           NProperty _closed;

    public NProperty Closing { get { return _closing ?? (_closing = NPropFactories.CreateClosing()); } }
           NProperty _closing;

    public NProperty Collapsed { get { return _collapsed ?? (_collapsed = NPropFactories.CreateCollapsed()); } }
           NProperty _collapsed;

    public NProperty ColumnDefinitions { get { return _columnDefinitions ?? (_columnDefinitions = NPropFactories.CreateColumnDefinitions()); } }
           NProperty _columnDefinitions;

    public NProperty ColumnDisplayIndexChanged { get { return _columnDisplayIndexChanged ?? (_columnDisplayIndexChanged = NPropFactories.CreateColumnDisplayIndexChanged()); } }
           NProperty _columnDisplayIndexChanged;

    public NProperty ColumnHeaderContainerStyle { get { return _columnHeaderContainerStyle ?? (_columnHeaderContainerStyle = NPropFactories.CreateColumnHeaderContainerStyle()); } }
           NProperty _columnHeaderContainerStyle;

    public NProperty ColumnHeaderContextMenu { get { return _columnHeaderContextMenu ?? (_columnHeaderContextMenu = NPropFactories.CreateColumnHeaderContextMenu()); } }
           NProperty _columnHeaderContextMenu;

    public NProperty ColumnHeaderDragCompleted { get { return _columnHeaderDragCompleted ?? (_columnHeaderDragCompleted = NPropFactories.CreateColumnHeaderDragCompleted()); } }
           NProperty _columnHeaderDragCompleted;

    public NProperty ColumnHeaderDragDelta { get { return _columnHeaderDragDelta ?? (_columnHeaderDragDelta = NPropFactories.CreateColumnHeaderDragDelta()); } }
           NProperty _columnHeaderDragDelta;

    public NProperty ColumnHeaderDragStarted { get { return _columnHeaderDragStarted ?? (_columnHeaderDragStarted = NPropFactories.CreateColumnHeaderDragStarted()); } }
           NProperty _columnHeaderDragStarted;

    public NProperty ColumnHeaderHeight { get { return _columnHeaderHeight ?? (_columnHeaderHeight = NPropFactories.CreateColumnHeaderHeight()); } }
           NProperty _columnHeaderHeight;

    public NProperty ColumnHeaderStringFormat { get { return _columnHeaderStringFormat ?? (_columnHeaderStringFormat = NPropFactories.CreateColumnHeaderStringFormat()); } }
           NProperty _columnHeaderStringFormat;

    public NProperty ColumnHeaderStyle { get { return _columnHeaderStyle ?? (_columnHeaderStyle = NPropFactories.CreateColumnHeaderStyle()); } }
           NProperty _columnHeaderStyle;

    public NProperty ColumnHeaderTemplate { get { return _columnHeaderTemplate ?? (_columnHeaderTemplate = NPropFactories.CreateColumnHeaderTemplate()); } }
           NProperty _columnHeaderTemplate;

    public NProperty ColumnHeaderTemplateSelector { get { return _columnHeaderTemplateSelector ?? (_columnHeaderTemplateSelector = NPropFactories.CreateColumnHeaderTemplateSelector()); } }
           NProperty _columnHeaderTemplateSelector;

    public NProperty ColumnHeaderToolTip { get { return _columnHeaderToolTip ?? (_columnHeaderToolTip = NPropFactories.CreateColumnHeaderToolTip()); } }
           NProperty _columnHeaderToolTip;

    public NProperty ColumnReordered { get { return _columnReordered ?? (_columnReordered = NPropFactories.CreateColumnReordered()); } }
           NProperty _columnReordered;

    public NProperty ColumnReordering { get { return _columnReordering ?? (_columnReordering = NPropFactories.CreateColumnReordering()); } }
           NProperty _columnReordering;

    public NProperty Columns { get { return _columns ?? (_columns = NPropFactories.CreateColumns()); } }
           NProperty _columns;

    public NProperty ColumnSpan { get { return _columnSpan ?? (_columnSpan = NPropFactories.CreateColumnSpan()); } }
           NProperty _columnSpan;

    public NProperty ColumnWidth { get { return _columnWidth ?? (_columnWidth = NPropFactories.CreateColumnWidth()); } }
           NProperty _columnWidth;

    public NProperty Command { get { return _command ?? (_command = NPropFactories.CreateCommand()); } }
           NProperty _command;

    public NProperty CommandBindings { get { return _commandBindings ?? (_commandBindings = NPropFactories.CreateCommandBindings()); } }
           NProperty _commandBindings;

    public NProperty CommandParameter { get { return _commandParameter ?? (_commandParameter = NPropFactories.CreateCommandParameter()); } }
           NProperty _commandParameter;

    public NProperty CommandTarget { get { return _commandTarget ?? (_commandTarget = NPropFactories.CreateCommandTarget()); } }
           NProperty _commandTarget;

    public NProperty Content { get { return _content ?? (_content = NPropFactories.CreateContent()); } }
           NProperty _content;

    public NProperty ContentBox { get { return _contentBox ?? (_contentBox = NPropFactories.CreateContentBox()); } }
           NProperty _contentBox;

    public NProperty ContentRendered { get { return _contentRendered ?? (_contentRendered = NPropFactories.CreateContentRendered()); } }
           NProperty _contentRendered;

    public NProperty ContentSource { get { return _contentSource ?? (_contentSource = NPropFactories.CreateContentSource()); } }
           NProperty _contentSource;

    public NProperty ContentStringFormat { get { return _contentStringFormat ?? (_contentStringFormat = NPropFactories.CreateContentStringFormat()); } }
           NProperty _contentStringFormat;

    public NProperty ContentTemplate { get { return _contentTemplate ?? (_contentTemplate = NPropFactories.CreateContentTemplate()); } }
           NProperty _contentTemplate;

    public NProperty ContentTemplateSelector { get { return _contentTemplateSelector ?? (_contentTemplateSelector = NPropFactories.CreateContentTemplateSelector()); } }
           NProperty _contentTemplateSelector;

    public NProperty ContextMenu { get { return _contextMenu ?? (_contextMenu = NPropFactories.CreateContextMenu()); } }
           NProperty _contextMenu;

    public NProperty ContextMenuClosing { get { return _contextMenuClosing ?? (_contextMenuClosing = NPropFactories.CreateContextMenuClosing()); } }
           NProperty _contextMenuClosing;

    public NProperty ContextMenuOpening { get { return _contextMenuOpening ?? (_contextMenuOpening = NPropFactories.CreateContextMenuOpening()); } }
           NProperty _contextMenuOpening;

    public NProperty ContextualAlternates { get { return _contextualAlternates ?? (_contextualAlternates = NPropFactories.CreateContextualAlternates()); } }
           NProperty _contextualAlternates;

    public NProperty ContextualLigatures { get { return _contextualLigatures ?? (_contextualLigatures = NPropFactories.CreateContextualLigatures()); } }
           NProperty _contextualLigatures;

    public NProperty ContextualSwashes { get { return _contextualSwashes ?? (_contextualSwashes = NPropFactories.CreateContextualSwashes()); } }
           NProperty _contextualSwashes;

    public NProperty CopyingRowClipboardContent { get { return _copyingRowClipboardContent ?? (_copyingRowClipboardContent = NPropFactories.CreateCopyingRowClipboardContent()); } }
           NProperty _copyingRowClipboardContent;

    public NProperty CornerRadius { get { return _cornerRadius ?? (_cornerRadius = NPropFactories.CreateCornerRadius()); } }
           NProperty _cornerRadius;

    public NProperty CurrentCell { get { return _currentCell ?? (_currentCell = NPropFactories.CreateCurrentCell()); } }
           NProperty _currentCell;

    public NProperty CurrentCellChanged { get { return _currentCellChanged ?? (_currentCellChanged = NPropFactories.CreateCurrentCellChanged()); } }
           NProperty _currentCellChanged;

    public NProperty CurrentColumn { get { return _currentColumn ?? (_currentColumn = NPropFactories.CreateCurrentColumn()); } }
           NProperty _currentColumn;

    public NProperty CurrentItem { get { return _currentItem ?? (_currentItem = NPropFactories.CreateCurrentItem()); } }
           NProperty _currentItem;

    public NProperty Cursor { get { return _cursor ?? (_cursor = NPropFactories.CreateCursor()); } }
           NProperty _cursor;

    public NProperty CustomPopupPlacementCallback { get { return _customPopupPlacementCallback ?? (_customPopupPlacementCallback = NPropFactories.CreateCustomPopupPlacementCallback()); } }
           NProperty _customPopupPlacementCallback;

    public NProperty Data { get { return _data ?? (_data = NPropFactories.CreateData()); } }
           NProperty _data;

    public NProperty DataContext { get { return _dataContext ?? (_dataContext = NPropFactories.CreateDataContext()); } }
           NProperty _dataContext;

    public NProperty DataContextChanged { get { return _dataContextChanged ?? (_dataContextChanged = NPropFactories.CreateDataContextChanged()); } }
           NProperty _dataContextChanged;

    public NProperty DateValidationError { get { return _dateValidationError ?? (_dateValidationError = NPropFactories.CreateDateValidationError()); } }
           NProperty _dateValidationError;

    public NProperty Deactivated { get { return _deactivated ?? (_deactivated = NPropFactories.CreateDeactivated()); } }
           NProperty _deactivated;

    public NProperty DefaultDrawingAttributes { get { return _defaultDrawingAttributes ?? (_defaultDrawingAttributes = NPropFactories.CreateDefaultDrawingAttributes()); } }
           NProperty _defaultDrawingAttributes;

    public NProperty DefaultDrawingAttributesReplaced { get { return _defaultDrawingAttributesReplaced ?? (_defaultDrawingAttributesReplaced = NPropFactories.CreateDefaultDrawingAttributesReplaced()); } }
           NProperty _defaultDrawingAttributesReplaced;

    public NProperty Delay { get { return _delay ?? (_delay = NPropFactories.CreateDelay()); } }
           NProperty _delay;

    public NProperty DetailsTemplate { get { return _detailsTemplate ?? (_detailsTemplate = NPropFactories.CreateDetailsTemplate()); } }
           NProperty _detailsTemplate;

    public NProperty DetailsTemplateSelector { get { return _detailsTemplateSelector ?? (_detailsTemplateSelector = NPropFactories.CreateDetailsTemplateSelector()); } }
           NProperty _detailsTemplateSelector;

    public NProperty DetailsVisibility { get { return _detailsVisibility ?? (_detailsVisibility = NPropFactories.CreateDetailsVisibility()); } }
           NProperty _detailsVisibility;

    public NProperty DeviceFontName { get { return _deviceFontName ?? (_deviceFontName = NPropFactories.CreateDeviceFontName()); } }
           NProperty _deviceFontName;

    public NProperty DiscretionaryLigatures { get { return _discretionaryLigatures ?? (_discretionaryLigatures = NPropFactories.CreateDiscretionaryLigatures()); } }
           NProperty _discretionaryLigatures;

    public NProperty DisplayDate { get { return _displayDate ?? (_displayDate = NPropFactories.CreateDisplayDate()); } }
           NProperty _displayDate;

    public NProperty DisplayDateChanged { get { return _displayDateChanged ?? (_displayDateChanged = NPropFactories.CreateDisplayDateChanged()); } }
           NProperty _displayDateChanged;

    public NProperty DisplayDateEnd { get { return _displayDateEnd ?? (_displayDateEnd = NPropFactories.CreateDisplayDateEnd()); } }
           NProperty _displayDateEnd;

    public NProperty DisplayDateStart { get { return _displayDateStart ?? (_displayDateStart = NPropFactories.CreateDisplayDateStart()); } }
           NProperty _displayDateStart;

    public NProperty DisplayMemberPath { get { return _displayMemberPath ?? (_displayMemberPath = NPropFactories.CreateDisplayMemberPath()); } }
           NProperty _displayMemberPath;

    public NProperty DisplayMode { get { return _displayMode ?? (_displayMode = NPropFactories.CreateDisplayMode()); } }
           NProperty _displayMode;

    public NProperty DisplayModeChanged { get { return _displayModeChanged ?? (_displayModeChanged = NPropFactories.CreateDisplayModeChanged()); } }
           NProperty _displayModeChanged;

    public NProperty DockPanelDock { get { return _dockPanelDock ?? (_dockPanelDock = NPropFactories.CreateDockPanelDock()); } }
           NProperty _dockPanelDock;

    public NProperty Document { get { return _document ?? (_document = NPropFactories.CreateDocument()); } }
           NProperty _document;

    public NProperty DocumentViewerBaseIsMasterPage { get { return _documentViewerBaseIsMasterPage ?? (_documentViewerBaseIsMasterPage = NPropFactories.CreateDocumentViewerBaseIsMasterPage()); } }
           NProperty _documentViewerBaseIsMasterPage;

    public NProperty DpiChanged { get { return _dpiChanged ?? (_dpiChanged = NPropFactories.CreateDpiChanged()); } }
           NProperty _dpiChanged;

    public NProperty DragCompleted { get { return _dragCompleted ?? (_dragCompleted = NPropFactories.CreateDragCompleted()); } }
           NProperty _dragCompleted;

    public NProperty DragDelta { get { return _dragDelta ?? (_dragDelta = NPropFactories.CreateDragDelta()); } }
           NProperty _dragDelta;

    public NProperty DragEnter { get { return _dragEnter ?? (_dragEnter = NPropFactories.CreateDragEnter()); } }
           NProperty _dragEnter;

    public NProperty DragIncrement { get { return _dragIncrement ?? (_dragIncrement = NPropFactories.CreateDragIncrement()); } }
           NProperty _dragIncrement;

    public NProperty DragIndicatorStyle { get { return _dragIndicatorStyle ?? (_dragIndicatorStyle = NPropFactories.CreateDragIndicatorStyle()); } }
           NProperty _dragIndicatorStyle;

    public NProperty DragLeave { get { return _dragLeave ?? (_dragLeave = NPropFactories.CreateDragLeave()); } }
           NProperty _dragLeave;

    public NProperty DragOver { get { return _dragOver ?? (_dragOver = NPropFactories.CreateDragOver()); } }
           NProperty _dragOver;

    public NProperty DragStarted { get { return _dragStarted ?? (_dragStarted = NPropFactories.CreateDragStarted()); } }
           NProperty _dragStarted;

    public NProperty Drop { get { return _drop ?? (_drop = NPropFactories.CreateDrop()); } }
           NProperty _drop;

    public NProperty DropDownClosed { get { return _dropDownClosed ?? (_dropDownClosed = NPropFactories.CreateDropDownClosed()); } }
           NProperty _dropDownClosed;

    public NProperty DropDownOpened { get { return _dropDownOpened ?? (_dropDownOpened = NPropFactories.CreateDropDownOpened()); } }
           NProperty _dropDownOpened;

    public NProperty DropLocationIndicatorStyle { get { return _dropLocationIndicatorStyle ?? (_dropLocationIndicatorStyle = NPropFactories.CreateDropLocationIndicatorStyle()); } }
           NProperty _dropLocationIndicatorStyle;

    public NProperty EastAsianExpertForms { get { return _eastAsianExpertForms ?? (_eastAsianExpertForms = NPropFactories.CreateEastAsianExpertForms()); } }
           NProperty _eastAsianExpertForms;

    public NProperty EastAsianLanguage { get { return _eastAsianLanguage ?? (_eastAsianLanguage = NPropFactories.CreateEastAsianLanguage()); } }
           NProperty _eastAsianLanguage;

    public NProperty EastAsianWidths { get { return _eastAsianWidths ?? (_eastAsianWidths = NPropFactories.CreateEastAsianWidths()); } }
           NProperty _eastAsianWidths;

    public NProperty EditingMode { get { return _editingMode ?? (_editingMode = NPropFactories.CreateEditingMode()); } }
           NProperty _editingMode;

    public NProperty EditingModeChanged { get { return _editingModeChanged ?? (_editingModeChanged = NPropFactories.CreateEditingModeChanged()); } }
           NProperty _editingModeChanged;

    public NProperty EditingModeInverted { get { return _editingModeInverted ?? (_editingModeInverted = NPropFactories.CreateEditingModeInverted()); } }
           NProperty _editingModeInverted;

    public NProperty EditingModeInvertedChanged { get { return _editingModeInvertedChanged ?? (_editingModeInvertedChanged = NPropFactories.CreateEditingModeInvertedChanged()); } }
           NProperty _editingModeInvertedChanged;

    public NProperty Effect { get { return _effect ?? (_effect = NPropFactories.CreateEffect()); } }
           NProperty _effect;

    public NProperty EnableColumnVirtualization { get { return _enableColumnVirtualization ?? (_enableColumnVirtualization = NPropFactories.CreateEnableColumnVirtualization()); } }
           NProperty _enableColumnVirtualization;

    public NProperty EnableRowVirtualization { get { return _enableRowVirtualization ?? (_enableRowVirtualization = NPropFactories.CreateEnableRowVirtualization()); } }
           NProperty _enableRowVirtualization;

    public NProperty ExpandDirection { get { return _expandDirection ?? (_expandDirection = NPropFactories.CreateExpandDirection()); } }
           NProperty _expandDirection;

    public NProperty Expanded { get { return _expanded ?? (_expanded = NPropFactories.CreateExpanded()); } }
           NProperty _expanded;

    public NProperty Fill { get { return _fill ?? (_fill = NPropFactories.CreateFill()); } }
           NProperty _fill;

    public NProperty FillRule { get { return _fillRule ?? (_fillRule = NPropFactories.CreateFillRule()); } }
           NProperty _fillRule;

    public NProperty FirstColumn { get { return _firstColumn ?? (_firstColumn = NPropFactories.CreateFirstColumn()); } }
           NProperty _firstColumn;

    public NProperty FirstDayOfWeek { get { return _firstDayOfWeek ?? (_firstDayOfWeek = NPropFactories.CreateFirstDayOfWeek()); } }
           NProperty _firstDayOfWeek;

    public NProperty FixedPageBottom { get { return _fixedPageBottom ?? (_fixedPageBottom = NPropFactories.CreateFixedPageBottom()); } }
           NProperty _fixedPageBottom;

    public NProperty FixedPageLeft { get { return _fixedPageLeft ?? (_fixedPageLeft = NPropFactories.CreateFixedPageLeft()); } }
           NProperty _fixedPageLeft;

    public NProperty FixedPageNavigateUri { get { return _fixedPageNavigateUri ?? (_fixedPageNavigateUri = NPropFactories.CreateFixedPageNavigateUri()); } }
           NProperty _fixedPageNavigateUri;

    public NProperty FixedPageRight { get { return _fixedPageRight ?? (_fixedPageRight = NPropFactories.CreateFixedPageRight()); } }
           NProperty _fixedPageRight;

    public NProperty FixedPageTop { get { return _fixedPageTop ?? (_fixedPageTop = NPropFactories.CreateFixedPageTop()); } }
           NProperty _fixedPageTop;

    public NProperty FlowDirection { get { return _flowDirection ?? (_flowDirection = NPropFactories.CreateFlowDirection()); } }
           NProperty _flowDirection;

    public NProperty Focusable { get { return _focusable ?? (_focusable = NPropFactories.CreateFocusable()); } }
           NProperty _focusable;

    public NProperty FocusableChanged { get { return _focusableChanged ?? (_focusableChanged = NPropFactories.CreateFocusableChanged()); } }
           NProperty _focusableChanged;

    public NProperty FocusVisualStyle { get { return _focusVisualStyle ?? (_focusVisualStyle = NPropFactories.CreateFocusVisualStyle()); } }
           NProperty _focusVisualStyle;

    public NProperty FontFamily { get { return _fontFamily ?? (_fontFamily = NPropFactories.CreateFontFamily()); } }
           NProperty _fontFamily;

    public NProperty FontRenderingEmSize { get { return _fontRenderingEmSize ?? (_fontRenderingEmSize = NPropFactories.CreateFontRenderingEmSize()); } }
           NProperty _fontRenderingEmSize;

    public NProperty FontSize { get { return _fontSize ?? (_fontSize = NPropFactories.CreateFontSize()); } }
           NProperty _fontSize;

    public NProperty FontStretch { get { return _fontStretch ?? (_fontStretch = NPropFactories.CreateFontStretch()); } }
           NProperty _fontStretch;

    public NProperty FontStyle { get { return _fontStyle ?? (_fontStyle = NPropFactories.CreateFontStyle()); } }
           NProperty _fontStyle;

    public NProperty FontUri { get { return _fontUri ?? (_fontUri = NPropFactories.CreateFontUri()); } }
           NProperty _fontUri;

    public NProperty FontWeight { get { return _fontWeight ?? (_fontWeight = NPropFactories.CreateFontWeight()); } }
           NProperty _fontWeight;

    public NProperty ForceCursor { get { return _forceCursor ?? (_forceCursor = NPropFactories.CreateForceCursor()); } }
           NProperty _forceCursor;

    public NProperty Foreground { get { return _foreground ?? (_foreground = NPropFactories.CreateForeground()); } }
           NProperty _foreground;

    public NProperty Fraction { get { return _fraction ?? (_fraction = NPropFactories.CreateFraction()); } }
           NProperty _fraction;

    public NProperty FragmentNavigation { get { return _fragmentNavigation ?? (_fragmentNavigation = NPropFactories.CreateFragmentNavigation()); } }
           NProperty _fragmentNavigation;

    public NProperty FrameworkElementFlowDirection { get { return _frameworkElementFlowDirection ?? (_frameworkElementFlowDirection = NPropFactories.CreateFrameworkElementFlowDirection()); } }
           NProperty _frameworkElementFlowDirection;

    public NProperty FrozenColumnCount { get { return _frozenColumnCount ?? (_frozenColumnCount = NPropFactories.CreateFrozenColumnCount()); } }
           NProperty _frozenColumnCount;

    public NProperty Gesture { get { return _gesture ?? (_gesture = NPropFactories.CreateGesture()); } }
           NProperty _gesture;

    public NProperty GetPageRootCompleted { get { return _getPageRootCompleted ?? (_getPageRootCompleted = NPropFactories.CreateGetPageRootCompleted()); } }
           NProperty _getPageRootCompleted;

    public NProperty GiveFeedback { get { return _giveFeedback ?? (_giveFeedback = NPropFactories.CreateGiveFeedback()); } }
           NProperty _giveFeedback;

    public NProperty GotFocus { get { return _gotFocus ?? (_gotFocus = NPropFactories.CreateGotFocus()); } }
           NProperty _gotFocus;

    public NProperty GotKeyboardFocus { get { return _gotKeyboardFocus ?? (_gotKeyboardFocus = NPropFactories.CreateGotKeyboardFocus()); } }
           NProperty _gotKeyboardFocus;

    public NProperty GotMouseCapture { get { return _gotMouseCapture ?? (_gotMouseCapture = NPropFactories.CreateGotMouseCapture()); } }
           NProperty _gotMouseCapture;

    public NProperty GotStylusCapture { get { return _gotStylusCapture ?? (_gotStylusCapture = NPropFactories.CreateGotStylusCapture()); } }
           NProperty _gotStylusCapture;

    public NProperty GotTouchCapture { get { return _gotTouchCapture ?? (_gotTouchCapture = NPropFactories.CreateGotTouchCapture()); } }
           NProperty _gotTouchCapture;

    public NProperty GridColumn { get { return _gridColumn ?? (_gridColumn = NPropFactories.CreateGridColumn()); } }
           NProperty _gridColumn;

    public NProperty GridColumnSpan { get { return _gridColumnSpan ?? (_gridColumnSpan = NPropFactories.CreateGridColumnSpan()); } }
           NProperty _gridColumnSpan;

    public NProperty GridIsSharedSizeScope { get { return _gridIsSharedSizeScope ?? (_gridIsSharedSizeScope = NPropFactories.CreateGridIsSharedSizeScope()); } }
           NProperty _gridIsSharedSizeScope;

    public NProperty GridLinesVisibility { get { return _gridLinesVisibility ?? (_gridLinesVisibility = NPropFactories.CreateGridLinesVisibility()); } }
           NProperty _gridLinesVisibility;

    public NProperty GridRow { get { return _gridRow ?? (_gridRow = NPropFactories.CreateGridRow()); } }
           NProperty _gridRow;

    public NProperty GridRowSpan { get { return _gridRowSpan ?? (_gridRowSpan = NPropFactories.CreateGridRowSpan()); } }
           NProperty _gridRowSpan;

    public NProperty GroupName { get { return _groupName ?? (_groupName = NPropFactories.CreateGroupName()); } }
           NProperty _groupName;

    public NProperty GroupStyle { get { return _groupStyle ?? (_groupStyle = NPropFactories.CreateGroupStyle()); } }
           NProperty _groupStyle;

    public NProperty GroupStyleSelector { get { return _groupStyleSelector ?? (_groupStyleSelector = NPropFactories.CreateGroupStyleSelector()); } }
           NProperty _groupStyleSelector;

    public NProperty HasDropShadow { get { return _hasDropShadow ?? (_hasDropShadow = NPropFactories.CreateHasDropShadow()); } }
           NProperty _hasDropShadow;

    public NProperty HasTrailingParagraphBreakOnPaste { get { return _hasTrailingParagraphBreakOnPaste ?? (_hasTrailingParagraphBreakOnPaste = NPropFactories.CreateHasTrailingParagraphBreakOnPaste()); } }
           NProperty _hasTrailingParagraphBreakOnPaste;

    public NProperty Header { get { return _header ?? (_header = NPropFactories.CreateHeader()); } }
           NProperty _header;

    public NProperty HeaderStringFormat { get { return _headerStringFormat ?? (_headerStringFormat = NPropFactories.CreateHeaderStringFormat()); } }
           NProperty _headerStringFormat;

    public NProperty HeaderStyle { get { return _headerStyle ?? (_headerStyle = NPropFactories.CreateHeaderStyle()); } }
           NProperty _headerStyle;

    public NProperty HeadersVisibility { get { return _headersVisibility ?? (_headersVisibility = NPropFactories.CreateHeadersVisibility()); } }
           NProperty _headersVisibility;

    public NProperty HeaderTemplate { get { return _headerTemplate ?? (_headerTemplate = NPropFactories.CreateHeaderTemplate()); } }
           NProperty _headerTemplate;

    public NProperty HeaderTemplateSelector { get { return _headerTemplateSelector ?? (_headerTemplateSelector = NPropFactories.CreateHeaderTemplateSelector()); } }
           NProperty _headerTemplateSelector;

    public NProperty Height { get { return _height ?? (_height = NPropFactories.CreateHeight()); } }
           NProperty _height;

    public NProperty HistoricalForms { get { return _historicalForms ?? (_historicalForms = NPropFactories.CreateHistoricalForms()); } }
           NProperty _historicalForms;

    public NProperty HistoricalLigatures { get { return _historicalLigatures ?? (_historicalLigatures = NPropFactories.CreateHistoricalLigatures()); } }
           NProperty _historicalLigatures;

    public NProperty HorizontalAlignment { get { return _horizontalAlignment ?? (_horizontalAlignment = NPropFactories.CreateHorizontalAlignment()); } }
           NProperty _horizontalAlignment;

    public NProperty HorizontalAnchor { get { return _horizontalAnchor ?? (_horizontalAnchor = NPropFactories.CreateHorizontalAnchor()); } }
           NProperty _horizontalAnchor;

    public NProperty HorizontalContentAlignment { get { return _horizontalContentAlignment ?? (_horizontalContentAlignment = NPropFactories.CreateHorizontalContentAlignment()); } }
           NProperty _horizontalContentAlignment;

    public NProperty HorizontalGridLinesBrush { get { return _horizontalGridLinesBrush ?? (_horizontalGridLinesBrush = NPropFactories.CreateHorizontalGridLinesBrush()); } }
           NProperty _horizontalGridLinesBrush;

    public NProperty HorizontalOffset { get { return _horizontalOffset ?? (_horizontalOffset = NPropFactories.CreateHorizontalOffset()); } }
           NProperty _horizontalOffset;

    public NProperty HorizontalPageSpacing { get { return _horizontalPageSpacing ?? (_horizontalPageSpacing = NPropFactories.CreateHorizontalPageSpacing()); } }
           NProperty _horizontalPageSpacing;

    public NProperty HorizontalScrollBarVisibility { get { return _horizontalScrollBarVisibility ?? (_horizontalScrollBarVisibility = NPropFactories.CreateHorizontalScrollBarVisibility()); } }
           NProperty _horizontalScrollBarVisibility;

    public NProperty Icon { get { return _icon ?? (_icon = NPropFactories.CreateIcon()); } }
           NProperty _icon;

    public NProperty ImageFailed { get { return _imageFailed ?? (_imageFailed = NPropFactories.CreateImageFailed()); } }
           NProperty _imageFailed;

    public NProperty Indeterminate { get { return _indeterminate ?? (_indeterminate = NPropFactories.CreateIndeterminate()); } }
           NProperty _indeterminate;

    public NProperty Indices { get { return _indices ?? (_indices = NPropFactories.CreateIndices()); } }
           NProperty _indices;

    public NProperty Initialized { get { return _initialized ?? (_initialized = NPropFactories.CreateInitialized()); } }
           NProperty _initialized;

    public NProperty InitializingNewItem { get { return _initializingNewItem ?? (_initializingNewItem = NPropFactories.CreateInitializingNewItem()); } }
           NProperty _initializingNewItem;

    public NProperty InkCanvasBottom { get { return _inkCanvasBottom ?? (_inkCanvasBottom = NPropFactories.CreateInkCanvasBottom()); } }
           NProperty _inkCanvasBottom;

    public NProperty InkCanvasLeft { get { return _inkCanvasLeft ?? (_inkCanvasLeft = NPropFactories.CreateInkCanvasLeft()); } }
           NProperty _inkCanvasLeft;

    public NProperty InkCanvasRight { get { return _inkCanvasRight ?? (_inkCanvasRight = NPropFactories.CreateInkCanvasRight()); } }
           NProperty _inkCanvasRight;

    public NProperty InkCanvasTop { get { return _inkCanvasTop ?? (_inkCanvasTop = NPropFactories.CreateInkCanvasTop()); } }
           NProperty _inkCanvasTop;

    public NProperty Inlines { get { return _inlines ?? (_inlines = NPropFactories.CreateInlines()); } }
           NProperty _inlines;

    public NProperty InputBindings { get { return _inputBindings ?? (_inputBindings = NPropFactories.CreateInputBindings()); } }
           NProperty _inputBindings;

    public NProperty InputGestureText { get { return _inputGestureText ?? (_inputGestureText = NPropFactories.CreateInputGestureText()); } }
           NProperty _inputGestureText;

    public NProperty InputScope { get { return _inputScope ?? (_inputScope = NPropFactories.CreateInputScope()); } }
           NProperty _inputScope;

    public NProperty Interval { get { return _interval ?? (_interval = NPropFactories.CreateInterval()); } }
           NProperty _interval;

    public NProperty IsCancel { get { return _isCancel ?? (_isCancel = NPropFactories.CreateIsCancel()); } }
           NProperty _isCancel;

    public NProperty IsCheckable { get { return _isCheckable ?? (_isCheckable = NPropFactories.CreateIsCheckable()); } }
           NProperty _isCheckable;

    public NProperty IsChecked { get { return _isChecked ?? (_isChecked = NPropFactories.CreateIsChecked()); } }
           NProperty _isChecked;

    public NProperty IsClipEnabled { get { return _isClipEnabled ?? (_isClipEnabled = NPropFactories.CreateIsClipEnabled()); } }
           NProperty _isClipEnabled;

    public NProperty IsDefault { get { return _isDefault ?? (_isDefault = NPropFactories.CreateIsDefault()); } }
           NProperty _isDefault;

    public NProperty IsDeferredScrollingEnabled { get { return _isDeferredScrollingEnabled ?? (_isDeferredScrollingEnabled = NPropFactories.CreateIsDeferredScrollingEnabled()); } }
           NProperty _isDeferredScrollingEnabled;

    public NProperty IsDirectionReversed { get { return _isDirectionReversed ?? (_isDirectionReversed = NPropFactories.CreateIsDirectionReversed()); } }
           NProperty _isDirectionReversed;

    public NProperty IsDocumentEnabled { get { return _isDocumentEnabled ?? (_isDocumentEnabled = NPropFactories.CreateIsDocumentEnabled()); } }
           NProperty _isDocumentEnabled;

    public NProperty IsDropDownOpen { get { return _isDropDownOpen ?? (_isDropDownOpen = NPropFactories.CreateIsDropDownOpen()); } }
           NProperty _isDropDownOpen;

    public NProperty IsEditable { get { return _isEditable ?? (_isEditable = NPropFactories.CreateIsEditable()); } }
           NProperty _isEditable;

    public NProperty IsEditing { get { return _isEditing ?? (_isEditing = NPropFactories.CreateIsEditing()); } }
           NProperty _isEditing;

    public NProperty IsEnabled { get { return _isEnabled ?? (_isEnabled = NPropFactories.CreateIsEnabled()); } }
           NProperty _isEnabled;

    public NProperty IsEnabledChanged { get { return _isEnabledChanged ?? (_isEnabledChanged = NPropFactories.CreateIsEnabledChanged()); } }
           NProperty _isEnabledChanged;

    public NProperty IsExpanded { get { return _isExpanded ?? (_isExpanded = NPropFactories.CreateIsExpanded()); } }
           NProperty _isExpanded;

    public NProperty IsFindEnabled { get { return _isFindEnabled ?? (_isFindEnabled = NPropFactories.CreateIsFindEnabled()); } }
           NProperty _isFindEnabled;

    public NProperty IsHitTestVisible { get { return _isHitTestVisible ?? (_isHitTestVisible = NPropFactories.CreateIsHitTestVisible()); } }
           NProperty _isHitTestVisible;

    public NProperty IsHitTestVisibleChanged { get { return _isHitTestVisibleChanged ?? (_isHitTestVisibleChanged = NPropFactories.CreateIsHitTestVisibleChanged()); } }
           NProperty _isHitTestVisibleChanged;

    public NProperty IsHyphenationEnabled { get { return _isHyphenationEnabled ?? (_isHyphenationEnabled = NPropFactories.CreateIsHyphenationEnabled()); } }
           NProperty _isHyphenationEnabled;

    public NProperty IsInactiveSelectionHighlightEnabled { get { return _isInactiveSelectionHighlightEnabled ?? (_isInactiveSelectionHighlightEnabled = NPropFactories.CreateIsInactiveSelectionHighlightEnabled()); } }
           NProperty _isInactiveSelectionHighlightEnabled;

    public NProperty IsIndeterminate { get { return _isIndeterminate ?? (_isIndeterminate = NPropFactories.CreateIsIndeterminate()); } }
           NProperty _isIndeterminate;

    public NProperty IsItemsHost { get { return _isItemsHost ?? (_isItemsHost = NPropFactories.CreateIsItemsHost()); } }
           NProperty _isItemsHost;

    public NProperty IsKeyboardFocusedChanged { get { return _isKeyboardFocusedChanged ?? (_isKeyboardFocusedChanged = NPropFactories.CreateIsKeyboardFocusedChanged()); } }
           NProperty _isKeyboardFocusedChanged;

    public NProperty IsKeyboardFocusWithinChanged { get { return _isKeyboardFocusWithinChanged ?? (_isKeyboardFocusWithinChanged = NPropFactories.CreateIsKeyboardFocusWithinChanged()); } }
           NProperty _isKeyboardFocusWithinChanged;

    public NProperty IsLocked { get { return _isLocked ?? (_isLocked = NPropFactories.CreateIsLocked()); } }
           NProperty _isLocked;

    public NProperty IsMainMenu { get { return _isMainMenu ?? (_isMainMenu = NPropFactories.CreateIsMainMenu()); } }
           NProperty _isMainMenu;

    public NProperty IsManipulationEnabled { get { return _isManipulationEnabled ?? (_isManipulationEnabled = NPropFactories.CreateIsManipulationEnabled()); } }
           NProperty _isManipulationEnabled;

    public NProperty IsMouseCapturedChanged { get { return _isMouseCapturedChanged ?? (_isMouseCapturedChanged = NPropFactories.CreateIsMouseCapturedChanged()); } }
           NProperty _isMouseCapturedChanged;

    public NProperty IsMouseCaptureWithinChanged { get { return _isMouseCaptureWithinChanged ?? (_isMouseCaptureWithinChanged = NPropFactories.CreateIsMouseCaptureWithinChanged()); } }
           NProperty _isMouseCaptureWithinChanged;

    public NProperty IsMouseDirectlyOverChanged { get { return _isMouseDirectlyOverChanged ?? (_isMouseDirectlyOverChanged = NPropFactories.CreateIsMouseDirectlyOverChanged()); } }
           NProperty _isMouseDirectlyOverChanged;

    public NProperty IsMoveToPointEnabled { get { return _isMoveToPointEnabled ?? (_isMoveToPointEnabled = NPropFactories.CreateIsMoveToPointEnabled()); } }
           NProperty _isMoveToPointEnabled;

    public NProperty IsMuted { get { return _isMuted ?? (_isMuted = NPropFactories.CreateIsMuted()); } }
           NProperty _isMuted;

    public NProperty IsOpen { get { return _isOpen ?? (_isOpen = NPropFactories.CreateIsOpen()); } }
           NProperty _isOpen;

    public NProperty IsOverflowOpen { get { return _isOverflowOpen ?? (_isOverflowOpen = NPropFactories.CreateIsOverflowOpen()); } }
           NProperty _isOverflowOpen;

    public NProperty IsPageViewEnabled { get { return _isPageViewEnabled ?? (_isPageViewEnabled = NPropFactories.CreateIsPageViewEnabled()); } }
           NProperty _isPageViewEnabled;

    public NProperty IsPrintEnabled { get { return _isPrintEnabled ?? (_isPrintEnabled = NPropFactories.CreateIsPrintEnabled()); } }
           NProperty _isPrintEnabled;

    public NProperty IsReadOnly { get { return _isReadOnly ?? (_isReadOnly = NPropFactories.CreateIsReadOnly()); } }
           NProperty _isReadOnly;

    public NProperty IsReadOnlyCaretVisible { get { return _isReadOnlyCaretVisible ?? (_isReadOnlyCaretVisible = NPropFactories.CreateIsReadOnlyCaretVisible()); } }
           NProperty _isReadOnlyCaretVisible;

    public NProperty IsScrollViewEnabled { get { return _isScrollViewEnabled ?? (_isScrollViewEnabled = NPropFactories.CreateIsScrollViewEnabled()); } }
           NProperty _isScrollViewEnabled;

    public NProperty IsSelected { get { return _isSelected ?? (_isSelected = NPropFactories.CreateIsSelected()); } }
           NProperty _isSelected;

    public NProperty IsSelectionEnabled { get { return _isSelectionEnabled ?? (_isSelectionEnabled = NPropFactories.CreateIsSelectionEnabled()); } }
           NProperty _isSelectionEnabled;

    public NProperty IsSelectionRangeEnabled { get { return _isSelectionRangeEnabled ?? (_isSelectionRangeEnabled = NPropFactories.CreateIsSelectionRangeEnabled()); } }
           NProperty _isSelectionRangeEnabled;

    public NProperty IsSideways { get { return _isSideways ?? (_isSideways = NPropFactories.CreateIsSideways()); } }
           NProperty _isSideways;

    public NProperty IsSnapToTickEnabled { get { return _isSnapToTickEnabled ?? (_isSnapToTickEnabled = NPropFactories.CreateIsSnapToTickEnabled()); } }
           NProperty _isSnapToTickEnabled;

    public NProperty IsStylusCapturedChanged { get { return _isStylusCapturedChanged ?? (_isStylusCapturedChanged = NPropFactories.CreateIsStylusCapturedChanged()); } }
           NProperty _isStylusCapturedChanged;

    public NProperty IsStylusCaptureWithinChanged { get { return _isStylusCaptureWithinChanged ?? (_isStylusCaptureWithinChanged = NPropFactories.CreateIsStylusCaptureWithinChanged()); } }
           NProperty _isStylusCaptureWithinChanged;

    public NProperty IsStylusDirectlyOverChanged { get { return _isStylusDirectlyOverChanged ?? (_isStylusDirectlyOverChanged = NPropFactories.CreateIsStylusDirectlyOverChanged()); } }
           NProperty _isStylusDirectlyOverChanged;

    public NProperty IsSubmenuOpen { get { return _isSubmenuOpen ?? (_isSubmenuOpen = NPropFactories.CreateIsSubmenuOpen()); } }
           NProperty _isSubmenuOpen;

    public NProperty IsSynchronizedWithCurrentItem { get { return _isSynchronizedWithCurrentItem ?? (_isSynchronizedWithCurrentItem = NPropFactories.CreateIsSynchronizedWithCurrentItem()); } }
           NProperty _isSynchronizedWithCurrentItem;

    public NProperty IsTabStop { get { return _isTabStop ?? (_isTabStop = NPropFactories.CreateIsTabStop()); } }
           NProperty _isTabStop;

    public NProperty IsTextSearchCaseSensitive { get { return _isTextSearchCaseSensitive ?? (_isTextSearchCaseSensitive = NPropFactories.CreateIsTextSearchCaseSensitive()); } }
           NProperty _isTextSearchCaseSensitive;

    public NProperty IsTextSearchEnabled { get { return _isTextSearchEnabled ?? (_isTextSearchEnabled = NPropFactories.CreateIsTextSearchEnabled()); } }
           NProperty _isTextSearchEnabled;

    public NProperty IsThreeState { get { return _isThreeState ?? (_isThreeState = NPropFactories.CreateIsThreeState()); } }
           NProperty _isThreeState;

    public NProperty IsTodayHighlighted { get { return _isTodayHighlighted ?? (_isTodayHighlighted = NPropFactories.CreateIsTodayHighlighted()); } }
           NProperty _isTodayHighlighted;

    public NProperty IsToolBarVisible { get { return _isToolBarVisible ?? (_isToolBarVisible = NPropFactories.CreateIsToolBarVisible()); } }
           NProperty _isToolBarVisible;

    public NProperty IsTwoPageViewEnabled { get { return _isTwoPageViewEnabled ?? (_isTwoPageViewEnabled = NPropFactories.CreateIsTwoPageViewEnabled()); } }
           NProperty _isTwoPageViewEnabled;

    public NProperty IsUndoEnabled { get { return _isUndoEnabled ?? (_isUndoEnabled = NPropFactories.CreateIsUndoEnabled()); } }
           NProperty _isUndoEnabled;

    public NProperty IsVisibleChanged { get { return _isVisibleChanged ?? (_isVisibleChanged = NPropFactories.CreateIsVisibleChanged()); } }
           NProperty _isVisibleChanged;

    public NProperty Item { get { return _item ?? (_item = NPropFactories.CreateItem()); } }
           NProperty _item;

    public NProperty ItemBindingGroup { get { return _itemBindingGroup ?? (_itemBindingGroup = NPropFactories.CreateItemBindingGroup()); } }
           NProperty _itemBindingGroup;

    public NProperty ItemContainerStyle { get { return _itemContainerStyle ?? (_itemContainerStyle = NPropFactories.CreateItemContainerStyle()); } }
           NProperty _itemContainerStyle;

    public NProperty ItemContainerStyleSelector { get { return _itemContainerStyleSelector ?? (_itemContainerStyleSelector = NPropFactories.CreateItemContainerStyleSelector()); } }
           NProperty _itemContainerStyleSelector;

    public NProperty ItemContainerTemplateSelector { get { return _itemContainerTemplateSelector ?? (_itemContainerTemplateSelector = NPropFactories.CreateItemContainerTemplateSelector()); } }
           NProperty _itemContainerTemplateSelector;

    public NProperty ItemHeight { get { return _itemHeight ?? (_itemHeight = NPropFactories.CreateItemHeight()); } }
           NProperty _itemHeight;

    public NProperty Items { get { return _items ?? (_items = NPropFactories.CreateItems()); } }
           NProperty _items;

    public NProperty ItemsPanel { get { return _itemsPanel ?? (_itemsPanel = NPropFactories.CreateItemsPanel()); } }
           NProperty _itemsPanel;

    public NProperty ItemsSource { get { return _itemsSource ?? (_itemsSource = NPropFactories.CreateItemsSource()); } }
           NProperty _itemsSource;

    public NProperty ItemStringFormat { get { return _itemStringFormat ?? (_itemStringFormat = NPropFactories.CreateItemStringFormat()); } }
           NProperty _itemStringFormat;

    public NProperty ItemTemplate { get { return _itemTemplate ?? (_itemTemplate = NPropFactories.CreateItemTemplate()); } }
           NProperty _itemTemplate;

    public NProperty ItemTemplateSelector { get { return _itemTemplateSelector ?? (_itemTemplateSelector = NPropFactories.CreateItemTemplateSelector()); } }
           NProperty _itemTemplateSelector;

    public NProperty ItemWidth { get { return _itemWidth ?? (_itemWidth = NPropFactories.CreateItemWidth()); } }
           NProperty _itemWidth;

    public NProperty JournalOwnership { get { return _journalOwnership ?? (_journalOwnership = NPropFactories.CreateJournalOwnership()); } }
           NProperty _journalOwnership;

    public NProperty KeepAlive { get { return _keepAlive ?? (_keepAlive = NPropFactories.CreateKeepAlive()); } }
           NProperty _keepAlive;

    public NProperty KeepTogether { get { return _keepTogether ?? (_keepTogether = NPropFactories.CreateKeepTogether()); } }
           NProperty _keepTogether;

    public NProperty KeepWithNext { get { return _keepWithNext ?? (_keepWithNext = NPropFactories.CreateKeepWithNext()); } }
           NProperty _keepWithNext;

    public NProperty Kerning { get { return _kerning ?? (_kerning = NPropFactories.CreateKerning()); } }
           NProperty _kerning;

    public NProperty KeyboardIncrement { get { return _keyboardIncrement ?? (_keyboardIncrement = NPropFactories.CreateKeyboardIncrement()); } }
           NProperty _keyboardIncrement;

    public NProperty KeyDown { get { return _keyDown ?? (_keyDown = NPropFactories.CreateKeyDown()); } }
           NProperty _keyDown;

    public NProperty KeyUp { get { return _keyUp ?? (_keyUp = NPropFactories.CreateKeyUp()); } }
           NProperty _keyUp;

    public NProperty Language { get { return _language ?? (_language = NPropFactories.CreateLanguage()); } }
           NProperty _language;

    public NProperty LargeChange { get { return _largeChange ?? (_largeChange = NPropFactories.CreateLargeChange()); } }
           NProperty _largeChange;

    public NProperty LastChildFill { get { return _lastChildFill ?? (_lastChildFill = NPropFactories.CreateLastChildFill()); } }
           NProperty _lastChildFill;

    public NProperty LayoutTransform { get { return _layoutTransform ?? (_layoutTransform = NPropFactories.CreateLayoutTransform()); } }
           NProperty _layoutTransform;

    public NProperty LayoutUpdated { get { return _layoutUpdated ?? (_layoutUpdated = NPropFactories.CreateLayoutUpdated()); } }
           NProperty _layoutUpdated;

    public NProperty Left { get { return _left ?? (_left = NPropFactories.CreateLeft()); } }
           NProperty _left;

    public NProperty LineHeight { get { return _lineHeight ?? (_lineHeight = NPropFactories.CreateLineHeight()); } }
           NProperty _lineHeight;

    public NProperty LineStackingStrategy { get { return _lineStackingStrategy ?? (_lineStackingStrategy = NPropFactories.CreateLineStackingStrategy()); } }
           NProperty _lineStackingStrategy;

    public NProperty LinkTargets { get { return _linkTargets ?? (_linkTargets = NPropFactories.CreateLinkTargets()); } }
           NProperty _linkTargets;

    public NProperty ListItems { get { return _listItems ?? (_listItems = NPropFactories.CreateListItems()); } }
           NProperty _listItems;

    public NProperty LoadCompleted { get { return _loadCompleted ?? (_loadCompleted = NPropFactories.CreateLoadCompleted()); } }
           NProperty _loadCompleted;

    public NProperty Loaded { get { return _loaded ?? (_loaded = NPropFactories.CreateLoaded()); } }
           NProperty _loaded;

    public NProperty LoadedBehavior { get { return _loadedBehavior ?? (_loadedBehavior = NPropFactories.CreateLoadedBehavior()); } }
           NProperty _loadedBehavior;

    public NProperty LoadingRow { get { return _loadingRow ?? (_loadingRow = NPropFactories.CreateLoadingRow()); } }
           NProperty _loadingRow;

    public NProperty LoadingRowDetails { get { return _loadingRowDetails ?? (_loadingRowDetails = NPropFactories.CreateLoadingRowDetails()); } }
           NProperty _loadingRowDetails;

    public NProperty LocationChanged { get { return _locationChanged ?? (_locationChanged = NPropFactories.CreateLocationChanged()); } }
           NProperty _locationChanged;

    public NProperty LostFocus { get { return _lostFocus ?? (_lostFocus = NPropFactories.CreateLostFocus()); } }
           NProperty _lostFocus;

    public NProperty LostKeyboardFocus { get { return _lostKeyboardFocus ?? (_lostKeyboardFocus = NPropFactories.CreateLostKeyboardFocus()); } }
           NProperty _lostKeyboardFocus;

    public NProperty LostMouseCapture { get { return _lostMouseCapture ?? (_lostMouseCapture = NPropFactories.CreateLostMouseCapture()); } }
           NProperty _lostMouseCapture;

    public NProperty LostStylusCapture { get { return _lostStylusCapture ?? (_lostStylusCapture = NPropFactories.CreateLostStylusCapture()); } }
           NProperty _lostStylusCapture;

    public NProperty LostTouchCapture { get { return _lostTouchCapture ?? (_lostTouchCapture = NPropFactories.CreateLostTouchCapture()); } }
           NProperty _lostTouchCapture;

    public NProperty ManipulationBoundaryFeedback { get { return _manipulationBoundaryFeedback ?? (_manipulationBoundaryFeedback = NPropFactories.CreateManipulationBoundaryFeedback()); } }
           NProperty _manipulationBoundaryFeedback;

    public NProperty ManipulationCompleted { get { return _manipulationCompleted ?? (_manipulationCompleted = NPropFactories.CreateManipulationCompleted()); } }
           NProperty _manipulationCompleted;

    public NProperty ManipulationDelta { get { return _manipulationDelta ?? (_manipulationDelta = NPropFactories.CreateManipulationDelta()); } }
           NProperty _manipulationDelta;

    public NProperty ManipulationInertiaStarting { get { return _manipulationInertiaStarting ?? (_manipulationInertiaStarting = NPropFactories.CreateManipulationInertiaStarting()); } }
           NProperty _manipulationInertiaStarting;

    public NProperty ManipulationStarted { get { return _manipulationStarted ?? (_manipulationStarted = NPropFactories.CreateManipulationStarted()); } }
           NProperty _manipulationStarted;

    public NProperty ManipulationStarting { get { return _manipulationStarting ?? (_manipulationStarting = NPropFactories.CreateManipulationStarting()); } }
           NProperty _manipulationStarting;

    public NProperty Margin { get { return _margin ?? (_margin = NPropFactories.CreateMargin()); } }
           NProperty _margin;

    public NProperty MarkerOffset { get { return _markerOffset ?? (_markerOffset = NPropFactories.CreateMarkerOffset()); } }
           NProperty _markerOffset;

    public NProperty MarkerStyle { get { return _markerStyle ?? (_markerStyle = NPropFactories.CreateMarkerStyle()); } }
           NProperty _markerStyle;

    public NProperty MathematicalGreek { get { return _mathematicalGreek ?? (_mathematicalGreek = NPropFactories.CreateMathematicalGreek()); } }
           NProperty _mathematicalGreek;

    public NProperty MaxColumnWidth { get { return _maxColumnWidth ?? (_maxColumnWidth = NPropFactories.CreateMaxColumnWidth()); } }
           NProperty _maxColumnWidth;

    public NProperty MaxDropDownHeight { get { return _maxDropDownHeight ?? (_maxDropDownHeight = NPropFactories.CreateMaxDropDownHeight()); } }
           NProperty _maxDropDownHeight;

    public NProperty MaxHeight { get { return _maxHeight ?? (_maxHeight = NPropFactories.CreateMaxHeight()); } }
           NProperty _maxHeight;

    public NProperty Maximum { get { return _maximum ?? (_maximum = NPropFactories.CreateMaximum()); } }
           NProperty _maximum;

    public NProperty MaxLength { get { return _maxLength ?? (_maxLength = NPropFactories.CreateMaxLength()); } }
           NProperty _maxLength;

    public NProperty MaxLines { get { return _maxLines ?? (_maxLines = NPropFactories.CreateMaxLines()); } }
           NProperty _maxLines;

    public NProperty MaxPagesAcross { get { return _maxPagesAcross ?? (_maxPagesAcross = NPropFactories.CreateMaxPagesAcross()); } }
           NProperty _maxPagesAcross;

    public NProperty MaxWidth { get { return _maxWidth ?? (_maxWidth = NPropFactories.CreateMaxWidth()); } }
           NProperty _maxWidth;

    public NProperty MaxZoom { get { return _maxZoom ?? (_maxZoom = NPropFactories.CreateMaxZoom()); } }
           NProperty _maxZoom;

    public NProperty MediaEnded { get { return _mediaEnded ?? (_mediaEnded = NPropFactories.CreateMediaEnded()); } }
           NProperty _mediaEnded;

    public NProperty MediaFailed { get { return _mediaFailed ?? (_mediaFailed = NPropFactories.CreateMediaFailed()); } }
           NProperty _mediaFailed;

    public NProperty MediaOpened { get { return _mediaOpened ?? (_mediaOpened = NPropFactories.CreateMediaOpened()); } }
           NProperty _mediaOpened;

    public NProperty MinColumnWidth { get { return _minColumnWidth ?? (_minColumnWidth = NPropFactories.CreateMinColumnWidth()); } }
           NProperty _minColumnWidth;

    public NProperty MinHeight { get { return _minHeight ?? (_minHeight = NPropFactories.CreateMinHeight()); } }
           NProperty _minHeight;

    public NProperty Minimum { get { return _minimum ?? (_minimum = NPropFactories.CreateMinimum()); } }
           NProperty _minimum;

    public NProperty MinLines { get { return _minLines ?? (_minLines = NPropFactories.CreateMinLines()); } }
           NProperty _minLines;

    public NProperty MinOrphanLines { get { return _minOrphanLines ?? (_minOrphanLines = NPropFactories.CreateMinOrphanLines()); } }
           NProperty _minOrphanLines;

    public NProperty MinRowHeight { get { return _minRowHeight ?? (_minRowHeight = NPropFactories.CreateMinRowHeight()); } }
           NProperty _minRowHeight;

    public NProperty MinWidowLines { get { return _minWidowLines ?? (_minWidowLines = NPropFactories.CreateMinWidowLines()); } }
           NProperty _minWidowLines;

    public NProperty MinWidth { get { return _minWidth ?? (_minWidth = NPropFactories.CreateMinWidth()); } }
           NProperty _minWidth;

    public NProperty MinZoom { get { return _minZoom ?? (_minZoom = NPropFactories.CreateMinZoom()); } }
           NProperty _minZoom;

    public NProperty MouseDoubleClick { get { return _mouseDoubleClick ?? (_mouseDoubleClick = NPropFactories.CreateMouseDoubleClick()); } }
           NProperty _mouseDoubleClick;

    public NProperty MouseDown { get { return _mouseDown ?? (_mouseDown = NPropFactories.CreateMouseDown()); } }
           NProperty _mouseDown;

    public NProperty MouseEnter { get { return _mouseEnter ?? (_mouseEnter = NPropFactories.CreateMouseEnter()); } }
           NProperty _mouseEnter;

    public NProperty MouseLeave { get { return _mouseLeave ?? (_mouseLeave = NPropFactories.CreateMouseLeave()); } }
           NProperty _mouseLeave;

    public NProperty MouseLeftButtonDown { get { return _mouseLeftButtonDown ?? (_mouseLeftButtonDown = NPropFactories.CreateMouseLeftButtonDown()); } }
           NProperty _mouseLeftButtonDown;

    public NProperty MouseLeftButtonUp { get { return _mouseLeftButtonUp ?? (_mouseLeftButtonUp = NPropFactories.CreateMouseLeftButtonUp()); } }
           NProperty _mouseLeftButtonUp;

    public NProperty MouseMove { get { return _mouseMove ?? (_mouseMove = NPropFactories.CreateMouseMove()); } }
           NProperty _mouseMove;

    public NProperty MouseRightButtonDown { get { return _mouseRightButtonDown ?? (_mouseRightButtonDown = NPropFactories.CreateMouseRightButtonDown()); } }
           NProperty _mouseRightButtonDown;

    public NProperty MouseRightButtonUp { get { return _mouseRightButtonUp ?? (_mouseRightButtonUp = NPropFactories.CreateMouseRightButtonUp()); } }
           NProperty _mouseRightButtonUp;

    public NProperty MouseUp { get { return _mouseUp ?? (_mouseUp = NPropFactories.CreateMouseUp()); } }
           NProperty _mouseUp;

    public NProperty MouseWheel { get { return _mouseWheel ?? (_mouseWheel = NPropFactories.CreateMouseWheel()); } }
           NProperty _mouseWheel;

    public NProperty MoveEnabled { get { return _moveEnabled ?? (_moveEnabled = NPropFactories.CreateMoveEnabled()); } }
           NProperty _moveEnabled;

    public NProperty Name { get { return _name ?? (_name = NPropFactories.CreateName()); } }
           NProperty _name;

    public NProperty Navigated { get { return _navigated ?? (_navigated = NPropFactories.CreateNavigated()); } }
           NProperty _navigated;

    public NProperty NavigateUri { get { return _navigateUri ?? (_navigateUri = NPropFactories.CreateNavigateUri()); } }
           NProperty _navigateUri;

    public NProperty Navigating { get { return _navigating ?? (_navigating = NPropFactories.CreateNavigating()); } }
           NProperty _navigating;

    public NProperty NavigationFailed { get { return _navigationFailed ?? (_navigationFailed = NPropFactories.CreateNavigationFailed()); } }
           NProperty _navigationFailed;

    public NProperty NavigationProgress { get { return _navigationProgress ?? (_navigationProgress = NPropFactories.CreateNavigationProgress()); } }
           NProperty _navigationProgress;

    public NProperty NavigationStopped { get { return _navigationStopped ?? (_navigationStopped = NPropFactories.CreateNavigationStopped()); } }
           NProperty _navigationStopped;

    public NProperty NavigationUIVisibility { get { return _navigationUIVisibility ?? (_navigationUIVisibility = NPropFactories.CreateNavigationUIVisibility()); } }
           NProperty _navigationUIVisibility;

    public NProperty NumeralAlignment { get { return _numeralAlignment ?? (_numeralAlignment = NPropFactories.CreateNumeralAlignment()); } }
           NProperty _numeralAlignment;

    public NProperty NumeralStyle { get { return _numeralStyle ?? (_numeralStyle = NPropFactories.CreateNumeralStyle()); } }
           NProperty _numeralStyle;

    public NProperty Opacity { get { return _opacity ?? (_opacity = NPropFactories.CreateOpacity()); } }
           NProperty _opacity;

    public NProperty OpacityMask { get { return _opacityMask ?? (_opacityMask = NPropFactories.CreateOpacityMask()); } }
           NProperty _opacityMask;

    public NProperty Opened { get { return _opened ?? (_opened = NPropFactories.CreateOpened()); } }
           NProperty _opened;

    public NProperty Orientation { get { return _orientation ?? (_orientation = NPropFactories.CreateOrientation()); } }
           NProperty _orientation;

    public NProperty OriginX { get { return _originX ?? (_originX = NPropFactories.CreateOriginX()); } }
           NProperty _originX;

    public NProperty OriginY { get { return _originY ?? (_originY = NPropFactories.CreateOriginY()); } }
           NProperty _originY;

    public NProperty OverridesDefaultStyle { get { return _overridesDefaultStyle ?? (_overridesDefaultStyle = NPropFactories.CreateOverridesDefaultStyle()); } }
           NProperty _overridesDefaultStyle;

    public NProperty Padding { get { return _padding ?? (_padding = NPropFactories.CreatePadding()); } }
           NProperty _padding;

    public NProperty PageConnected { get { return _pageConnected ?? (_pageConnected = NPropFactories.CreatePageConnected()); } }
           NProperty _pageConnected;

    public NProperty PageDisconnected { get { return _pageDisconnected ?? (_pageDisconnected = NPropFactories.CreatePageDisconnected()); } }
           NProperty _pageDisconnected;

    public NProperty PageNumber { get { return _pageNumber ?? (_pageNumber = NPropFactories.CreatePageNumber()); } }
           NProperty _pageNumber;

    public NProperty PageViews { get { return _pageViews ?? (_pageViews = NPropFactories.CreatePageViews()); } }
           NProperty _pageViews;

    public NProperty PageViewsChanged { get { return _pageViewsChanged ?? (_pageViewsChanged = NPropFactories.CreatePageViewsChanged()); } }
           NProperty _pageViewsChanged;

    public NProperty PanelZIndex { get { return _panelZIndex ?? (_panelZIndex = NPropFactories.CreatePanelZIndex()); } }
           NProperty _panelZIndex;

    public NProperty PanningDeceleration { get { return _panningDeceleration ?? (_panningDeceleration = NPropFactories.CreatePanningDeceleration()); } }
           NProperty _panningDeceleration;

    public NProperty PanningMode { get { return _panningMode ?? (_panningMode = NPropFactories.CreatePanningMode()); } }
           NProperty _panningMode;

    public NProperty PanningRatio { get { return _panningRatio ?? (_panningRatio = NPropFactories.CreatePanningRatio()); } }
           NProperty _panningRatio;

    public NProperty Password { get { return _password ?? (_password = NPropFactories.CreatePassword()); } }
           NProperty _password;

    public NProperty PasswordChanged { get { return _passwordChanged ?? (_passwordChanged = NPropFactories.CreatePasswordChanged()); } }
           NProperty _passwordChanged;

    public NProperty PasswordChar { get { return _passwordChar ?? (_passwordChar = NPropFactories.CreatePasswordChar()); } }
           NProperty _passwordChar;

    public NProperty PenWidth { get { return _penWidth ?? (_penWidth = NPropFactories.CreatePenWidth()); } }
           NProperty _penWidth;

    public NProperty Placement { get { return _placement ?? (_placement = NPropFactories.CreatePlacement()); } }
           NProperty _placement;

    public NProperty PlacementRectangle { get { return _placementRectangle ?? (_placementRectangle = NPropFactories.CreatePlacementRectangle()); } }
           NProperty _placementRectangle;

    public NProperty PlacementTarget { get { return _placementTarget ?? (_placementTarget = NPropFactories.CreatePlacementTarget()); } }
           NProperty _placementTarget;

    public NProperty Points { get { return _points ?? (_points = NPropFactories.CreatePoints()); } }
           NProperty _points;

    public NProperty PopupAnimation { get { return _popupAnimation ?? (_popupAnimation = NPropFactories.CreatePopupAnimation()); } }
           NProperty _popupAnimation;

    public NProperty Position { get { return _position ?? (_position = NPropFactories.CreatePosition()); } }
           NProperty _position;

    public NProperty PreparingCellForEdit { get { return _preparingCellForEdit ?? (_preparingCellForEdit = NPropFactories.CreatePreparingCellForEdit()); } }
           NProperty _preparingCellForEdit;

    public NProperty PreviewDragEnter { get { return _previewDragEnter ?? (_previewDragEnter = NPropFactories.CreatePreviewDragEnter()); } }
           NProperty _previewDragEnter;

    public NProperty PreviewDragLeave { get { return _previewDragLeave ?? (_previewDragLeave = NPropFactories.CreatePreviewDragLeave()); } }
           NProperty _previewDragLeave;

    public NProperty PreviewDragOver { get { return _previewDragOver ?? (_previewDragOver = NPropFactories.CreatePreviewDragOver()); } }
           NProperty _previewDragOver;

    public NProperty PreviewDrop { get { return _previewDrop ?? (_previewDrop = NPropFactories.CreatePreviewDrop()); } }
           NProperty _previewDrop;

    public NProperty PreviewGiveFeedback { get { return _previewGiveFeedback ?? (_previewGiveFeedback = NPropFactories.CreatePreviewGiveFeedback()); } }
           NProperty _previewGiveFeedback;

    public NProperty PreviewGotKeyboardFocus { get { return _previewGotKeyboardFocus ?? (_previewGotKeyboardFocus = NPropFactories.CreatePreviewGotKeyboardFocus()); } }
           NProperty _previewGotKeyboardFocus;

    public NProperty PreviewKeyDown { get { return _previewKeyDown ?? (_previewKeyDown = NPropFactories.CreatePreviewKeyDown()); } }
           NProperty _previewKeyDown;

    public NProperty PreviewKeyUp { get { return _previewKeyUp ?? (_previewKeyUp = NPropFactories.CreatePreviewKeyUp()); } }
           NProperty _previewKeyUp;

    public NProperty PreviewLostKeyboardFocus { get { return _previewLostKeyboardFocus ?? (_previewLostKeyboardFocus = NPropFactories.CreatePreviewLostKeyboardFocus()); } }
           NProperty _previewLostKeyboardFocus;

    public NProperty PreviewMouseDoubleClick { get { return _previewMouseDoubleClick ?? (_previewMouseDoubleClick = NPropFactories.CreatePreviewMouseDoubleClick()); } }
           NProperty _previewMouseDoubleClick;

    public NProperty PreviewMouseDown { get { return _previewMouseDown ?? (_previewMouseDown = NPropFactories.CreatePreviewMouseDown()); } }
           NProperty _previewMouseDown;

    public NProperty PreviewMouseLeftButtonDown { get { return _previewMouseLeftButtonDown ?? (_previewMouseLeftButtonDown = NPropFactories.CreatePreviewMouseLeftButtonDown()); } }
           NProperty _previewMouseLeftButtonDown;

    public NProperty PreviewMouseLeftButtonUp { get { return _previewMouseLeftButtonUp ?? (_previewMouseLeftButtonUp = NPropFactories.CreatePreviewMouseLeftButtonUp()); } }
           NProperty _previewMouseLeftButtonUp;

    public NProperty PreviewMouseMove { get { return _previewMouseMove ?? (_previewMouseMove = NPropFactories.CreatePreviewMouseMove()); } }
           NProperty _previewMouseMove;

    public NProperty PreviewMouseRightButtonDown { get { return _previewMouseRightButtonDown ?? (_previewMouseRightButtonDown = NPropFactories.CreatePreviewMouseRightButtonDown()); } }
           NProperty _previewMouseRightButtonDown;

    public NProperty PreviewMouseRightButtonUp { get { return _previewMouseRightButtonUp ?? (_previewMouseRightButtonUp = NPropFactories.CreatePreviewMouseRightButtonUp()); } }
           NProperty _previewMouseRightButtonUp;

    public NProperty PreviewMouseUp { get { return _previewMouseUp ?? (_previewMouseUp = NPropFactories.CreatePreviewMouseUp()); } }
           NProperty _previewMouseUp;

    public NProperty PreviewMouseWheel { get { return _previewMouseWheel ?? (_previewMouseWheel = NPropFactories.CreatePreviewMouseWheel()); } }
           NProperty _previewMouseWheel;

    public NProperty PreviewQueryContinueDrag { get { return _previewQueryContinueDrag ?? (_previewQueryContinueDrag = NPropFactories.CreatePreviewQueryContinueDrag()); } }
           NProperty _previewQueryContinueDrag;

    public NProperty PreviewStyle { get { return _previewStyle ?? (_previewStyle = NPropFactories.CreatePreviewStyle()); } }
           NProperty _previewStyle;

    public NProperty PreviewStylusButtonDown { get { return _previewStylusButtonDown ?? (_previewStylusButtonDown = NPropFactories.CreatePreviewStylusButtonDown()); } }
           NProperty _previewStylusButtonDown;

    public NProperty PreviewStylusButtonUp { get { return _previewStylusButtonUp ?? (_previewStylusButtonUp = NPropFactories.CreatePreviewStylusButtonUp()); } }
           NProperty _previewStylusButtonUp;

    public NProperty PreviewStylusDown { get { return _previewStylusDown ?? (_previewStylusDown = NPropFactories.CreatePreviewStylusDown()); } }
           NProperty _previewStylusDown;

    public NProperty PreviewStylusInAirMove { get { return _previewStylusInAirMove ?? (_previewStylusInAirMove = NPropFactories.CreatePreviewStylusInAirMove()); } }
           NProperty _previewStylusInAirMove;

    public NProperty PreviewStylusInRange { get { return _previewStylusInRange ?? (_previewStylusInRange = NPropFactories.CreatePreviewStylusInRange()); } }
           NProperty _previewStylusInRange;

    public NProperty PreviewStylusMove { get { return _previewStylusMove ?? (_previewStylusMove = NPropFactories.CreatePreviewStylusMove()); } }
           NProperty _previewStylusMove;

    public NProperty PreviewStylusOutOfRange { get { return _previewStylusOutOfRange ?? (_previewStylusOutOfRange = NPropFactories.CreatePreviewStylusOutOfRange()); } }
           NProperty _previewStylusOutOfRange;

    public NProperty PreviewStylusSystemGesture { get { return _previewStylusSystemGesture ?? (_previewStylusSystemGesture = NPropFactories.CreatePreviewStylusSystemGesture()); } }
           NProperty _previewStylusSystemGesture;

    public NProperty PreviewStylusUp { get { return _previewStylusUp ?? (_previewStylusUp = NPropFactories.CreatePreviewStylusUp()); } }
           NProperty _previewStylusUp;

    public NProperty PreviewTextInput { get { return _previewTextInput ?? (_previewTextInput = NPropFactories.CreatePreviewTextInput()); } }
           NProperty _previewTextInput;

    public NProperty PreviewTouchDown { get { return _previewTouchDown ?? (_previewTouchDown = NPropFactories.CreatePreviewTouchDown()); } }
           NProperty _previewTouchDown;

    public NProperty PreviewTouchMove { get { return _previewTouchMove ?? (_previewTouchMove = NPropFactories.CreatePreviewTouchMove()); } }
           NProperty _previewTouchMove;

    public NProperty PreviewTouchUp { get { return _previewTouchUp ?? (_previewTouchUp = NPropFactories.CreatePreviewTouchUp()); } }
           NProperty _previewTouchUp;

    public NProperty PrintTicket { get { return _printTicket ?? (_printTicket = NPropFactories.CreatePrintTicket()); } }
           NProperty _printTicket;

    public NProperty QueryContinueDrag { get { return _queryContinueDrag ?? (_queryContinueDrag = NPropFactories.CreateQueryContinueDrag()); } }
           NProperty _queryContinueDrag;

    public NProperty QueryCursor { get { return _queryCursor ?? (_queryCursor = NPropFactories.CreateQueryCursor()); } }
           NProperty _queryCursor;

    public NProperty RadiusX { get { return _radiusX ?? (_radiusX = NPropFactories.CreateRadiusX()); } }
           NProperty _radiusX;

    public NProperty RadiusY { get { return _radiusY ?? (_radiusY = NPropFactories.CreateRadiusY()); } }
           NProperty _radiusY;

    public NProperty RecognizesAccessKey { get { return _recognizesAccessKey ?? (_recognizesAccessKey = NPropFactories.CreateRecognizesAccessKey()); } }
           NProperty _recognizesAccessKey;

    public NProperty RemoveFromJournal { get { return _removeFromJournal ?? (_removeFromJournal = NPropFactories.CreateRemoveFromJournal()); } }
           NProperty _removeFromJournal;

    public NProperty RenderTransform { get { return _renderTransform ?? (_renderTransform = NPropFactories.CreateRenderTransform()); } }
           NProperty _renderTransform;

    public NProperty RenderTransformOrigin { get { return _renderTransformOrigin ?? (_renderTransformOrigin = NPropFactories.CreateRenderTransformOrigin()); } }
           NProperty _renderTransformOrigin;

    public NProperty RequestBringIntoView { get { return _requestBringIntoView ?? (_requestBringIntoView = NPropFactories.CreateRequestBringIntoView()); } }
           NProperty _requestBringIntoView;

    public NProperty RequestNavigate { get { return _requestNavigate ?? (_requestNavigate = NPropFactories.CreateRequestNavigate()); } }
           NProperty _requestNavigate;

    public NProperty ReservedSpace { get { return _reservedSpace ?? (_reservedSpace = NPropFactories.CreateReservedSpace()); } }
           NProperty _reservedSpace;

    public NProperty ResizeBehavior { get { return _resizeBehavior ?? (_resizeBehavior = NPropFactories.CreateResizeBehavior()); } }
           NProperty _resizeBehavior;

    public NProperty ResizeDirection { get { return _resizeDirection ?? (_resizeDirection = NPropFactories.CreateResizeDirection()); } }
           NProperty _resizeDirection;

    public NProperty ResizeEnabled { get { return _resizeEnabled ?? (_resizeEnabled = NPropFactories.CreateResizeEnabled()); } }
           NProperty _resizeEnabled;

    public NProperty ResizeMode { get { return _resizeMode ?? (_resizeMode = NPropFactories.CreateResizeMode()); } }
           NProperty _resizeMode;

    public NProperty Resources { get { return _resources ?? (_resources = NPropFactories.CreateResources()); } }
           NProperty _resources;

    public NProperty RowBackground { get { return _rowBackground ?? (_rowBackground = NPropFactories.CreateRowBackground()); } }
           NProperty _rowBackground;

    public NProperty RowDefinitions { get { return _rowDefinitions ?? (_rowDefinitions = NPropFactories.CreateRowDefinitions()); } }
           NProperty _rowDefinitions;

    public NProperty RowDetailsTemplate { get { return _rowDetailsTemplate ?? (_rowDetailsTemplate = NPropFactories.CreateRowDetailsTemplate()); } }
           NProperty _rowDetailsTemplate;

    public NProperty RowDetailsTemplateSelector { get { return _rowDetailsTemplateSelector ?? (_rowDetailsTemplateSelector = NPropFactories.CreateRowDetailsTemplateSelector()); } }
           NProperty _rowDetailsTemplateSelector;

    public NProperty RowDetailsVisibilityChanged { get { return _rowDetailsVisibilityChanged ?? (_rowDetailsVisibilityChanged = NPropFactories.CreateRowDetailsVisibilityChanged()); } }
           NProperty _rowDetailsVisibilityChanged;

    public NProperty RowDetailsVisibilityMode { get { return _rowDetailsVisibilityMode ?? (_rowDetailsVisibilityMode = NPropFactories.CreateRowDetailsVisibilityMode()); } }
           NProperty _rowDetailsVisibilityMode;

    public NProperty RowEditEnding { get { return _rowEditEnding ?? (_rowEditEnding = NPropFactories.CreateRowEditEnding()); } }
           NProperty _rowEditEnding;

    public NProperty RowGroups { get { return _rowGroups ?? (_rowGroups = NPropFactories.CreateRowGroups()); } }
           NProperty _rowGroups;

    public NProperty RowHeaderStyle { get { return _rowHeaderStyle ?? (_rowHeaderStyle = NPropFactories.CreateRowHeaderStyle()); } }
           NProperty _rowHeaderStyle;

    public NProperty RowHeaderTemplate { get { return _rowHeaderTemplate ?? (_rowHeaderTemplate = NPropFactories.CreateRowHeaderTemplate()); } }
           NProperty _rowHeaderTemplate;

    public NProperty RowHeaderTemplateSelector { get { return _rowHeaderTemplateSelector ?? (_rowHeaderTemplateSelector = NPropFactories.CreateRowHeaderTemplateSelector()); } }
           NProperty _rowHeaderTemplateSelector;

    public NProperty RowHeaderWidth { get { return _rowHeaderWidth ?? (_rowHeaderWidth = NPropFactories.CreateRowHeaderWidth()); } }
           NProperty _rowHeaderWidth;

    public NProperty RowHeight { get { return _rowHeight ?? (_rowHeight = NPropFactories.CreateRowHeight()); } }
           NProperty _rowHeight;

    public NProperty Rows { get { return _rows ?? (_rows = NPropFactories.CreateRows()); } }
           NProperty _rows;

    public NProperty RowSpan { get { return _rowSpan ?? (_rowSpan = NPropFactories.CreateRowSpan()); } }
           NProperty _rowSpan;

    public NProperty RowStyle { get { return _rowStyle ?? (_rowStyle = NPropFactories.CreateRowStyle()); } }
           NProperty _rowStyle;

    public NProperty RowStyleSelector { get { return _rowStyleSelector ?? (_rowStyleSelector = NPropFactories.CreateRowStyleSelector()); } }
           NProperty _rowStyleSelector;

    public NProperty RowValidationErrorTemplate { get { return _rowValidationErrorTemplate ?? (_rowValidationErrorTemplate = NPropFactories.CreateRowValidationErrorTemplate()); } }
           NProperty _rowValidationErrorTemplate;

    public NProperty RowValidationRules { get { return _rowValidationRules ?? (_rowValidationRules = NPropFactories.CreateRowValidationRules()); } }
           NProperty _rowValidationRules;

    public NProperty SandboxExternalContent { get { return _sandboxExternalContent ?? (_sandboxExternalContent = NPropFactories.CreateSandboxExternalContent()); } }
           NProperty _sandboxExternalContent;

    public NProperty ScriptCommand { get { return _scriptCommand ?? (_scriptCommand = NPropFactories.CreateScriptCommand()); } }
           NProperty _scriptCommand;

    public NProperty Scroll { get { return _scroll ?? (_scroll = NPropFactories.CreateScroll()); } }
           NProperty _scroll;

    public NProperty ScrollChanged { get { return _scrollChanged ?? (_scrollChanged = NPropFactories.CreateScrollChanged()); } }
           NProperty _scrollChanged;

    public NProperty ScrollViewerCanContentScroll { get { return _scrollViewerCanContentScroll ?? (_scrollViewerCanContentScroll = NPropFactories.CreateScrollViewerCanContentScroll()); } }
           NProperty _scrollViewerCanContentScroll;

    public NProperty ScrollViewerHorizontalScrollBarVisibility { get { return _scrollViewerHorizontalScrollBarVisibility ?? (_scrollViewerHorizontalScrollBarVisibility = NPropFactories.CreateScrollViewerHorizontalScrollBarVisibility()); } }
           NProperty _scrollViewerHorizontalScrollBarVisibility;

    public NProperty ScrollViewerIsDeferredScrollingEnabled { get { return _scrollViewerIsDeferredScrollingEnabled ?? (_scrollViewerIsDeferredScrollingEnabled = NPropFactories.CreateScrollViewerIsDeferredScrollingEnabled()); } }
           NProperty _scrollViewerIsDeferredScrollingEnabled;

    public NProperty ScrollViewerPanningDeceleration { get { return _scrollViewerPanningDeceleration ?? (_scrollViewerPanningDeceleration = NPropFactories.CreateScrollViewerPanningDeceleration()); } }
           NProperty _scrollViewerPanningDeceleration;

    public NProperty ScrollViewerPanningMode { get { return _scrollViewerPanningMode ?? (_scrollViewerPanningMode = NPropFactories.CreateScrollViewerPanningMode()); } }
           NProperty _scrollViewerPanningMode;

    public NProperty ScrollViewerPanningRatio { get { return _scrollViewerPanningRatio ?? (_scrollViewerPanningRatio = NPropFactories.CreateScrollViewerPanningRatio()); } }
           NProperty _scrollViewerPanningRatio;

    public NProperty ScrollViewerVerticalScrollBarVisibility { get { return _scrollViewerVerticalScrollBarVisibility ?? (_scrollViewerVerticalScrollBarVisibility = NPropFactories.CreateScrollViewerVerticalScrollBarVisibility()); } }
           NProperty _scrollViewerVerticalScrollBarVisibility;

    public NProperty ScrubbingEnabled { get { return _scrubbingEnabled ?? (_scrubbingEnabled = NPropFactories.CreateScrubbingEnabled()); } }
           NProperty _scrubbingEnabled;

    public NProperty Selected { get { return _selected ?? (_selected = NPropFactories.CreateSelected()); } }
           NProperty _selected;

    public NProperty SelectedCellsChanged { get { return _selectedCellsChanged ?? (_selectedCellsChanged = NPropFactories.CreateSelectedCellsChanged()); } }
           NProperty _selectedCellsChanged;

    public NProperty SelectedDate { get { return _selectedDate ?? (_selectedDate = NPropFactories.CreateSelectedDate()); } }
           NProperty _selectedDate;

    public NProperty SelectedDateChanged { get { return _selectedDateChanged ?? (_selectedDateChanged = NPropFactories.CreateSelectedDateChanged()); } }
           NProperty _selectedDateChanged;

    public NProperty SelectedDateFormat { get { return _selectedDateFormat ?? (_selectedDateFormat = NPropFactories.CreateSelectedDateFormat()); } }
           NProperty _selectedDateFormat;

    public NProperty SelectedDates { get { return _selectedDates ?? (_selectedDates = NPropFactories.CreateSelectedDates()); } }
           NProperty _selectedDates;

    public NProperty SelectedDatesChanged { get { return _selectedDatesChanged ?? (_selectedDatesChanged = NPropFactories.CreateSelectedDatesChanged()); } }
           NProperty _selectedDatesChanged;

    public NProperty SelectedIndex { get { return _selectedIndex ?? (_selectedIndex = NPropFactories.CreateSelectedIndex()); } }
           NProperty _selectedIndex;

    public NProperty SelectedItem { get { return _selectedItem ?? (_selectedItem = NPropFactories.CreateSelectedItem()); } }
           NProperty _selectedItem;

    public NProperty SelectedItemChanged { get { return _selectedItemChanged ?? (_selectedItemChanged = NPropFactories.CreateSelectedItemChanged()); } }
           NProperty _selectedItemChanged;

    public NProperty SelectedItems { get { return _selectedItems ?? (_selectedItems = NPropFactories.CreateSelectedItems()); } }
           NProperty _selectedItems;

    public NProperty SelectedText { get { return _selectedText ?? (_selectedText = NPropFactories.CreateSelectedText()); } }
           NProperty _selectedText;

    public NProperty SelectedValue { get { return _selectedValue ?? (_selectedValue = NPropFactories.CreateSelectedValue()); } }
           NProperty _selectedValue;

    public NProperty SelectedValuePath { get { return _selectedValuePath ?? (_selectedValuePath = NPropFactories.CreateSelectedValuePath()); } }
           NProperty _selectedValuePath;

    public NProperty SelectionBrush { get { return _selectionBrush ?? (_selectionBrush = NPropFactories.CreateSelectionBrush()); } }
           NProperty _selectionBrush;

    public NProperty SelectionChanged { get { return _selectionChanged ?? (_selectionChanged = NPropFactories.CreateSelectionChanged()); } }
           NProperty _selectionChanged;

    public NProperty SelectionChanging { get { return _selectionChanging ?? (_selectionChanging = NPropFactories.CreateSelectionChanging()); } }
           NProperty _selectionChanging;

    public NProperty SelectionEnd { get { return _selectionEnd ?? (_selectionEnd = NPropFactories.CreateSelectionEnd()); } }
           NProperty _selectionEnd;

    public NProperty SelectionLength { get { return _selectionLength ?? (_selectionLength = NPropFactories.CreateSelectionLength()); } }
           NProperty _selectionLength;

    public NProperty SelectionMode { get { return _selectionMode ?? (_selectionMode = NPropFactories.CreateSelectionMode()); } }
           NProperty _selectionMode;

    public NProperty SelectionModeChanged { get { return _selectionModeChanged ?? (_selectionModeChanged = NPropFactories.CreateSelectionModeChanged()); } }
           NProperty _selectionModeChanged;

    public NProperty SelectionMoved { get { return _selectionMoved ?? (_selectionMoved = NPropFactories.CreateSelectionMoved()); } }
           NProperty _selectionMoved;

    public NProperty SelectionMoving { get { return _selectionMoving ?? (_selectionMoving = NPropFactories.CreateSelectionMoving()); } }
           NProperty _selectionMoving;

    public NProperty SelectionOpacity { get { return _selectionOpacity ?? (_selectionOpacity = NPropFactories.CreateSelectionOpacity()); } }
           NProperty _selectionOpacity;

    public NProperty SelectionResized { get { return _selectionResized ?? (_selectionResized = NPropFactories.CreateSelectionResized()); } }
           NProperty _selectionResized;

    public NProperty SelectionResizing { get { return _selectionResizing ?? (_selectionResizing = NPropFactories.CreateSelectionResizing()); } }
           NProperty _selectionResizing;

    public NProperty SelectionStart { get { return _selectionStart ?? (_selectionStart = NPropFactories.CreateSelectionStart()); } }
           NProperty _selectionStart;

    public NProperty SelectionUnit { get { return _selectionUnit ?? (_selectionUnit = NPropFactories.CreateSelectionUnit()); } }
           NProperty _selectionUnit;

    public NProperty SelectiveScrollingGridSelectiveScrollingOrientation { get { return _selectiveScrollingGridSelectiveScrollingOrientation ?? (_selectiveScrollingGridSelectiveScrollingOrientation = NPropFactories.CreateSelectiveScrollingGridSelectiveScrollingOrientation()); } }
           NProperty _selectiveScrollingGridSelectiveScrollingOrientation;

    public NProperty SelectorIsSelected { get { return _selectorIsSelected ?? (_selectorIsSelected = NPropFactories.CreateSelectorIsSelected()); } }
           NProperty _selectorIsSelected;

    public NProperty SeparatorBrush { get { return _separatorBrush ?? (_separatorBrush = NPropFactories.CreateSeparatorBrush()); } }
           NProperty _separatorBrush;

    public NProperty SeparatorVisibility { get { return _separatorVisibility ?? (_separatorVisibility = NPropFactories.CreateSeparatorVisibility()); } }
           NProperty _separatorVisibility;

    public NProperty ShouldPreserveUserEnteredPrefix { get { return _shouldPreserveUserEnteredPrefix ?? (_shouldPreserveUserEnteredPrefix = NPropFactories.CreateShouldPreserveUserEnteredPrefix()); } }
           NProperty _shouldPreserveUserEnteredPrefix;

    public NProperty ShowActivated { get { return _showActivated ?? (_showActivated = NPropFactories.CreateShowActivated()); } }
           NProperty _showActivated;

    public NProperty ShowGridLines { get { return _showGridLines ?? (_showGridLines = NPropFactories.CreateShowGridLines()); } }
           NProperty _showGridLines;

    public NProperty ShowInTaskbar { get { return _showInTaskbar ?? (_showInTaskbar = NPropFactories.CreateShowInTaskbar()); } }
           NProperty _showInTaskbar;

    public NProperty ShowPageBorders { get { return _showPageBorders ?? (_showPageBorders = NPropFactories.CreateShowPageBorders()); } }
           NProperty _showPageBorders;

    public NProperty ShowsNavigationUI { get { return _showsNavigationUI ?? (_showsNavigationUI = NPropFactories.CreateShowsNavigationUI()); } }
           NProperty _showsNavigationUI;

    public NProperty ShowsPreview { get { return _showsPreview ?? (_showsPreview = NPropFactories.CreateShowsPreview()); } }
           NProperty _showsPreview;

    public NProperty SiblingBlocks { get { return _siblingBlocks ?? (_siblingBlocks = NPropFactories.CreateSiblingBlocks()); } }
           NProperty _siblingBlocks;

    public NProperty SiblingInlines { get { return _siblingInlines ?? (_siblingInlines = NPropFactories.CreateSiblingInlines()); } }
           NProperty _siblingInlines;

    public NProperty SiblingListItems { get { return _siblingListItems ?? (_siblingListItems = NPropFactories.CreateSiblingListItems()); } }
           NProperty _siblingListItems;

    public NProperty SizeChanged { get { return _sizeChanged ?? (_sizeChanged = NPropFactories.CreateSizeChanged()); } }
           NProperty _sizeChanged;

    public NProperty SizeToContent { get { return _sizeToContent ?? (_sizeToContent = NPropFactories.CreateSizeToContent()); } }
           NProperty _sizeToContent;

    public NProperty SlashedZero { get { return _slashedZero ?? (_slashedZero = NPropFactories.CreateSlashedZero()); } }
           NProperty _slashedZero;

    public NProperty SmallChange { get { return _smallChange ?? (_smallChange = NPropFactories.CreateSmallChange()); } }
           NProperty _smallChange;

    public NProperty SnapsToDevicePixels { get { return _snapsToDevicePixels ?? (_snapsToDevicePixels = NPropFactories.CreateSnapsToDevicePixels()); } }
           NProperty _snapsToDevicePixels;

    public NProperty Sorting { get { return _sorting ?? (_sorting = NPropFactories.CreateSorting()); } }
           NProperty _sorting;

    public NProperty Source { get { return _source ?? (_source = NPropFactories.CreateSource()); } }
           NProperty _source;

    public NProperty SourceInitialized { get { return _sourceInitialized ?? (_sourceInitialized = NPropFactories.CreateSourceInitialized()); } }
           NProperty _sourceInitialized;

    public NProperty SourceUpdated { get { return _sourceUpdated ?? (_sourceUpdated = NPropFactories.CreateSourceUpdated()); } }
           NProperty _sourceUpdated;

    public NProperty StandardLigatures { get { return _standardLigatures ?? (_standardLigatures = NPropFactories.CreateStandardLigatures()); } }
           NProperty _standardLigatures;

    public NProperty StandardSwashes { get { return _standardSwashes ?? (_standardSwashes = NPropFactories.CreateStandardSwashes()); } }
           NProperty _standardSwashes;

    public NProperty StartIndex { get { return _startIndex ?? (_startIndex = NPropFactories.CreateStartIndex()); } }
           NProperty _startIndex;

    public NProperty StateChanged { get { return _stateChanged ?? (_stateChanged = NPropFactories.CreateStateChanged()); } }
           NProperty _stateChanged;

    public NProperty StaysOpen { get { return _staysOpen ?? (_staysOpen = NPropFactories.CreateStaysOpen()); } }
           NProperty _staysOpen;

    public NProperty StaysOpenOnClick { get { return _staysOpenOnClick ?? (_staysOpenOnClick = NPropFactories.CreateStaysOpenOnClick()); } }
           NProperty _staysOpenOnClick;

    public NProperty StaysOpenOnEdit { get { return _staysOpenOnEdit ?? (_staysOpenOnEdit = NPropFactories.CreateStaysOpenOnEdit()); } }
           NProperty _staysOpenOnEdit;

    public NProperty Stretch { get { return _stretch ?? (_stretch = NPropFactories.CreateStretch()); } }
           NProperty _stretch;

    public NProperty StretchDirection { get { return _stretchDirection ?? (_stretchDirection = NPropFactories.CreateStretchDirection()); } }
           NProperty _stretchDirection;

    public NProperty Stroke { get { return _stroke ?? (_stroke = NPropFactories.CreateStroke()); } }
           NProperty _stroke;

    public NProperty StrokeCollected { get { return _strokeCollected ?? (_strokeCollected = NPropFactories.CreateStrokeCollected()); } }
           NProperty _strokeCollected;

    public NProperty StrokeDashArray { get { return _strokeDashArray ?? (_strokeDashArray = NPropFactories.CreateStrokeDashArray()); } }
           NProperty _strokeDashArray;

    public NProperty StrokeDashCap { get { return _strokeDashCap ?? (_strokeDashCap = NPropFactories.CreateStrokeDashCap()); } }
           NProperty _strokeDashCap;

    public NProperty StrokeDashOffset { get { return _strokeDashOffset ?? (_strokeDashOffset = NPropFactories.CreateStrokeDashOffset()); } }
           NProperty _strokeDashOffset;

    public NProperty StrokeEndLineCap { get { return _strokeEndLineCap ?? (_strokeEndLineCap = NPropFactories.CreateStrokeEndLineCap()); } }
           NProperty _strokeEndLineCap;

    public NProperty StrokeErased { get { return _strokeErased ?? (_strokeErased = NPropFactories.CreateStrokeErased()); } }
           NProperty _strokeErased;

    public NProperty StrokeErasing { get { return _strokeErasing ?? (_strokeErasing = NPropFactories.CreateStrokeErasing()); } }
           NProperty _strokeErasing;

    public NProperty StrokeLineJoin { get { return _strokeLineJoin ?? (_strokeLineJoin = NPropFactories.CreateStrokeLineJoin()); } }
           NProperty _strokeLineJoin;

    public NProperty StrokeMiterLimit { get { return _strokeMiterLimit ?? (_strokeMiterLimit = NPropFactories.CreateStrokeMiterLimit()); } }
           NProperty _strokeMiterLimit;

    public NProperty Strokes { get { return _strokes ?? (_strokes = NPropFactories.CreateStrokes()); } }
           NProperty _strokes;

    public NProperty StrokesReplaced { get { return _strokesReplaced ?? (_strokesReplaced = NPropFactories.CreateStrokesReplaced()); } }
           NProperty _strokesReplaced;

    public NProperty StrokeStartLineCap { get { return _strokeStartLineCap ?? (_strokeStartLineCap = NPropFactories.CreateStrokeStartLineCap()); } }
           NProperty _strokeStartLineCap;

    public NProperty StrokeThickness { get { return _strokeThickness ?? (_strokeThickness = NPropFactories.CreateStrokeThickness()); } }
           NProperty _strokeThickness;

    public NProperty Style { get { return _style ?? (_style = NPropFactories.CreateStyle()); } }
           NProperty _style;

    public NProperty StyleSimulations { get { return _styleSimulations ?? (_styleSimulations = NPropFactories.CreateStyleSimulations()); } }
           NProperty _styleSimulations;

    public NProperty StylisticAlternates { get { return _stylisticAlternates ?? (_stylisticAlternates = NPropFactories.CreateStylisticAlternates()); } }
           NProperty _stylisticAlternates;

    public NProperty StylisticSet1 { get { return _stylisticSet1 ?? (_stylisticSet1 = NPropFactories.CreateStylisticSet1()); } }
           NProperty _stylisticSet1;

    public NProperty StylisticSet10 { get { return _stylisticSet10 ?? (_stylisticSet10 = NPropFactories.CreateStylisticSet10()); } }
           NProperty _stylisticSet10;

    public NProperty StylisticSet11 { get { return _stylisticSet11 ?? (_stylisticSet11 = NPropFactories.CreateStylisticSet11()); } }
           NProperty _stylisticSet11;

    public NProperty StylisticSet12 { get { return _stylisticSet12 ?? (_stylisticSet12 = NPropFactories.CreateStylisticSet12()); } }
           NProperty _stylisticSet12;

    public NProperty StylisticSet13 { get { return _stylisticSet13 ?? (_stylisticSet13 = NPropFactories.CreateStylisticSet13()); } }
           NProperty _stylisticSet13;

    public NProperty StylisticSet14 { get { return _stylisticSet14 ?? (_stylisticSet14 = NPropFactories.CreateStylisticSet14()); } }
           NProperty _stylisticSet14;

    public NProperty StylisticSet15 { get { return _stylisticSet15 ?? (_stylisticSet15 = NPropFactories.CreateStylisticSet15()); } }
           NProperty _stylisticSet15;

    public NProperty StylisticSet16 { get { return _stylisticSet16 ?? (_stylisticSet16 = NPropFactories.CreateStylisticSet16()); } }
           NProperty _stylisticSet16;

    public NProperty StylisticSet17 { get { return _stylisticSet17 ?? (_stylisticSet17 = NPropFactories.CreateStylisticSet17()); } }
           NProperty _stylisticSet17;

    public NProperty StylisticSet18 { get { return _stylisticSet18 ?? (_stylisticSet18 = NPropFactories.CreateStylisticSet18()); } }
           NProperty _stylisticSet18;

    public NProperty StylisticSet19 { get { return _stylisticSet19 ?? (_stylisticSet19 = NPropFactories.CreateStylisticSet19()); } }
           NProperty _stylisticSet19;

    public NProperty StylisticSet2 { get { return _stylisticSet2 ?? (_stylisticSet2 = NPropFactories.CreateStylisticSet2()); } }
           NProperty _stylisticSet2;

    public NProperty StylisticSet20 { get { return _stylisticSet20 ?? (_stylisticSet20 = NPropFactories.CreateStylisticSet20()); } }
           NProperty _stylisticSet20;

    public NProperty StylisticSet3 { get { return _stylisticSet3 ?? (_stylisticSet3 = NPropFactories.CreateStylisticSet3()); } }
           NProperty _stylisticSet3;

    public NProperty StylisticSet4 { get { return _stylisticSet4 ?? (_stylisticSet4 = NPropFactories.CreateStylisticSet4()); } }
           NProperty _stylisticSet4;

    public NProperty StylisticSet5 { get { return _stylisticSet5 ?? (_stylisticSet5 = NPropFactories.CreateStylisticSet5()); } }
           NProperty _stylisticSet5;

    public NProperty StylisticSet6 { get { return _stylisticSet6 ?? (_stylisticSet6 = NPropFactories.CreateStylisticSet6()); } }
           NProperty _stylisticSet6;

    public NProperty StylisticSet7 { get { return _stylisticSet7 ?? (_stylisticSet7 = NPropFactories.CreateStylisticSet7()); } }
           NProperty _stylisticSet7;

    public NProperty StylisticSet8 { get { return _stylisticSet8 ?? (_stylisticSet8 = NPropFactories.CreateStylisticSet8()); } }
           NProperty _stylisticSet8;

    public NProperty StylisticSet9 { get { return _stylisticSet9 ?? (_stylisticSet9 = NPropFactories.CreateStylisticSet9()); } }
           NProperty _stylisticSet9;

    public NProperty StylusButtonDown { get { return _stylusButtonDown ?? (_stylusButtonDown = NPropFactories.CreateStylusButtonDown()); } }
           NProperty _stylusButtonDown;

    public NProperty StylusButtonUp { get { return _stylusButtonUp ?? (_stylusButtonUp = NPropFactories.CreateStylusButtonUp()); } }
           NProperty _stylusButtonUp;

    public NProperty StylusDown { get { return _stylusDown ?? (_stylusDown = NPropFactories.CreateStylusDown()); } }
           NProperty _stylusDown;

    public NProperty StylusEnter { get { return _stylusEnter ?? (_stylusEnter = NPropFactories.CreateStylusEnter()); } }
           NProperty _stylusEnter;

    public NProperty StylusInAirMove { get { return _stylusInAirMove ?? (_stylusInAirMove = NPropFactories.CreateStylusInAirMove()); } }
           NProperty _stylusInAirMove;

    public NProperty StylusInRange { get { return _stylusInRange ?? (_stylusInRange = NPropFactories.CreateStylusInRange()); } }
           NProperty _stylusInRange;

    public NProperty StylusLeave { get { return _stylusLeave ?? (_stylusLeave = NPropFactories.CreateStylusLeave()); } }
           NProperty _stylusLeave;

    public NProperty StylusMove { get { return _stylusMove ?? (_stylusMove = NPropFactories.CreateStylusMove()); } }
           NProperty _stylusMove;

    public NProperty StylusOutOfRange { get { return _stylusOutOfRange ?? (_stylusOutOfRange = NPropFactories.CreateStylusOutOfRange()); } }
           NProperty _stylusOutOfRange;

    public NProperty StylusSystemGesture { get { return _stylusSystemGesture ?? (_stylusSystemGesture = NPropFactories.CreateStylusSystemGesture()); } }
           NProperty _stylusSystemGesture;

    public NProperty StylusUp { get { return _stylusUp ?? (_stylusUp = NPropFactories.CreateStylusUp()); } }
           NProperty _stylusUp;

    public NProperty SubmenuClosed { get { return _submenuClosed ?? (_submenuClosed = NPropFactories.CreateSubmenuClosed()); } }
           NProperty _submenuClosed;

    public NProperty SubmenuOpened { get { return _submenuOpened ?? (_submenuOpened = NPropFactories.CreateSubmenuOpened()); } }
           NProperty _submenuOpened;

    public NProperty TabIndex { get { return _tabIndex ?? (_tabIndex = NPropFactories.CreateTabIndex()); } }
           NProperty _tabIndex;

    public NProperty TabStripPlacement { get { return _tabStripPlacement ?? (_tabStripPlacement = NPropFactories.CreateTabStripPlacement()); } }
           NProperty _tabStripPlacement;

    public NProperty Tag { get { return _tag ?? (_tag = NPropFactories.CreateTag()); } }
           NProperty _tag;

    public NProperty Target { get { return _target ?? (_target = NPropFactories.CreateTarget()); } }
           NProperty _target;

    public NProperty TargetName { get { return _targetName ?? (_targetName = NPropFactories.CreateTargetName()); } }
           NProperty _targetName;

    public NProperty TargetUpdated { get { return _targetUpdated ?? (_targetUpdated = NPropFactories.CreateTargetUpdated()); } }
           NProperty _targetUpdated;

    public NProperty TaskbarItemInfo { get { return _taskbarItemInfo ?? (_taskbarItemInfo = NPropFactories.CreateTaskbarItemInfo()); } }
           NProperty _taskbarItemInfo;

    public NProperty Template { get { return _template ?? (_template = NPropFactories.CreateTemplate()); } }
           NProperty _template;

    public NProperty Text { get { return _text ?? (_text = NPropFactories.CreateText()); } }
           NProperty _text;

    public NProperty TextAlignment { get { return _textAlignment ?? (_textAlignment = NPropFactories.CreateTextAlignment()); } }
           NProperty _textAlignment;

    public NProperty TextBlockBaselineOffset { get { return _textBlockBaselineOffset ?? (_textBlockBaselineOffset = NPropFactories.CreateTextBlockBaselineOffset()); } }
           NProperty _textBlockBaselineOffset;

    public NProperty TextBlockFontFamily { get { return _textBlockFontFamily ?? (_textBlockFontFamily = NPropFactories.CreateTextBlockFontFamily()); } }
           NProperty _textBlockFontFamily;

    public NProperty TextBlockFontSize { get { return _textBlockFontSize ?? (_textBlockFontSize = NPropFactories.CreateTextBlockFontSize()); } }
           NProperty _textBlockFontSize;

    public NProperty TextBlockFontStretch { get { return _textBlockFontStretch ?? (_textBlockFontStretch = NPropFactories.CreateTextBlockFontStretch()); } }
           NProperty _textBlockFontStretch;

    public NProperty TextBlockFontStyle { get { return _textBlockFontStyle ?? (_textBlockFontStyle = NPropFactories.CreateTextBlockFontStyle()); } }
           NProperty _textBlockFontStyle;

    public NProperty TextBlockFontWeight { get { return _textBlockFontWeight ?? (_textBlockFontWeight = NPropFactories.CreateTextBlockFontWeight()); } }
           NProperty _textBlockFontWeight;

    public NProperty TextBlockForeground { get { return _textBlockForeground ?? (_textBlockForeground = NPropFactories.CreateTextBlockForeground()); } }
           NProperty _textBlockForeground;

    public NProperty TextBlockLineHeight { get { return _textBlockLineHeight ?? (_textBlockLineHeight = NPropFactories.CreateTextBlockLineHeight()); } }
           NProperty _textBlockLineHeight;

    public NProperty TextBlockLineStackingStrategy { get { return _textBlockLineStackingStrategy ?? (_textBlockLineStackingStrategy = NPropFactories.CreateTextBlockLineStackingStrategy()); } }
           NProperty _textBlockLineStackingStrategy;

    public NProperty TextBlockTextAlignment { get { return _textBlockTextAlignment ?? (_textBlockTextAlignment = NPropFactories.CreateTextBlockTextAlignment()); } }
           NProperty _textBlockTextAlignment;

    public NProperty TextChanged { get { return _textChanged ?? (_textChanged = NPropFactories.CreateTextChanged()); } }
           NProperty _textChanged;

    public NProperty TextDecorations { get { return _textDecorations ?? (_textDecorations = NPropFactories.CreateTextDecorations()); } }
           NProperty _textDecorations;

    public NProperty TextEffects { get { return _textEffects ?? (_textEffects = NPropFactories.CreateTextEffects()); } }
           NProperty _textEffects;

    public NProperty TextElementFontFamily { get { return _textElementFontFamily ?? (_textElementFontFamily = NPropFactories.CreateTextElementFontFamily()); } }
           NProperty _textElementFontFamily;

    public NProperty TextElementFontSize { get { return _textElementFontSize ?? (_textElementFontSize = NPropFactories.CreateTextElementFontSize()); } }
           NProperty _textElementFontSize;

    public NProperty TextElementFontStretch { get { return _textElementFontStretch ?? (_textElementFontStretch = NPropFactories.CreateTextElementFontStretch()); } }
           NProperty _textElementFontStretch;

    public NProperty TextElementFontStyle { get { return _textElementFontStyle ?? (_textElementFontStyle = NPropFactories.CreateTextElementFontStyle()); } }
           NProperty _textElementFontStyle;

    public NProperty TextElementFontWeight { get { return _textElementFontWeight ?? (_textElementFontWeight = NPropFactories.CreateTextElementFontWeight()); } }
           NProperty _textElementFontWeight;

    public NProperty TextElementForeground { get { return _textElementForeground ?? (_textElementForeground = NPropFactories.CreateTextElementForeground()); } }
           NProperty _textElementForeground;

    public NProperty TextIndent { get { return _textIndent ?? (_textIndent = NPropFactories.CreateTextIndent()); } }
           NProperty _textIndent;

    public NProperty TextInput { get { return _textInput ?? (_textInput = NPropFactories.CreateTextInput()); } }
           NProperty _textInput;

    public NProperty TextOptionsTextFormattingMode { get { return _textOptionsTextFormattingMode ?? (_textOptionsTextFormattingMode = NPropFactories.CreateTextOptionsTextFormattingMode()); } }
           NProperty _textOptionsTextFormattingMode;

    public NProperty TextOptionsTextHintingMode { get { return _textOptionsTextHintingMode ?? (_textOptionsTextHintingMode = NPropFactories.CreateTextOptionsTextHintingMode()); } }
           NProperty _textOptionsTextHintingMode;

    public NProperty TextOptionsTextRenderingMode { get { return _textOptionsTextRenderingMode ?? (_textOptionsTextRenderingMode = NPropFactories.CreateTextOptionsTextRenderingMode()); } }
           NProperty _textOptionsTextRenderingMode;

    public NProperty TextTrimming { get { return _textTrimming ?? (_textTrimming = NPropFactories.CreateTextTrimming()); } }
           NProperty _textTrimming;

    public NProperty TextWrapping { get { return _textWrapping ?? (_textWrapping = NPropFactories.CreateTextWrapping()); } }
           NProperty _textWrapping;

    public NProperty TickFrequency { get { return _tickFrequency ?? (_tickFrequency = NPropFactories.CreateTickFrequency()); } }
           NProperty _tickFrequency;

    public NProperty TickPlacement { get { return _tickPlacement ?? (_tickPlacement = NPropFactories.CreateTickPlacement()); } }
           NProperty _tickPlacement;

    public NProperty Ticks { get { return _ticks ?? (_ticks = NPropFactories.CreateTicks()); } }
           NProperty _ticks;

    public NProperty Title { get { return _title ?? (_title = NPropFactories.CreateTitle()); } }
           NProperty _title;

    public NProperty ToolBarOverflowMode { get { return _toolBarOverflowMode ?? (_toolBarOverflowMode = NPropFactories.CreateToolBarOverflowMode()); } }
           NProperty _toolBarOverflowMode;

    public NProperty ToolBars { get { return _toolBars ?? (_toolBars = NPropFactories.CreateToolBars()); } }
           NProperty _toolBars;

    public NProperty ToolBarTrayIsLocked { get { return _toolBarTrayIsLocked ?? (_toolBarTrayIsLocked = NPropFactories.CreateToolBarTrayIsLocked()); } }
           NProperty _toolBarTrayIsLocked;

    public NProperty ToolTip { get { return _toolTip ?? (_toolTip = NPropFactories.CreateToolTip()); } }
           NProperty _toolTip;

    public NProperty ToolTipClosing { get { return _toolTipClosing ?? (_toolTipClosing = NPropFactories.CreateToolTipClosing()); } }
           NProperty _toolTipClosing;

    public NProperty ToolTipOpening { get { return _toolTipOpening ?? (_toolTipOpening = NPropFactories.CreateToolTipOpening()); } }
           NProperty _toolTipOpening;

    public NProperty ToolTipServiceBetweenShowDelay { get { return _toolTipServiceBetweenShowDelay ?? (_toolTipServiceBetweenShowDelay = NPropFactories.CreateToolTipServiceBetweenShowDelay()); } }
           NProperty _toolTipServiceBetweenShowDelay;

    public NProperty ToolTipServiceHasDropShadow { get { return _toolTipServiceHasDropShadow ?? (_toolTipServiceHasDropShadow = NPropFactories.CreateToolTipServiceHasDropShadow()); } }
           NProperty _toolTipServiceHasDropShadow;

    public NProperty ToolTipServiceHorizontalOffset { get { return _toolTipServiceHorizontalOffset ?? (_toolTipServiceHorizontalOffset = NPropFactories.CreateToolTipServiceHorizontalOffset()); } }
           NProperty _toolTipServiceHorizontalOffset;

    public NProperty ToolTipServiceInitialShowDelay { get { return _toolTipServiceInitialShowDelay ?? (_toolTipServiceInitialShowDelay = NPropFactories.CreateToolTipServiceInitialShowDelay()); } }
           NProperty _toolTipServiceInitialShowDelay;

    public NProperty ToolTipServiceIsEnabled { get { return _toolTipServiceIsEnabled ?? (_toolTipServiceIsEnabled = NPropFactories.CreateToolTipServiceIsEnabled()); } }
           NProperty _toolTipServiceIsEnabled;

    public NProperty ToolTipServicePlacement { get { return _toolTipServicePlacement ?? (_toolTipServicePlacement = NPropFactories.CreateToolTipServicePlacement()); } }
           NProperty _toolTipServicePlacement;

    public NProperty ToolTipServicePlacementRectangle { get { return _toolTipServicePlacementRectangle ?? (_toolTipServicePlacementRectangle = NPropFactories.CreateToolTipServicePlacementRectangle()); } }
           NProperty _toolTipServicePlacementRectangle;

    public NProperty ToolTipServicePlacementTarget { get { return _toolTipServicePlacementTarget ?? (_toolTipServicePlacementTarget = NPropFactories.CreateToolTipServicePlacementTarget()); } }
           NProperty _toolTipServicePlacementTarget;

    public NProperty ToolTipServiceShowDuration { get { return _toolTipServiceShowDuration ?? (_toolTipServiceShowDuration = NPropFactories.CreateToolTipServiceShowDuration()); } }
           NProperty _toolTipServiceShowDuration;

    public NProperty ToolTipServiceShowOnDisabled { get { return _toolTipServiceShowOnDisabled ?? (_toolTipServiceShowOnDisabled = NPropFactories.CreateToolTipServiceShowOnDisabled()); } }
           NProperty _toolTipServiceShowOnDisabled;

    public NProperty ToolTipServiceToolTip { get { return _toolTipServiceToolTip ?? (_toolTipServiceToolTip = NPropFactories.CreateToolTipServiceToolTip()); } }
           NProperty _toolTipServiceToolTip;

    public NProperty ToolTipServiceVerticalOffset { get { return _toolTipServiceVerticalOffset ?? (_toolTipServiceVerticalOffset = NPropFactories.CreateToolTipServiceVerticalOffset()); } }
           NProperty _toolTipServiceVerticalOffset;

    public NProperty Top { get { return _top ?? (_top = NPropFactories.CreateTop()); } }
           NProperty _top;

    public NProperty Topmost { get { return _topmost ?? (_topmost = NPropFactories.CreateTopmost()); } }
           NProperty _topmost;

    public NProperty TouchDown { get { return _touchDown ?? (_touchDown = NPropFactories.CreateTouchDown()); } }
           NProperty _touchDown;

    public NProperty TouchEnter { get { return _touchEnter ?? (_touchEnter = NPropFactories.CreateTouchEnter()); } }
           NProperty _touchEnter;

    public NProperty TouchLeave { get { return _touchLeave ?? (_touchLeave = NPropFactories.CreateTouchLeave()); } }
           NProperty _touchLeave;

    public NProperty TouchMove { get { return _touchMove ?? (_touchMove = NPropFactories.CreateTouchMove()); } }
           NProperty _touchMove;

    public NProperty TouchUp { get { return _touchUp ?? (_touchUp = NPropFactories.CreateTouchUp()); } }
           NProperty _touchUp;

    public NProperty Triggers { get { return _triggers ?? (_triggers = NPropFactories.CreateTriggers()); } }
           NProperty _triggers;

    public NProperty TypographyAnnotationAlternates { get { return _typographyAnnotationAlternates ?? (_typographyAnnotationAlternates = NPropFactories.CreateTypographyAnnotationAlternates()); } }
           NProperty _typographyAnnotationAlternates;

    public NProperty TypographyCapitals { get { return _typographyCapitals ?? (_typographyCapitals = NPropFactories.CreateTypographyCapitals()); } }
           NProperty _typographyCapitals;

    public NProperty TypographyCapitalSpacing { get { return _typographyCapitalSpacing ?? (_typographyCapitalSpacing = NPropFactories.CreateTypographyCapitalSpacing()); } }
           NProperty _typographyCapitalSpacing;

    public NProperty TypographyCaseSensitiveForms { get { return _typographyCaseSensitiveForms ?? (_typographyCaseSensitiveForms = NPropFactories.CreateTypographyCaseSensitiveForms()); } }
           NProperty _typographyCaseSensitiveForms;

    public NProperty TypographyContextualAlternates { get { return _typographyContextualAlternates ?? (_typographyContextualAlternates = NPropFactories.CreateTypographyContextualAlternates()); } }
           NProperty _typographyContextualAlternates;

    public NProperty TypographyContextualLigatures { get { return _typographyContextualLigatures ?? (_typographyContextualLigatures = NPropFactories.CreateTypographyContextualLigatures()); } }
           NProperty _typographyContextualLigatures;

    public NProperty TypographyContextualSwashes { get { return _typographyContextualSwashes ?? (_typographyContextualSwashes = NPropFactories.CreateTypographyContextualSwashes()); } }
           NProperty _typographyContextualSwashes;

    public NProperty TypographyDiscretionaryLigatures { get { return _typographyDiscretionaryLigatures ?? (_typographyDiscretionaryLigatures = NPropFactories.CreateTypographyDiscretionaryLigatures()); } }
           NProperty _typographyDiscretionaryLigatures;

    public NProperty TypographyEastAsianExpertForms { get { return _typographyEastAsianExpertForms ?? (_typographyEastAsianExpertForms = NPropFactories.CreateTypographyEastAsianExpertForms()); } }
           NProperty _typographyEastAsianExpertForms;

    public NProperty TypographyEastAsianLanguage { get { return _typographyEastAsianLanguage ?? (_typographyEastAsianLanguage = NPropFactories.CreateTypographyEastAsianLanguage()); } }
           NProperty _typographyEastAsianLanguage;

    public NProperty TypographyEastAsianWidths { get { return _typographyEastAsianWidths ?? (_typographyEastAsianWidths = NPropFactories.CreateTypographyEastAsianWidths()); } }
           NProperty _typographyEastAsianWidths;

    public NProperty TypographyFraction { get { return _typographyFraction ?? (_typographyFraction = NPropFactories.CreateTypographyFraction()); } }
           NProperty _typographyFraction;

    public NProperty TypographyHistoricalForms { get { return _typographyHistoricalForms ?? (_typographyHistoricalForms = NPropFactories.CreateTypographyHistoricalForms()); } }
           NProperty _typographyHistoricalForms;

    public NProperty TypographyHistoricalLigatures { get { return _typographyHistoricalLigatures ?? (_typographyHistoricalLigatures = NPropFactories.CreateTypographyHistoricalLigatures()); } }
           NProperty _typographyHistoricalLigatures;

    public NProperty TypographyKerning { get { return _typographyKerning ?? (_typographyKerning = NPropFactories.CreateTypographyKerning()); } }
           NProperty _typographyKerning;

    public NProperty TypographyMathematicalGreek { get { return _typographyMathematicalGreek ?? (_typographyMathematicalGreek = NPropFactories.CreateTypographyMathematicalGreek()); } }
           NProperty _typographyMathematicalGreek;

    public NProperty TypographyNumeralAlignment { get { return _typographyNumeralAlignment ?? (_typographyNumeralAlignment = NPropFactories.CreateTypographyNumeralAlignment()); } }
           NProperty _typographyNumeralAlignment;

    public NProperty TypographyNumeralStyle { get { return _typographyNumeralStyle ?? (_typographyNumeralStyle = NPropFactories.CreateTypographyNumeralStyle()); } }
           NProperty _typographyNumeralStyle;

    public NProperty TypographySlashedZero { get { return _typographySlashedZero ?? (_typographySlashedZero = NPropFactories.CreateTypographySlashedZero()); } }
           NProperty _typographySlashedZero;

    public NProperty TypographyStandardLigatures { get { return _typographyStandardLigatures ?? (_typographyStandardLigatures = NPropFactories.CreateTypographyStandardLigatures()); } }
           NProperty _typographyStandardLigatures;

    public NProperty TypographyStandardSwashes { get { return _typographyStandardSwashes ?? (_typographyStandardSwashes = NPropFactories.CreateTypographyStandardSwashes()); } }
           NProperty _typographyStandardSwashes;

    public NProperty TypographyStylisticAlternates { get { return _typographyStylisticAlternates ?? (_typographyStylisticAlternates = NPropFactories.CreateTypographyStylisticAlternates()); } }
           NProperty _typographyStylisticAlternates;

    public NProperty TypographyStylisticSet1 { get { return _typographyStylisticSet1 ?? (_typographyStylisticSet1 = NPropFactories.CreateTypographyStylisticSet1()); } }
           NProperty _typographyStylisticSet1;

    public NProperty TypographyStylisticSet10 { get { return _typographyStylisticSet10 ?? (_typographyStylisticSet10 = NPropFactories.CreateTypographyStylisticSet10()); } }
           NProperty _typographyStylisticSet10;

    public NProperty TypographyStylisticSet11 { get { return _typographyStylisticSet11 ?? (_typographyStylisticSet11 = NPropFactories.CreateTypographyStylisticSet11()); } }
           NProperty _typographyStylisticSet11;

    public NProperty TypographyStylisticSet12 { get { return _typographyStylisticSet12 ?? (_typographyStylisticSet12 = NPropFactories.CreateTypographyStylisticSet12()); } }
           NProperty _typographyStylisticSet12;

    public NProperty TypographyStylisticSet13 { get { return _typographyStylisticSet13 ?? (_typographyStylisticSet13 = NPropFactories.CreateTypographyStylisticSet13()); } }
           NProperty _typographyStylisticSet13;

    public NProperty TypographyStylisticSet14 { get { return _typographyStylisticSet14 ?? (_typographyStylisticSet14 = NPropFactories.CreateTypographyStylisticSet14()); } }
           NProperty _typographyStylisticSet14;

    public NProperty TypographyStylisticSet15 { get { return _typographyStylisticSet15 ?? (_typographyStylisticSet15 = NPropFactories.CreateTypographyStylisticSet15()); } }
           NProperty _typographyStylisticSet15;

    public NProperty TypographyStylisticSet16 { get { return _typographyStylisticSet16 ?? (_typographyStylisticSet16 = NPropFactories.CreateTypographyStylisticSet16()); } }
           NProperty _typographyStylisticSet16;

    public NProperty TypographyStylisticSet17 { get { return _typographyStylisticSet17 ?? (_typographyStylisticSet17 = NPropFactories.CreateTypographyStylisticSet17()); } }
           NProperty _typographyStylisticSet17;

    public NProperty TypographyStylisticSet18 { get { return _typographyStylisticSet18 ?? (_typographyStylisticSet18 = NPropFactories.CreateTypographyStylisticSet18()); } }
           NProperty _typographyStylisticSet18;

    public NProperty TypographyStylisticSet19 { get { return _typographyStylisticSet19 ?? (_typographyStylisticSet19 = NPropFactories.CreateTypographyStylisticSet19()); } }
           NProperty _typographyStylisticSet19;

    public NProperty TypographyStylisticSet2 { get { return _typographyStylisticSet2 ?? (_typographyStylisticSet2 = NPropFactories.CreateTypographyStylisticSet2()); } }
           NProperty _typographyStylisticSet2;

    public NProperty TypographyStylisticSet20 { get { return _typographyStylisticSet20 ?? (_typographyStylisticSet20 = NPropFactories.CreateTypographyStylisticSet20()); } }
           NProperty _typographyStylisticSet20;

    public NProperty TypographyStylisticSet3 { get { return _typographyStylisticSet3 ?? (_typographyStylisticSet3 = NPropFactories.CreateTypographyStylisticSet3()); } }
           NProperty _typographyStylisticSet3;

    public NProperty TypographyStylisticSet4 { get { return _typographyStylisticSet4 ?? (_typographyStylisticSet4 = NPropFactories.CreateTypographyStylisticSet4()); } }
           NProperty _typographyStylisticSet4;

    public NProperty TypographyStylisticSet5 { get { return _typographyStylisticSet5 ?? (_typographyStylisticSet5 = NPropFactories.CreateTypographyStylisticSet5()); } }
           NProperty _typographyStylisticSet5;

    public NProperty TypographyStylisticSet6 { get { return _typographyStylisticSet6 ?? (_typographyStylisticSet6 = NPropFactories.CreateTypographyStylisticSet6()); } }
           NProperty _typographyStylisticSet6;

    public NProperty TypographyStylisticSet7 { get { return _typographyStylisticSet7 ?? (_typographyStylisticSet7 = NPropFactories.CreateTypographyStylisticSet7()); } }
           NProperty _typographyStylisticSet7;

    public NProperty TypographyStylisticSet8 { get { return _typographyStylisticSet8 ?? (_typographyStylisticSet8 = NPropFactories.CreateTypographyStylisticSet8()); } }
           NProperty _typographyStylisticSet8;

    public NProperty TypographyStylisticSet9 { get { return _typographyStylisticSet9 ?? (_typographyStylisticSet9 = NPropFactories.CreateTypographyStylisticSet9()); } }
           NProperty _typographyStylisticSet9;

    public NProperty TypographyVariants { get { return _typographyVariants ?? (_typographyVariants = NPropFactories.CreateTypographyVariants()); } }
           NProperty _typographyVariants;

    public NProperty Uid { get { return _uid ?? (_uid = NPropFactories.CreateUid()); } }
           NProperty _uid;

    public NProperty Unchecked { get { return _unchecked ?? (_unchecked = NPropFactories.CreateUnchecked()); } }
           NProperty _unchecked;

    public NProperty UndoLimit { get { return _undoLimit ?? (_undoLimit = NPropFactories.CreateUndoLimit()); } }
           NProperty _undoLimit;

    public NProperty UnicodeString { get { return _unicodeString ?? (_unicodeString = NPropFactories.CreateUnicodeString()); } }
           NProperty _unicodeString;

    public NProperty Unloaded { get { return _unloaded ?? (_unloaded = NPropFactories.CreateUnloaded()); } }
           NProperty _unloaded;

    public NProperty UnloadedBehavior { get { return _unloadedBehavior ?? (_unloadedBehavior = NPropFactories.CreateUnloadedBehavior()); } }
           NProperty _unloadedBehavior;

    public NProperty UnloadingRow { get { return _unloadingRow ?? (_unloadingRow = NPropFactories.CreateUnloadingRow()); } }
           NProperty _unloadingRow;

    public NProperty UnloadingRowDetails { get { return _unloadingRowDetails ?? (_unloadingRowDetails = NPropFactories.CreateUnloadingRowDetails()); } }
           NProperty _unloadingRowDetails;

    public NProperty Unselected { get { return _unselected ?? (_unselected = NPropFactories.CreateUnselected()); } }
           NProperty _unselected;

    public NProperty UseCustomCursor { get { return _useCustomCursor ?? (_useCustomCursor = NPropFactories.CreateUseCustomCursor()); } }
           NProperty _useCustomCursor;

    public NProperty UseLayoutRounding { get { return _useLayoutRounding ?? (_useLayoutRounding = NPropFactories.CreateUseLayoutRounding()); } }
           NProperty _useLayoutRounding;

    public NProperty UsesItemContainerTemplate { get { return _usesItemContainerTemplate ?? (_usesItemContainerTemplate = NPropFactories.CreateUsesItemContainerTemplate()); } }
           NProperty _usesItemContainerTemplate;

    public NProperty ValidationErrorTemplate { get { return _validationErrorTemplate ?? (_validationErrorTemplate = NPropFactories.CreateValidationErrorTemplate()); } }
           NProperty _validationErrorTemplate;

    public NProperty Value { get { return _value ?? (_value = NPropFactories.CreateValue()); } }
           NProperty _value;

    public NProperty ValueChanged { get { return _valueChanged ?? (_valueChanged = NPropFactories.CreateValueChanged()); } }
           NProperty _valueChanged;

    public NProperty Variants { get { return _variants ?? (_variants = NPropFactories.CreateVariants()); } }
           NProperty _variants;

    public NProperty VerticalAlignment { get { return _verticalAlignment ?? (_verticalAlignment = NPropFactories.CreateVerticalAlignment()); } }
           NProperty _verticalAlignment;

    public NProperty VerticalAnchor { get { return _verticalAnchor ?? (_verticalAnchor = NPropFactories.CreateVerticalAnchor()); } }
           NProperty _verticalAnchor;

    public NProperty VerticalContentAlignment { get { return _verticalContentAlignment ?? (_verticalContentAlignment = NPropFactories.CreateVerticalContentAlignment()); } }
           NProperty _verticalContentAlignment;

    public NProperty VerticalGridLinesBrush { get { return _verticalGridLinesBrush ?? (_verticalGridLinesBrush = NPropFactories.CreateVerticalGridLinesBrush()); } }
           NProperty _verticalGridLinesBrush;

    public NProperty VerticalOffset { get { return _verticalOffset ?? (_verticalOffset = NPropFactories.CreateVerticalOffset()); } }
           NProperty _verticalOffset;

    public NProperty VerticalPageSpacing { get { return _verticalPageSpacing ?? (_verticalPageSpacing = NPropFactories.CreateVerticalPageSpacing()); } }
           NProperty _verticalPageSpacing;

    public NProperty VerticalScrollBarVisibility { get { return _verticalScrollBarVisibility ?? (_verticalScrollBarVisibility = NPropFactories.CreateVerticalScrollBarVisibility()); } }
           NProperty _verticalScrollBarVisibility;

    public NProperty View { get { return _view ?? (_view = NPropFactories.CreateView()); } }
           NProperty _view;

    public NProperty ViewingMode { get { return _viewingMode ?? (_viewingMode = NPropFactories.CreateViewingMode()); } }
           NProperty _viewingMode;

    public NProperty ViewportSize { get { return _viewportSize ?? (_viewportSize = NPropFactories.CreateViewportSize()); } }
           NProperty _viewportSize;

    public NProperty VirtualizingPanelCacheLength { get { return _virtualizingPanelCacheLength ?? (_virtualizingPanelCacheLength = NPropFactories.CreateVirtualizingPanelCacheLength()); } }
           NProperty _virtualizingPanelCacheLength;

    public NProperty VirtualizingPanelCacheLengthUnit { get { return _virtualizingPanelCacheLengthUnit ?? (_virtualizingPanelCacheLengthUnit = NPropFactories.CreateVirtualizingPanelCacheLengthUnit()); } }
           NProperty _virtualizingPanelCacheLengthUnit;

    public NProperty VirtualizingPanelIsContainerVirtualizable { get { return _virtualizingPanelIsContainerVirtualizable ?? (_virtualizingPanelIsContainerVirtualizable = NPropFactories.CreateVirtualizingPanelIsContainerVirtualizable()); } }
           NProperty _virtualizingPanelIsContainerVirtualizable;

    public NProperty VirtualizingPanelIsVirtualizing { get { return _virtualizingPanelIsVirtualizing ?? (_virtualizingPanelIsVirtualizing = NPropFactories.CreateVirtualizingPanelIsVirtualizing()); } }
           NProperty _virtualizingPanelIsVirtualizing;

    public NProperty VirtualizingPanelIsVirtualizingWhenGrouping { get { return _virtualizingPanelIsVirtualizingWhenGrouping ?? (_virtualizingPanelIsVirtualizingWhenGrouping = NPropFactories.CreateVirtualizingPanelIsVirtualizingWhenGrouping()); } }
           NProperty _virtualizingPanelIsVirtualizingWhenGrouping;

    public NProperty VirtualizingPanelScrollUnit { get { return _virtualizingPanelScrollUnit ?? (_virtualizingPanelScrollUnit = NPropFactories.CreateVirtualizingPanelScrollUnit()); } }
           NProperty _virtualizingPanelScrollUnit;

    public NProperty VirtualizingPanelVirtualizationMode { get { return _virtualizingPanelVirtualizationMode ?? (_virtualizingPanelVirtualizationMode = NPropFactories.CreateVirtualizingPanelVirtualizationMode()); } }
           NProperty _virtualizingPanelVirtualizationMode;

    public NProperty Visibility { get { return _visibility ?? (_visibility = NPropFactories.CreateVisibility()); } }
           NProperty _visibility;

    public NProperty Volume { get { return _volume ?? (_volume = NPropFactories.CreateVolume()); } }
           NProperty _volume;

    public NProperty Width { get { return _width ?? (_width = NPropFactories.CreateWidth()); } }
           NProperty _width;

    public NProperty WindowStartupLocation { get { return _windowStartupLocation ?? (_windowStartupLocation = NPropFactories.CreateWindowStartupLocation()); } }
           NProperty _windowStartupLocation;

    public NProperty WindowState { get { return _windowState ?? (_windowState = NPropFactories.CreateWindowState()); } }
           NProperty _windowState;

    public NProperty WindowStyle { get { return _windowStyle ?? (_windowStyle = NPropFactories.CreateWindowStyle()); } }
           NProperty _windowStyle;

    public NProperty WindowTitle { get { return _windowTitle ?? (_windowTitle = NPropFactories.CreateWindowTitle()); } }
           NProperty _windowTitle;

    public NProperty WrapDirection { get { return _wrapDirection ?? (_wrapDirection = NPropFactories.CreateWrapDirection()); } }
           NProperty _wrapDirection;

    public NProperty WrapWidth { get { return _wrapWidth ?? (_wrapWidth = NPropFactories.CreateWrapWidth()); } }
           NProperty _wrapWidth;

    public NProperty X1 { get { return _x1 ?? (_x1 = NPropFactories.CreateX1()); } }
           NProperty _x1;

    public NProperty X2 { get { return _x2 ?? (_x2 = NPropFactories.CreateX2()); } }
           NProperty _x2;

    public NProperty Y1 { get { return _y1 ?? (_y1 = NPropFactories.CreateY1()); } }
           NProperty _y1;

    public NProperty Y2 { get { return _y2 ?? (_y2 = NPropFactories.CreateY2()); } }
           NProperty _y2;

    public NProperty Zoom { get { return _zoom ?? (_zoom = NPropFactories.CreateZoom()); } }
           NProperty _zoom;

    public NProperty ZoomIncrement { get { return _zoomIncrement ?? (_zoomIncrement = NPropFactories.CreateZoomIncrement()); } }
           NProperty _zoomIncrement;

  }

  static partial class NPropFactories
  {
    public static NProperty CreateAcceptsReturn() => new NProperty(nameof(NProperties.AcceptsReturn)).
        Property<TextBoxBase>(TextBoxBase.AcceptsReturnProperty, NConverters.ToBool);

    public static NProperty CreateAcceptsTab() => new NProperty(nameof(NProperties.AcceptsTab)).
        Property<TextBoxBase>(TextBoxBase.AcceptsTabProperty, NConverters.ToBool);

    public static NProperty CreateActivated() => new NProperty(nameof(NProperties.Activated)).
        Event<Window>((s, a) => s.Activated += a.EventHandler);

    public static NProperty CreateActiveEditingModeChanged() => new NProperty(nameof(NProperties.ActiveEditingModeChanged)).
        Event<InkCanvas>(InkCanvas.ActiveEditingModeChangedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateAddingNewItem() => new NProperty(nameof(NProperties.AddingNewItem)).
        Event<DataGrid>((s, a) => s.AddingNewItem += a.EventHandler);

    public static NProperty CreateAllowDrop() => new NProperty(nameof(NProperties.AllowDrop)).
        Property<UIElement>(UIElement.AllowDropProperty, NConverters.ToBool);

    public static NProperty CreateAllowsColumnReorder() => new NProperty(nameof(NProperties.AllowsColumnReorder)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.AllowsColumnReorderProperty, NConverters.ToBool);

    public static NProperty CreateAllowsTransparency() => new NProperty(nameof(NProperties.AllowsTransparency)).
        Property<Window>(Window.AllowsTransparencyProperty, NConverters.ToBool).
        Property<Popup>(Popup.AllowsTransparencyProperty, NConverters.ToBool);

    public static NProperty CreateAlternatingRowBackground() => new NProperty(nameof(NProperties.AlternatingRowBackground)).
        Property<DataGrid>(DataGrid.AlternatingRowBackgroundProperty, NConverters.ToBrush);

    public static NProperty CreateAlternationCount() => new NProperty(nameof(NProperties.AlternationCount)).
        Property<ItemsControl>(ItemsControl.AlternationCountProperty, NConverters.ToInt32);

    public static NProperty CreateAnnotationAlternates() => new NProperty(nameof(NProperties.AnnotationAlternates)).
        Property<Typography>((t, v) => t.AnnotationAlternates = NConverters.ToInt32T(v));

    public static NProperty CreateAreRowDetailsFrozen() => new NProperty(nameof(NProperties.AreRowDetailsFrozen)).
        Property<DataGrid>(DataGrid.AreRowDetailsFrozenProperty, NConverters.ToBool);

    public static NProperty CreateAutoGenerateColumns() => new NProperty(nameof(NProperties.AutoGenerateColumns)).
        Property<DataGrid>(DataGrid.AutoGenerateColumnsProperty, NConverters.ToBool);

    public static NProperty CreateAutoGeneratedColumns() => new NProperty(nameof(NProperties.AutoGeneratedColumns)).
        Event<DataGrid>((s, a) => s.AutoGeneratedColumns += a.EventHandler);

    public static NProperty CreateAutoGeneratingColumn() => new NProperty(nameof(NProperties.AutoGeneratingColumn)).
        Event<DataGrid>((s, a) => s.AutoGeneratingColumn += a.EventHandler);

    public static NProperty CreateAutoToolTipPlacement() => new NProperty(nameof(NProperties.AutoToolTipPlacement)).
        Property<Slider>(Slider.AutoToolTipPlacementProperty, NConverters.ToEnum<AutoToolTipPlacement>);

    public static NProperty CreateAutoToolTipPrecision() => new NProperty(nameof(NProperties.AutoToolTipPrecision)).
        Property<Slider>(Slider.AutoToolTipPrecisionProperty, NConverters.ToInt32);

    public static NProperty CreateAutoWordSelection() => new NProperty(nameof(NProperties.AutoWordSelection)).
        Property<TextBoxBase>(TextBoxBase.AutoWordSelectionProperty, NConverters.ToBool);

    public static NProperty CreateBackground() => new NProperty(nameof(NProperties.Background)).
        Property<FixedPage>(FixedPage.BackgroundProperty, NConverters.ToBrush).
        Property<AccessText>(AccessText.BackgroundProperty, NConverters.ToBrush).
        Property<Control>(Control.BackgroundProperty, NConverters.ToBrush).
        Property<Border>(Border.BackgroundProperty, NConverters.ToBrush).
        Property<BulletDecorator>(BulletDecorator.BackgroundProperty, NConverters.ToBrush).
        Property<InkCanvas>(InkCanvas.BackgroundProperty, NConverters.ToBrush).
        Property<Page>(Page.BackgroundProperty, NConverters.ToBrush).
        Property<Panel>(Panel.BackgroundProperty, NConverters.ToBrush).
        Property<TextBlock>(TextBlock.BackgroundProperty, NConverters.ToBrush).
        Property<ToolBarTray>(ToolBarTray.BackgroundProperty, NConverters.ToBrush).
        Property<TextElement>(TextElement.BackgroundProperty, NConverters.ToBrush);

    public static NProperty CreateBalance() => new NProperty(nameof(NProperties.Balance)).
        Property<MediaElement>(MediaElement.BalanceProperty, NConverters.ToDouble);

    public static NProperty CreateBand() => new NProperty(nameof(NProperties.Band)).
        Property<ToolBar>(ToolBar.BandProperty, NConverters.ToInt32);

    public static NProperty CreateBandIndex() => new NProperty(nameof(NProperties.BandIndex)).
        Property<ToolBar>(ToolBar.BandIndexProperty, NConverters.ToInt32);

    public static NProperty CreateBaselineAlignment() => new NProperty(nameof(NProperties.BaselineAlignment)).
        Property<Inline>(Inline.BaselineAlignmentProperty, NConverters.ToEnum<BaselineAlignment>);

    public static NProperty CreateBaselineOffset() => new NProperty(nameof(NProperties.BaselineOffset)).
        Property<AccessText>(AccessText.BaselineOffsetProperty, NConverters.ToDouble).
        Property<TextBlock>(TextBlock.BaselineOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateBeginningEdit() => new NProperty(nameof(NProperties.BeginningEdit)).
        Event<DataGrid>((s, a) => s.BeginningEdit += a.EventHandler);

    public static NProperty CreateBidiLevel() => new NProperty(nameof(NProperties.BidiLevel)).
        Property<Glyphs>(Glyphs.BidiLevelProperty, NConverters.ToInt32);

    public static NProperty CreateBindingGroup() => new NProperty(nameof(NProperties.BindingGroup)).
        Property<FrameworkElement>(FrameworkElement.BindingGroupProperty);

    public static NProperty CreateBitmapEffect() => new NProperty(nameof(NProperties.BitmapEffect)).
        Property<UIElement>(UIElement.BitmapEffectProperty);

    public static NProperty CreateBitmapEffectInput() => new NProperty(nameof(NProperties.BitmapEffectInput)).
        Property<UIElement>(UIElement.BitmapEffectInputProperty);

    public static NProperty CreateBlackoutDates() => new NProperty(nameof(NProperties.BlackoutDates)).
        Property<Calendar>((t, v) => NPatch.AssignListT(t.BlackoutDates, v)).
        Property<DatePicker>((t, v) => NPatch.AssignListT(t.BlackoutDates, v));

    public static NProperty CreateBleedBox() => new NProperty(nameof(NProperties.BleedBox)).
        Property<FixedPage>(FixedPage.BleedBoxProperty);

    public static NProperty CreateBlockIsHyphenationEnabled() => new NProperty(nameof(NProperties.BlockIsHyphenationEnabled)).
        Property<DependencyObject>(Block.IsHyphenationEnabledProperty, NConverters.ToBool);

    public static NProperty CreateBlockLineHeight() => new NProperty(nameof(NProperties.BlockLineHeight)).
        Property<DependencyObject>(Block.LineHeightProperty, NConverters.ToDouble);

    public static NProperty CreateBlockLineStackingStrategy() => new NProperty(nameof(NProperties.BlockLineStackingStrategy)).
        Property<DependencyObject>(Block.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>);

    public static NProperty CreateBlocks() => new NProperty(nameof(NProperties.Blocks)).
        List<Section>(t => t.Blocks).
        List<AnchoredBlock>(t => t.Blocks).
        List<ListItem>(t => t.Blocks).
        List<TableCell>(t => t.Blocks);

    public static NProperty CreateBlockTextAlignment() => new NProperty(nameof(NProperties.BlockTextAlignment)).
        Property<DependencyObject>(Block.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>);

    public static NProperty CreateBorderBrush() => new NProperty(nameof(NProperties.BorderBrush)).
        Property<Control>(Control.BorderBrushProperty, NConverters.ToBrush).
        Property<Border>(Border.BorderBrushProperty, NConverters.ToBrush).
        Property<Block>(Block.BorderBrushProperty, NConverters.ToBrush).
        Property<AnchoredBlock>(AnchoredBlock.BorderBrushProperty, NConverters.ToBrush).
        Property<ListItem>(ListItem.BorderBrushProperty, NConverters.ToBrush).
        Property<TableCell>(TableCell.BorderBrushProperty, NConverters.ToBrush);

    public static NProperty CreateBorderThickness() => new NProperty(nameof(NProperties.BorderThickness)).
        Property<Control>(Control.BorderThicknessProperty, NConverters.ToThickness).
        Property<Border>(Border.BorderThicknessProperty, NConverters.ToThickness).
        Property<Block>(Block.BorderThicknessProperty, NConverters.ToThickness).
        Property<AnchoredBlock>(AnchoredBlock.BorderThicknessProperty, NConverters.ToThickness).
        Property<ListItem>(ListItem.BorderThicknessProperty, NConverters.ToThickness).
        Property<TableCell>(TableCell.BorderThicknessProperty, NConverters.ToThickness);

    public static NProperty CreateBreakColumnBefore() => new NProperty(nameof(NProperties.BreakColumnBefore)).
        Property<Block>(Block.BreakColumnBeforeProperty, NConverters.ToBool);

    public static NProperty CreateBreakPageBefore() => new NProperty(nameof(NProperties.BreakPageBefore)).
        Property<Block>(Block.BreakPageBeforeProperty, NConverters.ToBool);

    public static NProperty CreateBufferingEnded() => new NProperty(nameof(NProperties.BufferingEnded)).
        Event<MediaElement>(MediaElement.BufferingEndedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateBufferingStarted() => new NProperty(nameof(NProperties.BufferingStarted)).
        Event<MediaElement>(MediaElement.BufferingStartedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateBullet() => new NProperty(nameof(NProperties.Bullet)).
        Property<BulletDecorator>((t, v) => NPatch.AssignSingle(o => o.Bullet, (o, i) => o.Bullet = i, t, v));

    public static NProperty CreateCacheMode() => new NProperty(nameof(NProperties.CacheMode)).
        Property<UIElement>(UIElement.CacheModeProperty);

    public static NProperty CreateCalendarButtonStyle() => new NProperty(nameof(NProperties.CalendarButtonStyle)).
        Property<Calendar>(Calendar.CalendarButtonStyleProperty, NConverters.ToStyle);

    public static NProperty CreateCalendarClosed() => new NProperty(nameof(NProperties.CalendarClosed)).
        Event<DatePicker>((s, a) => s.CalendarClosed += a.EventHandler);

    public static NProperty CreateCalendarDayButtonStyle() => new NProperty(nameof(NProperties.CalendarDayButtonStyle)).
        Property<Calendar>(Calendar.CalendarDayButtonStyleProperty, NConverters.ToStyle);

    public static NProperty CreateCalendarItemStyle() => new NProperty(nameof(NProperties.CalendarItemStyle)).
        Property<Calendar>(Calendar.CalendarItemStyleProperty, NConverters.ToStyle);

    public static NProperty CreateCalendarOpened() => new NProperty(nameof(NProperties.CalendarOpened)).
        Event<DatePicker>((s, a) => s.CalendarOpened += a.EventHandler);

    public static NProperty CreateCalendarStyle() => new NProperty(nameof(NProperties.CalendarStyle)).
        Property<DatePicker>(DatePicker.CalendarStyleProperty, NConverters.ToStyle);

    public static NProperty CreateCamera() => new NProperty(nameof(NProperties.Camera)).
        Property<Viewport3D>(Viewport3D.CameraProperty);

    public static NProperty CreateCanContentScroll() => new NProperty(nameof(NProperties.CanContentScroll)).
        Property<ScrollContentPresenter>(ScrollContentPresenter.CanContentScrollProperty, NConverters.ToBool).
        Property<ScrollViewer>(ScrollViewer.CanContentScrollProperty, NConverters.ToBool);

    public static NProperty CreateCanDelayPlacement() => new NProperty(nameof(NProperties.CanDelayPlacement)).
        Property<Figure>(Figure.CanDelayPlacementProperty, NConverters.ToBool);

    public static NProperty CreateCanHorizontallyScroll() => new NProperty(nameof(NProperties.CanHorizontallyScroll)).
        Property<ScrollContentPresenter>((t, v) => t.CanHorizontallyScroll = NConverters.ToBoolT(v)).
        Property<StackPanel>((t, v) => t.CanHorizontallyScroll = NConverters.ToBoolT(v)).
        Property<VirtualizingStackPanel>((t, v) => t.CanHorizontallyScroll = NConverters.ToBoolT(v));

    public static NProperty CreateCanUserAddRows() => new NProperty(nameof(NProperties.CanUserAddRows)).
        Property<DataGrid>(DataGrid.CanUserAddRowsProperty, NConverters.ToBool);

    public static NProperty CreateCanUserDeleteRows() => new NProperty(nameof(NProperties.CanUserDeleteRows)).
        Property<DataGrid>(DataGrid.CanUserDeleteRowsProperty, NConverters.ToBool);

    public static NProperty CreateCanUserReorderColumns() => new NProperty(nameof(NProperties.CanUserReorderColumns)).
        Property<DataGrid>(DataGrid.CanUserReorderColumnsProperty, NConverters.ToBool);

    public static NProperty CreateCanUserResizeColumns() => new NProperty(nameof(NProperties.CanUserResizeColumns)).
        Property<DataGrid>(DataGrid.CanUserResizeColumnsProperty, NConverters.ToBool);

    public static NProperty CreateCanUserResizeRows() => new NProperty(nameof(NProperties.CanUserResizeRows)).
        Property<DataGrid>(DataGrid.CanUserResizeRowsProperty, NConverters.ToBool);

    public static NProperty CreateCanUserSortColumns() => new NProperty(nameof(NProperties.CanUserSortColumns)).
        Property<DataGrid>(DataGrid.CanUserSortColumnsProperty, NConverters.ToBool);

    public static NProperty CreateCanvasBottom() => new NProperty(nameof(NProperties.CanvasBottom)).
        Property<UIElement>(Canvas.BottomProperty, NConverters.ToDouble);

    public static NProperty CreateCanvasLeft() => new NProperty(nameof(NProperties.CanvasLeft)).
        Property<UIElement>(Canvas.LeftProperty, NConverters.ToDouble);

    public static NProperty CreateCanvasRight() => new NProperty(nameof(NProperties.CanvasRight)).
        Property<UIElement>(Canvas.RightProperty, NConverters.ToDouble);

    public static NProperty CreateCanvasTop() => new NProperty(nameof(NProperties.CanvasTop)).
        Property<UIElement>(Canvas.TopProperty, NConverters.ToDouble);

    public static NProperty CreateCanVerticallyScroll() => new NProperty(nameof(NProperties.CanVerticallyScroll)).
        Property<ScrollContentPresenter>((t, v) => t.CanVerticallyScroll = NConverters.ToBoolT(v)).
        Property<StackPanel>((t, v) => t.CanVerticallyScroll = NConverters.ToBoolT(v)).
        Property<VirtualizingStackPanel>((t, v) => t.CanVerticallyScroll = NConverters.ToBoolT(v));

    public static NProperty CreateCapitals() => new NProperty(nameof(NProperties.Capitals)).
        Property<Typography>((t, v) => t.Capitals = NConverters.ToEnumT<FontCapitals>(v));

    public static NProperty CreateCapitalSpacing() => new NProperty(nameof(NProperties.CapitalSpacing)).
        Property<Typography>((t, v) => t.CapitalSpacing = NConverters.ToBoolT(v));

    public static NProperty CreateCaptionFontFamily() => new NProperty(nameof(NProperties.CaptionFontFamily)).
        Property<StickyNoteControl>(StickyNoteControl.CaptionFontFamilyProperty, NConverters.ToFontFamily);

    public static NProperty CreateCaptionFontSize() => new NProperty(nameof(NProperties.CaptionFontSize)).
        Property<StickyNoteControl>(StickyNoteControl.CaptionFontSizeProperty, NConverters.ToDouble);

    public static NProperty CreateCaptionFontStretch() => new NProperty(nameof(NProperties.CaptionFontStretch)).
        Property<StickyNoteControl>(StickyNoteControl.CaptionFontStretchProperty, NConverters.ToFontStretch);

    public static NProperty CreateCaptionFontStyle() => new NProperty(nameof(NProperties.CaptionFontStyle)).
        Property<StickyNoteControl>(StickyNoteControl.CaptionFontStyleProperty, NConverters.ToFontStyle);

    public static NProperty CreateCaptionFontWeight() => new NProperty(nameof(NProperties.CaptionFontWeight)).
        Property<StickyNoteControl>(StickyNoteControl.CaptionFontWeightProperty, NConverters.ToFontWeight);

    public static NProperty CreateCaretBrush() => new NProperty(nameof(NProperties.CaretBrush)).
        Property<PasswordBox>(PasswordBox.CaretBrushProperty, NConverters.ToBrush).
        Property<TextBoxBase>(TextBoxBase.CaretBrushProperty, NConverters.ToBrush);

    public static NProperty CreateCaretIndex() => new NProperty(nameof(NProperties.CaretIndex)).
        Property<TextBox>((t, v) => t.CaretIndex = NConverters.ToInt32T(v));

    public static NProperty CreateCaretStops() => new NProperty(nameof(NProperties.CaretStops)).
        Property<Glyphs>(Glyphs.CaretStopsProperty, NConverters.ToString);

    public static NProperty CreateCaseSensitiveForms() => new NProperty(nameof(NProperties.CaseSensitiveForms)).
        Property<Typography>((t, v) => t.CaseSensitiveForms = NConverters.ToBoolT(v));

    public static NProperty CreateCellEditEnding() => new NProperty(nameof(NProperties.CellEditEnding)).
        Event<DataGrid>((s, a) => s.CellEditEnding += a.EventHandler);

    public static NProperty CreateCells() => new NProperty(nameof(NProperties.Cells)).
        Property<TableRow>((t, v) => NPatch.AssignListT(t.Cells, v));

    public static NProperty CreateCellSpacing() => new NProperty(nameof(NProperties.CellSpacing)).
        Property<Table>(Table.CellSpacingProperty, NConverters.ToDouble);

    public static NProperty CreateCellStyle() => new NProperty(nameof(NProperties.CellStyle)).
        Property<DataGrid>(DataGrid.CellStyleProperty, NConverters.ToStyle);

    public static NProperty CreateCharacterCasing() => new NProperty(nameof(NProperties.CharacterCasing)).
        Property<TextBox>(TextBox.CharacterCasingProperty, NConverters.ToEnum<CharacterCasing>);

    public static NProperty CreateChecked() => new NProperty(nameof(NProperties.Checked)).
        Event<ToggleButton>(ToggleButton.CheckedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<MenuItem>(MenuItem.CheckedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateChild() => new NProperty(nameof(NProperties.Child)).
        Property<AdornedElementPlaceholder>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v)).
        Property<Decorator>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v)).
        Property<AdornerDecorator>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v)).
        Property<Viewbox>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v)).
        Property<Popup>(Popup.ChildProperty).
        Property<BlockUIContainer>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v)).
        Property<InlineUIContainer>((t, v) => NPatch.AssignSingle(o => o.Child, (o, i) => o.Child = i, t, v));

    public static NProperty CreateChildren() => new NProperty(nameof(NProperties.Children)).
        List<FixedPage>(t => t.Children).
        List<InkCanvas>(t => t.Children).
        List<Panel>(t => t.Children).
        Property<Viewport3D>((t, v) => NPatch.AssignListT(t.Children, v));

    public static NProperty CreateClearFloaters() => new NProperty(nameof(NProperties.ClearFloaters)).
        Property<Block>(Block.ClearFloatersProperty, NConverters.ToEnum<WrapDirection>);

    public static NProperty CreateClick() => new NProperty(nameof(NProperties.Click)).
        Event<ButtonBase>(ButtonBase.ClickEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<MenuItem>(MenuItem.ClickEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<Hyperlink>(Hyperlink.ClickEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateClickMode() => new NProperty(nameof(NProperties.ClickMode)).
        Property<ButtonBase>(ButtonBase.ClickModeProperty, NConverters.ToEnum<ClickMode>);

    public static NProperty CreateClip() => new NProperty(nameof(NProperties.Clip)).
        Property<UIElement>(UIElement.ClipProperty);

    public static NProperty CreateClipboardCopyMode() => new NProperty(nameof(NProperties.ClipboardCopyMode)).
        Property<DataGrid>(DataGrid.ClipboardCopyModeProperty, NConverters.ToEnum<DataGridClipboardCopyMode>);

    public static NProperty CreateClipToBounds() => new NProperty(nameof(NProperties.ClipToBounds)).
        Property<UIElement>(UIElement.ClipToBoundsProperty, NConverters.ToBool);

    public static NProperty CreateClosed() => new NProperty(nameof(NProperties.Closed)).
        Event<Window>((s, a) => s.Closed += a.EventHandler).
        Event<ToolTip>(ToolTip.ClosedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<ContextMenu>(ContextMenu.ClosedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<Popup>((s, a) => s.Closed += a.EventHandler);

    public static NProperty CreateClosing() => new NProperty(nameof(NProperties.Closing)).
        Event<Window>((s, a) => s.Closing += a.EventHandler);

    public static NProperty CreateCollapsed() => new NProperty(nameof(NProperties.Collapsed)).
        Event<Expander>(Expander.CollapsedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<TreeViewItem>(TreeViewItem.CollapsedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateColumnDefinitions() => new NProperty(nameof(NProperties.ColumnDefinitions)).
        Property<Grid>((t, v) => NPatch.AssignListT(t.ColumnDefinitions, v));

    public static NProperty CreateColumnDisplayIndexChanged() => new NProperty(nameof(NProperties.ColumnDisplayIndexChanged)).
        Event<DataGrid>((s, a) => s.ColumnDisplayIndexChanged += a.EventHandler);

    public static NProperty CreateColumnHeaderContainerStyle() => new NProperty(nameof(NProperties.ColumnHeaderContainerStyle)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderContainerStyleProperty, NConverters.ToStyle);

    public static NProperty CreateColumnHeaderContextMenu() => new NProperty(nameof(NProperties.ColumnHeaderContextMenu)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderContextMenuProperty);

    public static NProperty CreateColumnHeaderDragCompleted() => new NProperty(nameof(NProperties.ColumnHeaderDragCompleted)).
        Event<DataGrid>((s, a) => s.ColumnHeaderDragCompleted += a.EventHandler);

    public static NProperty CreateColumnHeaderDragDelta() => new NProperty(nameof(NProperties.ColumnHeaderDragDelta)).
        Event<DataGrid>((s, a) => s.ColumnHeaderDragDelta += a.EventHandler);

    public static NProperty CreateColumnHeaderDragStarted() => new NProperty(nameof(NProperties.ColumnHeaderDragStarted)).
        Event<DataGrid>((s, a) => s.ColumnHeaderDragStarted += a.EventHandler);

    public static NProperty CreateColumnHeaderHeight() => new NProperty(nameof(NProperties.ColumnHeaderHeight)).
        Property<DataGrid>(DataGrid.ColumnHeaderHeightProperty, NConverters.ToDouble);

    public static NProperty CreateColumnHeaderStringFormat() => new NProperty(nameof(NProperties.ColumnHeaderStringFormat)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderStringFormatProperty, NConverters.ToString);

    public static NProperty CreateColumnHeaderStyle() => new NProperty(nameof(NProperties.ColumnHeaderStyle)).
        Property<DataGrid>(DataGrid.ColumnHeaderStyleProperty, NConverters.ToStyle);

    public static NProperty CreateColumnHeaderTemplate() => new NProperty(nameof(NProperties.ColumnHeaderTemplate)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateColumnHeaderTemplateSelector() => new NProperty(nameof(NProperties.ColumnHeaderTemplateSelector)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderTemplateSelectorProperty);

    public static NProperty CreateColumnHeaderToolTip() => new NProperty(nameof(NProperties.ColumnHeaderToolTip)).
        Property<GridViewHeaderRowPresenter>(GridViewHeaderRowPresenter.ColumnHeaderToolTipProperty);

    public static NProperty CreateColumnReordered() => new NProperty(nameof(NProperties.ColumnReordered)).
        Event<DataGrid>((s, a) => s.ColumnReordered += a.EventHandler);

    public static NProperty CreateColumnReordering() => new NProperty(nameof(NProperties.ColumnReordering)).
        Event<DataGrid>((s, a) => s.ColumnReordering += a.EventHandler);

    public static NProperty CreateColumns() => new NProperty(nameof(NProperties.Columns)).
        Property<DataGrid>((t, v) => NPatch.AssignListT(t.Columns, v)).
        Property<UniformGrid>(UniformGrid.ColumnsProperty, NConverters.ToInt32).
        Property<GridViewRowPresenterBase>((t, v) => NPatch.AssignListT(t.Columns, v)).
        Property<Table>((t, v) => NPatch.AssignListT(t.Columns, v));

    public static NProperty CreateColumnSpan() => new NProperty(nameof(NProperties.ColumnSpan)).
        Property<TableCell>(TableCell.ColumnSpanProperty, NConverters.ToInt32);

    public static NProperty CreateColumnWidth() => new NProperty(nameof(NProperties.ColumnWidth)).
        Property<DataGrid>(DataGrid.ColumnWidthProperty);

    public static NProperty CreateCommand() => new NProperty(nameof(NProperties.Command)).
        Property<ButtonBase>(ButtonBase.CommandProperty).
        Property<MenuItem>(MenuItem.CommandProperty).
        Property<Hyperlink>(Hyperlink.CommandProperty);

    public static NProperty CreateCommandBindings() => new NProperty(nameof(NProperties.CommandBindings)).
        List<UIElement>(t => t.CommandBindings);

    public static NProperty CreateCommandParameter() => new NProperty(nameof(NProperties.CommandParameter)).
        Property<ButtonBase>(ButtonBase.CommandParameterProperty).
        Property<MenuItem>(MenuItem.CommandParameterProperty).
        Property<Hyperlink>(Hyperlink.CommandParameterProperty);

    public static NProperty CreateCommandTarget() => new NProperty(nameof(NProperties.CommandTarget)).
        Property<ButtonBase>(ButtonBase.CommandTargetProperty).
        Property<MenuItem>(MenuItem.CommandTargetProperty).
        Property<Hyperlink>(Hyperlink.CommandTargetProperty);

    public static NProperty CreateContent() => new NProperty(nameof(NProperties.Content)).
        Property<ContentPresenter>(ContentPresenter.ContentProperty).
        Property<ContentControl>(ContentControl.ContentProperty).
        Property<Page>(Page.ContentProperty).
        Property<GridViewRowPresenter>(GridViewRowPresenter.ContentProperty);

    public static NProperty CreateContentBox() => new NProperty(nameof(NProperties.ContentBox)).
        Property<FixedPage>(FixedPage.ContentBoxProperty);

    public static NProperty CreateContentRendered() => new NProperty(nameof(NProperties.ContentRendered)).
        Event<Window>((s, a) => s.ContentRendered += a.EventHandler).
        Event<Frame>((s, a) => s.ContentRendered += a.EventHandler);

    public static NProperty CreateContentSource() => new NProperty(nameof(NProperties.ContentSource)).
        Property<ContentPresenter>(ContentPresenter.ContentSourceProperty, NConverters.ToString);

    public static NProperty CreateContentStringFormat() => new NProperty(nameof(NProperties.ContentStringFormat)).
        Property<ContentPresenter>(ContentPresenter.ContentStringFormatProperty, NConverters.ToString).
        Property<ContentControl>(ContentControl.ContentStringFormatProperty, NConverters.ToString).
        Property<TabControl>(TabControl.ContentStringFormatProperty, NConverters.ToString);

    public static NProperty CreateContentTemplate() => new NProperty(nameof(NProperties.ContentTemplate)).
        Property<ContentPresenter>(ContentPresenter.ContentTemplateProperty, NConverters.ToDataTemplate).
        Property<ContentControl>(ContentControl.ContentTemplateProperty, NConverters.ToDataTemplate).
        Property<TabControl>(TabControl.ContentTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateContentTemplateSelector() => new NProperty(nameof(NProperties.ContentTemplateSelector)).
        Property<ContentPresenter>(ContentPresenter.ContentTemplateSelectorProperty).
        Property<ContentControl>(ContentControl.ContentTemplateSelectorProperty).
        Property<TabControl>(TabControl.ContentTemplateSelectorProperty);

    public static NProperty CreateContextMenu() => new NProperty(nameof(NProperties.ContextMenu)).
        Property<FrameworkElement>(FrameworkElement.ContextMenuProperty);

    public static NProperty CreateContextMenuClosing() => new NProperty(nameof(NProperties.ContextMenuClosing)).
        Event<FrameworkElement>(FrameworkElement.ContextMenuClosingEvent, a => (ContextMenuEventHandler)a.EventHandler);

    public static NProperty CreateContextMenuOpening() => new NProperty(nameof(NProperties.ContextMenuOpening)).
        Event<FrameworkElement>(FrameworkElement.ContextMenuOpeningEvent, a => (ContextMenuEventHandler)a.EventHandler);

    public static NProperty CreateContextualAlternates() => new NProperty(nameof(NProperties.ContextualAlternates)).
        Property<Typography>((t, v) => t.ContextualAlternates = NConverters.ToBoolT(v));

    public static NProperty CreateContextualLigatures() => new NProperty(nameof(NProperties.ContextualLigatures)).
        Property<Typography>((t, v) => t.ContextualLigatures = NConverters.ToBoolT(v));

    public static NProperty CreateContextualSwashes() => new NProperty(nameof(NProperties.ContextualSwashes)).
        Property<Typography>((t, v) => t.ContextualSwashes = NConverters.ToInt32T(v));

    public static NProperty CreateCopyingRowClipboardContent() => new NProperty(nameof(NProperties.CopyingRowClipboardContent)).
        Event<DataGrid>((s, a) => s.CopyingRowClipboardContent += a.EventHandler);

    public static NProperty CreateCornerRadius() => new NProperty(nameof(NProperties.CornerRadius)).
        Property<Border>(Border.CornerRadiusProperty, NConverters.ToCornerRadius);

    public static NProperty CreateCurrentCell() => new NProperty(nameof(NProperties.CurrentCell)).
        Property<DataGrid>(DataGrid.CurrentCellProperty);

    public static NProperty CreateCurrentCellChanged() => new NProperty(nameof(NProperties.CurrentCellChanged)).
        Event<DataGrid>((s, a) => s.CurrentCellChanged += a.EventHandler);

    public static NProperty CreateCurrentColumn() => new NProperty(nameof(NProperties.CurrentColumn)).
        Property<DataGrid>(DataGrid.CurrentColumnProperty);

    public static NProperty CreateCurrentItem() => new NProperty(nameof(NProperties.CurrentItem)).
        Property<DataGrid>(DataGrid.CurrentItemProperty);

    public static NProperty CreateCursor() => new NProperty(nameof(NProperties.Cursor)).
        Property<FrameworkElement>(FrameworkElement.CursorProperty, NConverters.ToCursor);

    public static NProperty CreateCustomPopupPlacementCallback() => new NProperty(nameof(NProperties.CustomPopupPlacementCallback)).
        Property<ToolTip>(ToolTip.CustomPopupPlacementCallbackProperty).
        Property<ContextMenu>(ContextMenu.CustomPopupPlacementCallbackProperty).
        Property<Popup>(Popup.CustomPopupPlacementCallbackProperty);

    public static NProperty CreateData() => new NProperty(nameof(NProperties.Data)).
        Property<Path>(Path.DataProperty);

    public static NProperty CreateDataContext() => new NProperty(nameof(NProperties.DataContext)).
        Property<FrameworkElement>(FrameworkElement.DataContextProperty);

    public static NProperty CreateDataContextChanged() => new NProperty(nameof(NProperties.DataContextChanged)).
        Event<FrameworkElement>((s, a) => s.DataContextChanged += a.EventHandlerAny);

    public static NProperty CreateDateValidationError() => new NProperty(nameof(NProperties.DateValidationError)).
        Event<DatePicker>((s, a) => s.DateValidationError += a.EventHandler);

    public static NProperty CreateDeactivated() => new NProperty(nameof(NProperties.Deactivated)).
        Event<Window>((s, a) => s.Deactivated += a.EventHandler);

    public static NProperty CreateDefaultDrawingAttributes() => new NProperty(nameof(NProperties.DefaultDrawingAttributes)).
        Property<InkCanvas>(InkCanvas.DefaultDrawingAttributesProperty);

    public static NProperty CreateDefaultDrawingAttributesReplaced() => new NProperty(nameof(NProperties.DefaultDrawingAttributesReplaced)).
        Event<InkCanvas>((s, a) => s.DefaultDrawingAttributesReplaced += a.EventHandler);

    public static NProperty CreateDelay() => new NProperty(nameof(NProperties.Delay)).
        Property<RepeatButton>(RepeatButton.DelayProperty, NConverters.ToInt32).
        Property<Slider>(Slider.DelayProperty, NConverters.ToInt32);

    public static NProperty CreateDetailsTemplate() => new NProperty(nameof(NProperties.DetailsTemplate)).
        Property<DataGridRow>(DataGridRow.DetailsTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateDetailsTemplateSelector() => new NProperty(nameof(NProperties.DetailsTemplateSelector)).
        Property<DataGridRow>(DataGridRow.DetailsTemplateSelectorProperty);

    public static NProperty CreateDetailsVisibility() => new NProperty(nameof(NProperties.DetailsVisibility)).
        Property<DataGridRow>(DataGridRow.DetailsVisibilityProperty, NConverters.ToEnum<Visibility>);

    public static NProperty CreateDeviceFontName() => new NProperty(nameof(NProperties.DeviceFontName)).
        Property<Glyphs>(Glyphs.DeviceFontNameProperty, NConverters.ToString);

    public static NProperty CreateDiscretionaryLigatures() => new NProperty(nameof(NProperties.DiscretionaryLigatures)).
        Property<Typography>((t, v) => t.DiscretionaryLigatures = NConverters.ToBoolT(v));

    public static NProperty CreateDisplayDate() => new NProperty(nameof(NProperties.DisplayDate)).
        Property<Calendar>(Calendar.DisplayDateProperty).
        Property<DatePicker>(DatePicker.DisplayDateProperty);

    public static NProperty CreateDisplayDateChanged() => new NProperty(nameof(NProperties.DisplayDateChanged)).
        Event<Calendar>((s, a) => s.DisplayDateChanged += a.EventHandler);

    public static NProperty CreateDisplayDateEnd() => new NProperty(nameof(NProperties.DisplayDateEnd)).
        Property<Calendar>(Calendar.DisplayDateEndProperty).
        Property<DatePicker>(DatePicker.DisplayDateEndProperty);

    public static NProperty CreateDisplayDateStart() => new NProperty(nameof(NProperties.DisplayDateStart)).
        Property<Calendar>(Calendar.DisplayDateStartProperty).
        Property<DatePicker>(DatePicker.DisplayDateStartProperty);

    public static NProperty CreateDisplayMemberPath() => new NProperty(nameof(NProperties.DisplayMemberPath)).
        Property<ItemsControl>(ItemsControl.DisplayMemberPathProperty, NConverters.ToString);

    public static NProperty CreateDisplayMode() => new NProperty(nameof(NProperties.DisplayMode)).
        Property<Calendar>(Calendar.DisplayModeProperty, NConverters.ToEnum<CalendarMode>);

    public static NProperty CreateDisplayModeChanged() => new NProperty(nameof(NProperties.DisplayModeChanged)).
        Event<Calendar>((s, a) => s.DisplayModeChanged += a.EventHandler);

    public static NProperty CreateDockPanelDock() => new NProperty(nameof(NProperties.DockPanelDock)).
        Property<UIElement>(DockPanel.DockProperty, NConverters.ToEnum<Dock>);

    public static NProperty CreateDocument() => new NProperty(nameof(NProperties.Document)).
        Property<FlowDocumentReader>(FlowDocumentReader.DocumentProperty).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.DocumentProperty).
        Property<DocumentViewerBase>(DocumentViewerBase.DocumentProperty);

    public static NProperty CreateDocumentViewerBaseIsMasterPage() => new NProperty(nameof(NProperties.DocumentViewerBaseIsMasterPage)).
        Property<DependencyObject>(DocumentViewerBase.IsMasterPageProperty, NConverters.ToBool);

    public static NProperty CreateDpiChanged() => new NProperty(nameof(NProperties.DpiChanged)).
        Event<Window>(Window.DpiChangedEvent, a => (DpiChangedEventHandler)a.EventHandler).
        Event<Image>(Image.DpiChangedEvent, a => (DpiChangedEventHandler)a.EventHandler).
        Event<HwndHost>(HwndHost.DpiChangedEvent, a => (DpiChangedEventHandler)a.EventHandler);

    public static NProperty CreateDragCompleted() => new NProperty(nameof(NProperties.DragCompleted)).
        Event<Thumb>(Thumb.DragCompletedEvent, a => (DragCompletedEventHandler)a.EventHandler);

    public static NProperty CreateDragDelta() => new NProperty(nameof(NProperties.DragDelta)).
        Event<Thumb>(Thumb.DragDeltaEvent, a => (DragDeltaEventHandler)a.EventHandler);

    public static NProperty CreateDragEnter() => new NProperty(nameof(NProperties.DragEnter)).
        Event<UIElement>(UIElement.DragEnterEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreateDragIncrement() => new NProperty(nameof(NProperties.DragIncrement)).
        Property<GridSplitter>(GridSplitter.DragIncrementProperty, NConverters.ToDouble);

    public static NProperty CreateDragIndicatorStyle() => new NProperty(nameof(NProperties.DragIndicatorStyle)).
        Property<DataGrid>(DataGrid.DragIndicatorStyleProperty, NConverters.ToStyle);

    public static NProperty CreateDragLeave() => new NProperty(nameof(NProperties.DragLeave)).
        Event<UIElement>(UIElement.DragLeaveEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreateDragOver() => new NProperty(nameof(NProperties.DragOver)).
        Event<UIElement>(UIElement.DragOverEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreateDragStarted() => new NProperty(nameof(NProperties.DragStarted)).
        Event<Thumb>(Thumb.DragStartedEvent, a => (DragStartedEventHandler)a.EventHandler);

    public static NProperty CreateDrop() => new NProperty(nameof(NProperties.Drop)).
        Event<UIElement>(UIElement.DropEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreateDropDownClosed() => new NProperty(nameof(NProperties.DropDownClosed)).
        Event<ComboBox>((s, a) => s.DropDownClosed += a.EventHandler);

    public static NProperty CreateDropDownOpened() => new NProperty(nameof(NProperties.DropDownOpened)).
        Event<ComboBox>((s, a) => s.DropDownOpened += a.EventHandler);

    public static NProperty CreateDropLocationIndicatorStyle() => new NProperty(nameof(NProperties.DropLocationIndicatorStyle)).
        Property<DataGrid>(DataGrid.DropLocationIndicatorStyleProperty, NConverters.ToStyle);

    public static NProperty CreateEastAsianExpertForms() => new NProperty(nameof(NProperties.EastAsianExpertForms)).
        Property<Typography>((t, v) => t.EastAsianExpertForms = NConverters.ToBoolT(v));

    public static NProperty CreateEastAsianLanguage() => new NProperty(nameof(NProperties.EastAsianLanguage)).
        Property<Typography>((t, v) => t.EastAsianLanguage = NConverters.ToEnumT<FontEastAsianLanguage>(v));

    public static NProperty CreateEastAsianWidths() => new NProperty(nameof(NProperties.EastAsianWidths)).
        Property<Typography>((t, v) => t.EastAsianWidths = NConverters.ToEnumT<FontEastAsianWidths>(v));

    public static NProperty CreateEditingMode() => new NProperty(nameof(NProperties.EditingMode)).
        Property<InkCanvas>(InkCanvas.EditingModeProperty, NConverters.ToEnum<InkCanvasEditingMode>);

    public static NProperty CreateEditingModeChanged() => new NProperty(nameof(NProperties.EditingModeChanged)).
        Event<InkCanvas>(InkCanvas.EditingModeChangedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateEditingModeInverted() => new NProperty(nameof(NProperties.EditingModeInverted)).
        Property<InkCanvas>(InkCanvas.EditingModeInvertedProperty, NConverters.ToEnum<InkCanvasEditingMode>);

    public static NProperty CreateEditingModeInvertedChanged() => new NProperty(nameof(NProperties.EditingModeInvertedChanged)).
        Event<InkCanvas>(InkCanvas.EditingModeInvertedChangedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateEffect() => new NProperty(nameof(NProperties.Effect)).
        Property<UIElement>(UIElement.EffectProperty);

    public static NProperty CreateEnableColumnVirtualization() => new NProperty(nameof(NProperties.EnableColumnVirtualization)).
        Property<DataGrid>(DataGrid.EnableColumnVirtualizationProperty, NConverters.ToBool);

    public static NProperty CreateEnableRowVirtualization() => new NProperty(nameof(NProperties.EnableRowVirtualization)).
        Property<DataGrid>(DataGrid.EnableRowVirtualizationProperty, NConverters.ToBool);

    public static NProperty CreateExpandDirection() => new NProperty(nameof(NProperties.ExpandDirection)).
        Property<Expander>(Expander.ExpandDirectionProperty, NConverters.ToEnum<ExpandDirection>);

    public static NProperty CreateExpanded() => new NProperty(nameof(NProperties.Expanded)).
        Event<Expander>(Expander.ExpandedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<TreeViewItem>(TreeViewItem.ExpandedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateFill() => new NProperty(nameof(NProperties.Fill)).
        Property<Shape>(Shape.FillProperty, NConverters.ToBrush).
        Property<Glyphs>(Glyphs.FillProperty, NConverters.ToBrush).
        Property<TickBar>(TickBar.FillProperty, NConverters.ToBrush);

    public static NProperty CreateFillRule() => new NProperty(nameof(NProperties.FillRule)).
        Property<Polygon>(Polygon.FillRuleProperty, NConverters.ToEnum<FillRule>).
        Property<Polyline>(Polyline.FillRuleProperty, NConverters.ToEnum<FillRule>);

    public static NProperty CreateFirstColumn() => new NProperty(nameof(NProperties.FirstColumn)).
        Property<UniformGrid>(UniformGrid.FirstColumnProperty, NConverters.ToInt32);

    public static NProperty CreateFirstDayOfWeek() => new NProperty(nameof(NProperties.FirstDayOfWeek)).
        Property<Calendar>(Calendar.FirstDayOfWeekProperty, NConverters.ToEnum<DayOfWeek>).
        Property<DatePicker>(DatePicker.FirstDayOfWeekProperty, NConverters.ToEnum<DayOfWeek>);

    public static NProperty CreateFixedPageBottom() => new NProperty(nameof(NProperties.FixedPageBottom)).
        Property<UIElement>(FixedPage.BottomProperty, NConverters.ToDouble);

    public static NProperty CreateFixedPageLeft() => new NProperty(nameof(NProperties.FixedPageLeft)).
        Property<UIElement>(FixedPage.LeftProperty, NConverters.ToDouble);

    public static NProperty CreateFixedPageNavigateUri() => new NProperty(nameof(NProperties.FixedPageNavigateUri)).
        Property<UIElement>(FixedPage.NavigateUriProperty, NConverters.ToUri);

    public static NProperty CreateFixedPageRight() => new NProperty(nameof(NProperties.FixedPageRight)).
        Property<UIElement>(FixedPage.RightProperty, NConverters.ToDouble);

    public static NProperty CreateFixedPageTop() => new NProperty(nameof(NProperties.FixedPageTop)).
        Property<UIElement>(FixedPage.TopProperty, NConverters.ToDouble);

    public static NProperty CreateFlowDirection() => new NProperty(nameof(NProperties.FlowDirection)).
        Property<FrameworkElement>(FrameworkElement.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>).
        Property<Block>(Block.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>).
        Property<Inline>(Inline.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>).
        Property<ListItem>(ListItem.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>).
        Property<TableCell>(TableCell.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>);

    public static NProperty CreateFocusable() => new NProperty(nameof(NProperties.Focusable)).
        Property<UIElement>(UIElement.FocusableProperty, NConverters.ToBool);

    public static NProperty CreateFocusableChanged() => new NProperty(nameof(NProperties.FocusableChanged)).
        Event<UIElement>((s, a) => s.FocusableChanged += a.EventHandlerAny);

    public static NProperty CreateFocusVisualStyle() => new NProperty(nameof(NProperties.FocusVisualStyle)).
        Property<FrameworkElement>(FrameworkElement.FocusVisualStyleProperty, NConverters.ToStyle);

    public static NProperty CreateFontFamily() => new NProperty(nameof(NProperties.FontFamily)).
        Property<AccessText>(AccessText.FontFamilyProperty, NConverters.ToFontFamily).
        Property<Control>(Control.FontFamilyProperty, NConverters.ToFontFamily).
        Property<Page>(Page.FontFamilyProperty, NConverters.ToFontFamily).
        Property<TextBlock>(TextBlock.FontFamilyProperty, NConverters.ToFontFamily).
        Property<TextElement>(TextElement.FontFamilyProperty, NConverters.ToFontFamily);

    public static NProperty CreateFontRenderingEmSize() => new NProperty(nameof(NProperties.FontRenderingEmSize)).
        Property<Glyphs>(Glyphs.FontRenderingEmSizeProperty, NConverters.ToDouble);

    public static NProperty CreateFontSize() => new NProperty(nameof(NProperties.FontSize)).
        Property<AccessText>(AccessText.FontSizeProperty, NConverters.ToDouble).
        Property<Control>(Control.FontSizeProperty, NConverters.ToDouble).
        Property<Page>(Page.FontSizeProperty, NConverters.ToDouble).
        Property<TextBlock>(TextBlock.FontSizeProperty, NConverters.ToDouble).
        Property<TextElement>(TextElement.FontSizeProperty, NConverters.ToDouble);

    public static NProperty CreateFontStretch() => new NProperty(nameof(NProperties.FontStretch)).
        Property<AccessText>(AccessText.FontStretchProperty, NConverters.ToFontStretch).
        Property<Control>(Control.FontStretchProperty, NConverters.ToFontStretch).
        Property<TextBlock>(TextBlock.FontStretchProperty, NConverters.ToFontStretch).
        Property<TextElement>(TextElement.FontStretchProperty, NConverters.ToFontStretch);

    public static NProperty CreateFontStyle() => new NProperty(nameof(NProperties.FontStyle)).
        Property<AccessText>(AccessText.FontStyleProperty, NConverters.ToFontStyle).
        Property<Control>(Control.FontStyleProperty, NConverters.ToFontStyle).
        Property<TextBlock>(TextBlock.FontStyleProperty, NConverters.ToFontStyle).
        Property<TextElement>(TextElement.FontStyleProperty, NConverters.ToFontStyle);

    public static NProperty CreateFontUri() => new NProperty(nameof(NProperties.FontUri)).
        Property<Glyphs>(Glyphs.FontUriProperty, NConverters.ToUri);

    public static NProperty CreateFontWeight() => new NProperty(nameof(NProperties.FontWeight)).
        Property<AccessText>(AccessText.FontWeightProperty, NConverters.ToFontWeight).
        Property<Control>(Control.FontWeightProperty, NConverters.ToFontWeight).
        Property<TextBlock>(TextBlock.FontWeightProperty, NConverters.ToFontWeight).
        Property<TextElement>(TextElement.FontWeightProperty, NConverters.ToFontWeight);

    public static NProperty CreateForceCursor() => new NProperty(nameof(NProperties.ForceCursor)).
        Property<FrameworkElement>(FrameworkElement.ForceCursorProperty, NConverters.ToBool);

    public static NProperty CreateForeground() => new NProperty(nameof(NProperties.Foreground)).
        Property<AccessText>(AccessText.ForegroundProperty, NConverters.ToBrush).
        Property<Control>(Control.ForegroundProperty, NConverters.ToBrush).
        Property<Page>(Page.ForegroundProperty, NConverters.ToBrush).
        Property<TextBlock>(TextBlock.ForegroundProperty, NConverters.ToBrush).
        Property<TextElement>(TextElement.ForegroundProperty, NConverters.ToBrush);

    public static NProperty CreateFraction() => new NProperty(nameof(NProperties.Fraction)).
        Property<Typography>((t, v) => t.Fraction = NConverters.ToEnumT<FontFraction>(v));

    public static NProperty CreateFragmentNavigation() => new NProperty(nameof(NProperties.FragmentNavigation)).
        Event<NavigationWindow>((s, a) => s.FragmentNavigation += a.EventHandler).
        Event<Frame>((s, a) => s.FragmentNavigation += a.EventHandler);

    public static NProperty CreateFrameworkElementFlowDirection() => new NProperty(nameof(NProperties.FrameworkElementFlowDirection)).
        Property<DependencyObject>(FrameworkElement.FlowDirectionProperty, NConverters.ToEnum<FlowDirection>);

    public static NProperty CreateFrozenColumnCount() => new NProperty(nameof(NProperties.FrozenColumnCount)).
        Property<DataGrid>(DataGrid.FrozenColumnCountProperty, NConverters.ToInt32);

    public static NProperty CreateGesture() => new NProperty(nameof(NProperties.Gesture)).
        Event<InkCanvas>(InkCanvas.GestureEvent, a => (InkCanvasGestureEventHandler)a.EventHandler);

    public static NProperty CreateGetPageRootCompleted() => new NProperty(nameof(NProperties.GetPageRootCompleted)).
        Event<PageContent>((s, a) => s.GetPageRootCompleted += a.EventHandler);

    public static NProperty CreateGiveFeedback() => new NProperty(nameof(NProperties.GiveFeedback)).
        Event<UIElement>(UIElement.GiveFeedbackEvent, a => (GiveFeedbackEventHandler)a.EventHandler);

    public static NProperty CreateGotFocus() => new NProperty(nameof(NProperties.GotFocus)).
        Event<UIElement>(UIElement.GotFocusEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateGotKeyboardFocus() => new NProperty(nameof(NProperties.GotKeyboardFocus)).
        Event<UIElement>(UIElement.GotKeyboardFocusEvent, a => (KeyboardFocusChangedEventHandler)a.EventHandler);

    public static NProperty CreateGotMouseCapture() => new NProperty(nameof(NProperties.GotMouseCapture)).
        Event<UIElement>(UIElement.GotMouseCaptureEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreateGotStylusCapture() => new NProperty(nameof(NProperties.GotStylusCapture)).
        Event<UIElement>(UIElement.GotStylusCaptureEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateGotTouchCapture() => new NProperty(nameof(NProperties.GotTouchCapture)).
        Event<UIElement>(UIElement.GotTouchCaptureEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateGridColumn() => new NProperty(nameof(NProperties.GridColumn)).
        Property<UIElement>(Grid.ColumnProperty, NConverters.ToInt32);

    public static NProperty CreateGridColumnSpan() => new NProperty(nameof(NProperties.GridColumnSpan)).
        Property<UIElement>(Grid.ColumnSpanProperty, NConverters.ToInt32);

    public static NProperty CreateGridIsSharedSizeScope() => new NProperty(nameof(NProperties.GridIsSharedSizeScope)).
        Property<UIElement>(Grid.IsSharedSizeScopeProperty, NConverters.ToBool);

    public static NProperty CreateGridLinesVisibility() => new NProperty(nameof(NProperties.GridLinesVisibility)).
        Property<DataGrid>(DataGrid.GridLinesVisibilityProperty, NConverters.ToEnum<DataGridGridLinesVisibility>);

    public static NProperty CreateGridRow() => new NProperty(nameof(NProperties.GridRow)).
        Property<UIElement>(Grid.RowProperty, NConverters.ToInt32);

    public static NProperty CreateGridRowSpan() => new NProperty(nameof(NProperties.GridRowSpan)).
        Property<UIElement>(Grid.RowSpanProperty, NConverters.ToInt32);

    public static NProperty CreateGroupName() => new NProperty(nameof(NProperties.GroupName)).
        Property<RadioButton>(RadioButton.GroupNameProperty, NConverters.ToString);

    public static NProperty CreateGroupStyle() => new NProperty(nameof(NProperties.GroupStyle)).
        Property<ItemsControl>((t, v) => NPatch.AssignListT(t.GroupStyle, v));

    public static NProperty CreateGroupStyleSelector() => new NProperty(nameof(NProperties.GroupStyleSelector)).
        Property<ItemsControl>(ItemsControl.GroupStyleSelectorProperty);

    public static NProperty CreateHasDropShadow() => new NProperty(nameof(NProperties.HasDropShadow)).
        Property<ToolTip>(ToolTip.HasDropShadowProperty, NConverters.ToBool).
        Property<ContextMenu>(ContextMenu.HasDropShadowProperty, NConverters.ToBool);

    public static NProperty CreateHasTrailingParagraphBreakOnPaste() => new NProperty(nameof(NProperties.HasTrailingParagraphBreakOnPaste)).
        Property<Section>((t, v) => t.HasTrailingParagraphBreakOnPaste = NConverters.ToBoolT(v));

    public static NProperty CreateHeader() => new NProperty(nameof(NProperties.Header)).
        Property<HeaderedContentControl>(HeaderedContentControl.HeaderProperty).
        Property<DataGridRow>(DataGridRow.HeaderProperty).
        Property<HeaderedItemsControl>(HeaderedItemsControl.HeaderProperty);

    public static NProperty CreateHeaderStringFormat() => new NProperty(nameof(NProperties.HeaderStringFormat)).
        Property<HeaderedContentControl>(HeaderedContentControl.HeaderStringFormatProperty, NConverters.ToString).
        Property<HeaderedItemsControl>(HeaderedItemsControl.HeaderStringFormatProperty, NConverters.ToString);

    public static NProperty CreateHeaderStyle() => new NProperty(nameof(NProperties.HeaderStyle)).
        Property<DataGridRow>(DataGridRow.HeaderStyleProperty, NConverters.ToStyle);

    public static NProperty CreateHeadersVisibility() => new NProperty(nameof(NProperties.HeadersVisibility)).
        Property<DataGrid>(DataGrid.HeadersVisibilityProperty, NConverters.ToEnum<DataGridHeadersVisibility>);

    public static NProperty CreateHeaderTemplate() => new NProperty(nameof(NProperties.HeaderTemplate)).
        Property<HeaderedContentControl>(HeaderedContentControl.HeaderTemplateProperty, NConverters.ToDataTemplate).
        Property<DataGridRow>(DataGridRow.HeaderTemplateProperty, NConverters.ToDataTemplate).
        Property<HeaderedItemsControl>(HeaderedItemsControl.HeaderTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateHeaderTemplateSelector() => new NProperty(nameof(NProperties.HeaderTemplateSelector)).
        Property<HeaderedContentControl>(HeaderedContentControl.HeaderTemplateSelectorProperty).
        Property<DataGridRow>(DataGridRow.HeaderTemplateSelectorProperty).
        Property<HeaderedItemsControl>(HeaderedItemsControl.HeaderTemplateSelectorProperty);

    public static NProperty CreateHeight() => new NProperty(nameof(NProperties.Height)).
        Property<FrameworkElement>(FrameworkElement.HeightProperty, NConverters.ToLength).
        Property<Figure>(Figure.HeightProperty).
        Property<RowDefinition>(RowDefinition.HeightProperty, NConverters.ToGridLength);

    public static NProperty CreateHistoricalForms() => new NProperty(nameof(NProperties.HistoricalForms)).
        Property<Typography>((t, v) => t.HistoricalForms = NConverters.ToBoolT(v));

    public static NProperty CreateHistoricalLigatures() => new NProperty(nameof(NProperties.HistoricalLigatures)).
        Property<Typography>((t, v) => t.HistoricalLigatures = NConverters.ToBoolT(v));

    public static NProperty CreateHorizontalAlignment() => new NProperty(nameof(NProperties.HorizontalAlignment)).
        Property<FrameworkElement>(FrameworkElement.HorizontalAlignmentProperty, NConverters.ToEnum<HorizontalAlignment>).
        Property<Floater>(Floater.HorizontalAlignmentProperty, NConverters.ToEnum<HorizontalAlignment>);

    public static NProperty CreateHorizontalAnchor() => new NProperty(nameof(NProperties.HorizontalAnchor)).
        Property<Figure>(Figure.HorizontalAnchorProperty, NConverters.ToEnum<FigureHorizontalAnchor>);

    public static NProperty CreateHorizontalContentAlignment() => new NProperty(nameof(NProperties.HorizontalContentAlignment)).
        Property<Control>(Control.HorizontalContentAlignmentProperty, NConverters.ToEnum<HorizontalAlignment>);

    public static NProperty CreateHorizontalGridLinesBrush() => new NProperty(nameof(NProperties.HorizontalGridLinesBrush)).
        Property<DataGrid>(DataGrid.HorizontalGridLinesBrushProperty, NConverters.ToBrush);

    public static NProperty CreateHorizontalOffset() => new NProperty(nameof(NProperties.HorizontalOffset)).
        Property<ToolTip>(ToolTip.HorizontalOffsetProperty, NConverters.ToDouble).
        Property<ContextMenu>(ContextMenu.HorizontalOffsetProperty, NConverters.ToDouble).
        Property<DocumentViewer>(DocumentViewer.HorizontalOffsetProperty, NConverters.ToDouble).
        Property<Popup>(Popup.HorizontalOffsetProperty, NConverters.ToDouble).
        Property<Figure>(Figure.HorizontalOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateHorizontalPageSpacing() => new NProperty(nameof(NProperties.HorizontalPageSpacing)).
        Property<DocumentViewer>(DocumentViewer.HorizontalPageSpacingProperty, NConverters.ToDouble);

    public static NProperty CreateHorizontalScrollBarVisibility() => new NProperty(nameof(NProperties.HorizontalScrollBarVisibility)).
        Property<ScrollViewer>(ScrollViewer.HorizontalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.HorizontalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<DataGrid>(DataGrid.HorizontalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<TextBoxBase>(TextBoxBase.HorizontalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>);

    public static NProperty CreateIcon() => new NProperty(nameof(NProperties.Icon)).
        Property<Window>(Window.IconProperty, NConverters.ToImageSource).
        Property<MenuItem>(MenuItem.IconProperty);

    public static NProperty CreateImageFailed() => new NProperty(nameof(NProperties.ImageFailed)).
        Event<Image>(Image.ImageFailedEvent, a => (EventHandler<ExceptionRoutedEventArgs>)a.EventHandler);

    public static NProperty CreateIndeterminate() => new NProperty(nameof(NProperties.Indeterminate)).
        Event<ToggleButton>(ToggleButton.IndeterminateEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateIndices() => new NProperty(nameof(NProperties.Indices)).
        Property<Glyphs>(Glyphs.IndicesProperty, NConverters.ToString);

    public static NProperty CreateInitialized() => new NProperty(nameof(NProperties.Initialized)).
        Event<FrameworkElement>((s, a) => s.Initialized += a.EventHandler);

    public static NProperty CreateInitializingNewItem() => new NProperty(nameof(NProperties.InitializingNewItem)).
        Event<DataGrid>((s, a) => s.InitializingNewItem += a.EventHandler);

    public static NProperty CreateInkCanvasBottom() => new NProperty(nameof(NProperties.InkCanvasBottom)).
        Property<UIElement>(InkCanvas.BottomProperty, NConverters.ToDouble);

    public static NProperty CreateInkCanvasLeft() => new NProperty(nameof(NProperties.InkCanvasLeft)).
        Property<UIElement>(InkCanvas.LeftProperty, NConverters.ToDouble);

    public static NProperty CreateInkCanvasRight() => new NProperty(nameof(NProperties.InkCanvasRight)).
        Property<UIElement>(InkCanvas.RightProperty, NConverters.ToDouble);

    public static NProperty CreateInkCanvasTop() => new NProperty(nameof(NProperties.InkCanvasTop)).
        Property<UIElement>(InkCanvas.TopProperty, NConverters.ToDouble);

    public static NProperty CreateInlines() => new NProperty(nameof(NProperties.Inlines)).
        List<TextBlock>(t => t.Inlines).
        List<Paragraph>(t => t.Inlines).
        List<Span>(t => t.Inlines);

    public static NProperty CreateInputBindings() => new NProperty(nameof(NProperties.InputBindings)).
        List<UIElement>(t => t.InputBindings);

    public static NProperty CreateInputGestureText() => new NProperty(nameof(NProperties.InputGestureText)).
        Property<MenuItem>(MenuItem.InputGestureTextProperty, NConverters.ToString);

    public static NProperty CreateInputScope() => new NProperty(nameof(NProperties.InputScope)).
        Property<FrameworkElement>(FrameworkElement.InputScopeProperty);

    public static NProperty CreateInterval() => new NProperty(nameof(NProperties.Interval)).
        Property<RepeatButton>(RepeatButton.IntervalProperty, NConverters.ToInt32).
        Property<Slider>(Slider.IntervalProperty, NConverters.ToInt32);

    public static NProperty CreateIsCancel() => new NProperty(nameof(NProperties.IsCancel)).
        Property<Button>(Button.IsCancelProperty, NConverters.ToBool);

    public static NProperty CreateIsCheckable() => new NProperty(nameof(NProperties.IsCheckable)).
        Property<MenuItem>(MenuItem.IsCheckableProperty, NConverters.ToBool);

    public static NProperty CreateIsChecked() => new NProperty(nameof(NProperties.IsChecked)).
        Property<ToggleButton>(ToggleButton.IsCheckedProperty, NConverters.ToBoolN).
        Property<MenuItem>(MenuItem.IsCheckedProperty, NConverters.ToBool);

    public static NProperty CreateIsClipEnabled() => new NProperty(nameof(NProperties.IsClipEnabled)).
        Property<Adorner>((t, v) => t.IsClipEnabled = NConverters.ToBoolT(v));

    public static NProperty CreateIsDefault() => new NProperty(nameof(NProperties.IsDefault)).
        Property<Button>(Button.IsDefaultProperty, NConverters.ToBool);

    public static NProperty CreateIsDeferredScrollingEnabled() => new NProperty(nameof(NProperties.IsDeferredScrollingEnabled)).
        Property<ScrollViewer>(ScrollViewer.IsDeferredScrollingEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsDirectionReversed() => new NProperty(nameof(NProperties.IsDirectionReversed)).
        Property<Slider>(Slider.IsDirectionReversedProperty, NConverters.ToBool).
        Property<TickBar>(TickBar.IsDirectionReversedProperty, NConverters.ToBool).
        Property<Track>(Track.IsDirectionReversedProperty, NConverters.ToBool);

    public static NProperty CreateIsDocumentEnabled() => new NProperty(nameof(NProperties.IsDocumentEnabled)).
        Property<RichTextBox>(RichTextBox.IsDocumentEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsDropDownOpen() => new NProperty(nameof(NProperties.IsDropDownOpen)).
        Property<DatePicker>(DatePicker.IsDropDownOpenProperty, NConverters.ToBool).
        Property<ComboBox>(ComboBox.IsDropDownOpenProperty, NConverters.ToBool);

    public static NProperty CreateIsEditable() => new NProperty(nameof(NProperties.IsEditable)).
        Property<ComboBox>(ComboBox.IsEditableProperty, NConverters.ToBool);

    public static NProperty CreateIsEditing() => new NProperty(nameof(NProperties.IsEditing)).
        Property<DataGridCell>(DataGridCell.IsEditingProperty, NConverters.ToBool);

    public static NProperty CreateIsEnabled() => new NProperty(nameof(NProperties.IsEnabled)).
        Property<UIElement>(UIElement.IsEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsEnabledChanged() => new NProperty(nameof(NProperties.IsEnabledChanged)).
        Event<UIElement>((s, a) => s.IsEnabledChanged += a.EventHandlerAny);

    public static NProperty CreateIsExpanded() => new NProperty(nameof(NProperties.IsExpanded)).
        Property<StickyNoteControl>(StickyNoteControl.IsExpandedProperty, NConverters.ToBool).
        Property<Expander>(Expander.IsExpandedProperty, NConverters.ToBool).
        Property<TreeViewItem>(TreeViewItem.IsExpandedProperty, NConverters.ToBool);

    public static NProperty CreateIsFindEnabled() => new NProperty(nameof(NProperties.IsFindEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsFindEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsHitTestVisible() => new NProperty(nameof(NProperties.IsHitTestVisible)).
        Property<UIElement>(UIElement.IsHitTestVisibleProperty, NConverters.ToBool);

    public static NProperty CreateIsHitTestVisibleChanged() => new NProperty(nameof(NProperties.IsHitTestVisibleChanged)).
        Event<UIElement>((s, a) => s.IsHitTestVisibleChanged += a.EventHandlerAny);

    public static NProperty CreateIsHyphenationEnabled() => new NProperty(nameof(NProperties.IsHyphenationEnabled)).
        Property<TextBlock>(TextBlock.IsHyphenationEnabledProperty, NConverters.ToBool).
        Property<Block>(Block.IsHyphenationEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsInactiveSelectionHighlightEnabled() => new NProperty(nameof(NProperties.IsInactiveSelectionHighlightEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsInactiveSelectionHighlightEnabledProperty, NConverters.ToBool).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.IsInactiveSelectionHighlightEnabledProperty, NConverters.ToBool).
        Property<PasswordBox>(PasswordBox.IsInactiveSelectionHighlightEnabledProperty, NConverters.ToBool).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.IsInactiveSelectionHighlightEnabledProperty, NConverters.ToBool).
        Property<TextBoxBase>(TextBoxBase.IsInactiveSelectionHighlightEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsIndeterminate() => new NProperty(nameof(NProperties.IsIndeterminate)).
        Property<ProgressBar>(ProgressBar.IsIndeterminateProperty, NConverters.ToBool);

    public static NProperty CreateIsItemsHost() => new NProperty(nameof(NProperties.IsItemsHost)).
        Property<Panel>(Panel.IsItemsHostProperty, NConverters.ToBool);

    public static NProperty CreateIsKeyboardFocusedChanged() => new NProperty(nameof(NProperties.IsKeyboardFocusedChanged)).
        Event<UIElement>((s, a) => s.IsKeyboardFocusedChanged += a.EventHandlerAny);

    public static NProperty CreateIsKeyboardFocusWithinChanged() => new NProperty(nameof(NProperties.IsKeyboardFocusWithinChanged)).
        Event<UIElement>((s, a) => s.IsKeyboardFocusWithinChanged += a.EventHandlerAny);

    public static NProperty CreateIsLocked() => new NProperty(nameof(NProperties.IsLocked)).
        Property<ToolBarTray>(ToolBarTray.IsLockedProperty, NConverters.ToBool);

    public static NProperty CreateIsMainMenu() => new NProperty(nameof(NProperties.IsMainMenu)).
        Property<Menu>(Menu.IsMainMenuProperty, NConverters.ToBool);

    public static NProperty CreateIsManipulationEnabled() => new NProperty(nameof(NProperties.IsManipulationEnabled)).
        Property<UIElement>(UIElement.IsManipulationEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsMouseCapturedChanged() => new NProperty(nameof(NProperties.IsMouseCapturedChanged)).
        Event<UIElement>((s, a) => s.IsMouseCapturedChanged += a.EventHandlerAny);

    public static NProperty CreateIsMouseCaptureWithinChanged() => new NProperty(nameof(NProperties.IsMouseCaptureWithinChanged)).
        Event<UIElement>((s, a) => s.IsMouseCaptureWithinChanged += a.EventHandlerAny);

    public static NProperty CreateIsMouseDirectlyOverChanged() => new NProperty(nameof(NProperties.IsMouseDirectlyOverChanged)).
        Event<UIElement>((s, a) => s.IsMouseDirectlyOverChanged += a.EventHandlerAny);

    public static NProperty CreateIsMoveToPointEnabled() => new NProperty(nameof(NProperties.IsMoveToPointEnabled)).
        Property<Slider>(Slider.IsMoveToPointEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsMuted() => new NProperty(nameof(NProperties.IsMuted)).
        Property<MediaElement>(MediaElement.IsMutedProperty, NConverters.ToBool);

    public static NProperty CreateIsOpen() => new NProperty(nameof(NProperties.IsOpen)).
        Property<ToolTip>(ToolTip.IsOpenProperty, NConverters.ToBool).
        Property<ContextMenu>(ContextMenu.IsOpenProperty, NConverters.ToBool).
        Property<Popup>(Popup.IsOpenProperty, NConverters.ToBool);

    public static NProperty CreateIsOverflowOpen() => new NProperty(nameof(NProperties.IsOverflowOpen)).
        Property<ToolBar>(ToolBar.IsOverflowOpenProperty, NConverters.ToBool);

    public static NProperty CreateIsPageViewEnabled() => new NProperty(nameof(NProperties.IsPageViewEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsPageViewEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsPrintEnabled() => new NProperty(nameof(NProperties.IsPrintEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsPrintEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsReadOnly() => new NProperty(nameof(NProperties.IsReadOnly)).
        Property<ComboBox>(ComboBox.IsReadOnlyProperty, NConverters.ToBool).
        Property<DataGrid>(DataGrid.IsReadOnlyProperty, NConverters.ToBool).
        Property<TextBoxBase>(TextBoxBase.IsReadOnlyProperty, NConverters.ToBool);

    public static NProperty CreateIsReadOnlyCaretVisible() => new NProperty(nameof(NProperties.IsReadOnlyCaretVisible)).
        Property<TextBoxBase>(TextBoxBase.IsReadOnlyCaretVisibleProperty, NConverters.ToBool);

    public static NProperty CreateIsScrollViewEnabled() => new NProperty(nameof(NProperties.IsScrollViewEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsScrollViewEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsSelected() => new NProperty(nameof(NProperties.IsSelected)).
        Property<DataGridCell>(DataGridCell.IsSelectedProperty, NConverters.ToBool).
        Property<TabItem>(TabItem.IsSelectedProperty, NConverters.ToBool).
        Property<ListBoxItem>(ListBoxItem.IsSelectedProperty, NConverters.ToBool).
        Property<DataGridRow>(DataGridRow.IsSelectedProperty, NConverters.ToBool).
        Property<TreeViewItem>(TreeViewItem.IsSelectedProperty, NConverters.ToBool);

    public static NProperty CreateIsSelectionEnabled() => new NProperty(nameof(NProperties.IsSelectionEnabled)).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.IsSelectionEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsSelectionRangeEnabled() => new NProperty(nameof(NProperties.IsSelectionRangeEnabled)).
        Property<Slider>(Slider.IsSelectionRangeEnabledProperty, NConverters.ToBool).
        Property<TickBar>(TickBar.IsSelectionRangeEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsSideways() => new NProperty(nameof(NProperties.IsSideways)).
        Property<Glyphs>(Glyphs.IsSidewaysProperty, NConverters.ToBool);

    public static NProperty CreateIsSnapToTickEnabled() => new NProperty(nameof(NProperties.IsSnapToTickEnabled)).
        Property<Slider>(Slider.IsSnapToTickEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsStylusCapturedChanged() => new NProperty(nameof(NProperties.IsStylusCapturedChanged)).
        Event<UIElement>((s, a) => s.IsStylusCapturedChanged += a.EventHandlerAny);

    public static NProperty CreateIsStylusCaptureWithinChanged() => new NProperty(nameof(NProperties.IsStylusCaptureWithinChanged)).
        Event<UIElement>((s, a) => s.IsStylusCaptureWithinChanged += a.EventHandlerAny);

    public static NProperty CreateIsStylusDirectlyOverChanged() => new NProperty(nameof(NProperties.IsStylusDirectlyOverChanged)).
        Event<UIElement>((s, a) => s.IsStylusDirectlyOverChanged += a.EventHandlerAny);

    public static NProperty CreateIsSubmenuOpen() => new NProperty(nameof(NProperties.IsSubmenuOpen)).
        Property<MenuItem>(MenuItem.IsSubmenuOpenProperty, NConverters.ToBool);

    public static NProperty CreateIsSynchronizedWithCurrentItem() => new NProperty(nameof(NProperties.IsSynchronizedWithCurrentItem)).
        Property<Selector>(Selector.IsSynchronizedWithCurrentItemProperty, NConverters.ToBoolN);

    public static NProperty CreateIsTabStop() => new NProperty(nameof(NProperties.IsTabStop)).
        Property<Control>(Control.IsTabStopProperty, NConverters.ToBool);

    public static NProperty CreateIsTextSearchCaseSensitive() => new NProperty(nameof(NProperties.IsTextSearchCaseSensitive)).
        Property<ItemsControl>(ItemsControl.IsTextSearchCaseSensitiveProperty, NConverters.ToBool);

    public static NProperty CreateIsTextSearchEnabled() => new NProperty(nameof(NProperties.IsTextSearchEnabled)).
        Property<ItemsControl>(ItemsControl.IsTextSearchEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsThreeState() => new NProperty(nameof(NProperties.IsThreeState)).
        Property<ToggleButton>(ToggleButton.IsThreeStateProperty, NConverters.ToBool);

    public static NProperty CreateIsTodayHighlighted() => new NProperty(nameof(NProperties.IsTodayHighlighted)).
        Property<Calendar>(Calendar.IsTodayHighlightedProperty, NConverters.ToBool).
        Property<DatePicker>(DatePicker.IsTodayHighlightedProperty, NConverters.ToBool);

    public static NProperty CreateIsToolBarVisible() => new NProperty(nameof(NProperties.IsToolBarVisible)).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.IsToolBarVisibleProperty, NConverters.ToBool);

    public static NProperty CreateIsTwoPageViewEnabled() => new NProperty(nameof(NProperties.IsTwoPageViewEnabled)).
        Property<FlowDocumentReader>(FlowDocumentReader.IsTwoPageViewEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsUndoEnabled() => new NProperty(nameof(NProperties.IsUndoEnabled)).
        Property<TextBoxBase>(TextBoxBase.IsUndoEnabledProperty, NConverters.ToBool);

    public static NProperty CreateIsVisibleChanged() => new NProperty(nameof(NProperties.IsVisibleChanged)).
        Event<UIElement>((s, a) => s.IsVisibleChanged += a.EventHandlerAny);

    public static NProperty CreateItem() => new NProperty(nameof(NProperties.Item)).
        Property<DataGridRow>(DataGridRow.ItemProperty);

    public static NProperty CreateItemBindingGroup() => new NProperty(nameof(NProperties.ItemBindingGroup)).
        Property<ItemsControl>(ItemsControl.ItemBindingGroupProperty);

    public static NProperty CreateItemContainerStyle() => new NProperty(nameof(NProperties.ItemContainerStyle)).
        Property<ItemsControl>(ItemsControl.ItemContainerStyleProperty, NConverters.ToStyle);

    public static NProperty CreateItemContainerStyleSelector() => new NProperty(nameof(NProperties.ItemContainerStyleSelector)).
        Property<ItemsControl>(ItemsControl.ItemContainerStyleSelectorProperty);

    public static NProperty CreateItemContainerTemplateSelector() => new NProperty(nameof(NProperties.ItemContainerTemplateSelector)).
        Property<MenuItem>(MenuItem.ItemContainerTemplateSelectorProperty).
        Property<MenuBase>(MenuBase.ItemContainerTemplateSelectorProperty).
        Property<StatusBar>(StatusBar.ItemContainerTemplateSelectorProperty);

    public static NProperty CreateItemHeight() => new NProperty(nameof(NProperties.ItemHeight)).
        Property<WrapPanel>(WrapPanel.ItemHeightProperty, NConverters.ToDouble);

    public static NProperty CreateItems() => new NProperty(nameof(NProperties.Items)).
        List<ItemsControl>(t => t.Items);

    public static NProperty CreateItemsPanel() => new NProperty(nameof(NProperties.ItemsPanel)).
        Property<DataGridRow>(DataGridRow.ItemsPanelProperty).
        Property<ItemsControl>(ItemsControl.ItemsPanelProperty);

    public static NProperty CreateItemsSource() => new NProperty(nameof(NProperties.ItemsSource)).
        Property<ItemsControl>(ItemsControl.ItemsSourceProperty);

    public static NProperty CreateItemStringFormat() => new NProperty(nameof(NProperties.ItemStringFormat)).
        Property<ItemsControl>(ItemsControl.ItemStringFormatProperty, NConverters.ToString);

    public static NProperty CreateItemTemplate() => new NProperty(nameof(NProperties.ItemTemplate)).
        Property<ItemsControl>(ItemsControl.ItemTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateItemTemplateSelector() => new NProperty(nameof(NProperties.ItemTemplateSelector)).
        Property<ItemsControl>(ItemsControl.ItemTemplateSelectorProperty);

    public static NProperty CreateItemWidth() => new NProperty(nameof(NProperties.ItemWidth)).
        Property<WrapPanel>(WrapPanel.ItemWidthProperty, NConverters.ToDouble);

    public static NProperty CreateJournalOwnership() => new NProperty(nameof(NProperties.JournalOwnership)).
        Property<Frame>(Frame.JournalOwnershipProperty, NConverters.ToEnum<JournalOwnership>);

    public static NProperty CreateKeepAlive() => new NProperty(nameof(NProperties.KeepAlive)).
        Property<Page>(Page.KeepAliveProperty, NConverters.ToBool);

    public static NProperty CreateKeepTogether() => new NProperty(nameof(NProperties.KeepTogether)).
        Property<Paragraph>(Paragraph.KeepTogetherProperty, NConverters.ToBool);

    public static NProperty CreateKeepWithNext() => new NProperty(nameof(NProperties.KeepWithNext)).
        Property<Paragraph>(Paragraph.KeepWithNextProperty, NConverters.ToBool);

    public static NProperty CreateKerning() => new NProperty(nameof(NProperties.Kerning)).
        Property<Typography>((t, v) => t.Kerning = NConverters.ToBoolT(v));

    public static NProperty CreateKeyboardIncrement() => new NProperty(nameof(NProperties.KeyboardIncrement)).
        Property<GridSplitter>(GridSplitter.KeyboardIncrementProperty, NConverters.ToDouble);

    public static NProperty CreateKeyDown() => new NProperty(nameof(NProperties.KeyDown)).
        Event<UIElement>(UIElement.KeyDownEvent, a => (KeyEventHandler)a.EventHandler);

    public static NProperty CreateKeyUp() => new NProperty(nameof(NProperties.KeyUp)).
        Event<UIElement>(UIElement.KeyUpEvent, a => (KeyEventHandler)a.EventHandler);

    public static NProperty CreateLanguage() => new NProperty(nameof(NProperties.Language)).
        Property<FrameworkElement>(FrameworkElement.LanguageProperty, NConverters.ToLanguage);

    public static NProperty CreateLargeChange() => new NProperty(nameof(NProperties.LargeChange)).
        Property<RangeBase>(RangeBase.LargeChangeProperty, NConverters.ToDouble);

    public static NProperty CreateLastChildFill() => new NProperty(nameof(NProperties.LastChildFill)).
        Property<DockPanel>(DockPanel.LastChildFillProperty, NConverters.ToBool);

    public static NProperty CreateLayoutTransform() => new NProperty(nameof(NProperties.LayoutTransform)).
        Property<FrameworkElement>(FrameworkElement.LayoutTransformProperty);

    public static NProperty CreateLayoutUpdated() => new NProperty(nameof(NProperties.LayoutUpdated)).
        Event<UIElement>((s, a) => s.LayoutUpdated += a.EventHandler);

    public static NProperty CreateLeft() => new NProperty(nameof(NProperties.Left)).
        Property<Window>(Window.LeftProperty, NConverters.ToDouble);

    public static NProperty CreateLineHeight() => new NProperty(nameof(NProperties.LineHeight)).
        Property<AccessText>(AccessText.LineHeightProperty, NConverters.ToDouble).
        Property<TextBlock>(TextBlock.LineHeightProperty, NConverters.ToDouble).
        Property<Block>(Block.LineHeightProperty, NConverters.ToDouble).
        Property<AnchoredBlock>(AnchoredBlock.LineHeightProperty, NConverters.ToDouble).
        Property<ListItem>(ListItem.LineHeightProperty, NConverters.ToDouble).
        Property<TableCell>(TableCell.LineHeightProperty, NConverters.ToDouble);

    public static NProperty CreateLineStackingStrategy() => new NProperty(nameof(NProperties.LineStackingStrategy)).
        Property<AccessText>(AccessText.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>).
        Property<TextBlock>(TextBlock.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>).
        Property<Block>(Block.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>).
        Property<AnchoredBlock>(AnchoredBlock.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>).
        Property<ListItem>(ListItem.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>).
        Property<TableCell>(TableCell.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>);

    public static NProperty CreateLinkTargets() => new NProperty(nameof(NProperties.LinkTargets)).
        List<PageContent>(t => t.LinkTargets);

    public static NProperty CreateListItems() => new NProperty(nameof(NProperties.ListItems)).
        List<List>(t => t.ListItems);

    public static NProperty CreateLoadCompleted() => new NProperty(nameof(NProperties.LoadCompleted)).
        Event<NavigationWindow>((s, a) => s.LoadCompleted += a.EventHandler).
        Event<Frame>((s, a) => s.LoadCompleted += a.EventHandler).
        Event<WebBrowser>((s, a) => s.LoadCompleted += a.EventHandler);

    public static NProperty CreateLoaded() => new NProperty(nameof(NProperties.Loaded)).
        Event<FrameworkElement>(FrameworkElement.LoadedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateLoadedBehavior() => new NProperty(nameof(NProperties.LoadedBehavior)).
        Property<MediaElement>(MediaElement.LoadedBehaviorProperty, NConverters.ToEnum<MediaState>);

    public static NProperty CreateLoadingRow() => new NProperty(nameof(NProperties.LoadingRow)).
        Event<DataGrid>((s, a) => s.LoadingRow += a.EventHandler);

    public static NProperty CreateLoadingRowDetails() => new NProperty(nameof(NProperties.LoadingRowDetails)).
        Event<DataGrid>((s, a) => s.LoadingRowDetails += a.EventHandler);

    public static NProperty CreateLocationChanged() => new NProperty(nameof(NProperties.LocationChanged)).
        Event<Window>((s, a) => s.LocationChanged += a.EventHandler);

    public static NProperty CreateLostFocus() => new NProperty(nameof(NProperties.LostFocus)).
        Event<UIElement>(UIElement.LostFocusEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateLostKeyboardFocus() => new NProperty(nameof(NProperties.LostKeyboardFocus)).
        Event<UIElement>(UIElement.LostKeyboardFocusEvent, a => (KeyboardFocusChangedEventHandler)a.EventHandler);

    public static NProperty CreateLostMouseCapture() => new NProperty(nameof(NProperties.LostMouseCapture)).
        Event<UIElement>(UIElement.LostMouseCaptureEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreateLostStylusCapture() => new NProperty(nameof(NProperties.LostStylusCapture)).
        Event<UIElement>(UIElement.LostStylusCaptureEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateLostTouchCapture() => new NProperty(nameof(NProperties.LostTouchCapture)).
        Event<UIElement>(UIElement.LostTouchCaptureEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationBoundaryFeedback() => new NProperty(nameof(NProperties.ManipulationBoundaryFeedback)).
        Event<UIElement>(UIElement.ManipulationBoundaryFeedbackEvent, a => (EventHandler<ManipulationBoundaryFeedbackEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationCompleted() => new NProperty(nameof(NProperties.ManipulationCompleted)).
        Event<UIElement>(UIElement.ManipulationCompletedEvent, a => (EventHandler<ManipulationCompletedEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationDelta() => new NProperty(nameof(NProperties.ManipulationDelta)).
        Event<UIElement>(UIElement.ManipulationDeltaEvent, a => (EventHandler<ManipulationDeltaEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationInertiaStarting() => new NProperty(nameof(NProperties.ManipulationInertiaStarting)).
        Event<UIElement>(UIElement.ManipulationInertiaStartingEvent, a => (EventHandler<ManipulationInertiaStartingEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationStarted() => new NProperty(nameof(NProperties.ManipulationStarted)).
        Event<UIElement>(UIElement.ManipulationStartedEvent, a => (EventHandler<ManipulationStartedEventArgs>)a.EventHandler);

    public static NProperty CreateManipulationStarting() => new NProperty(nameof(NProperties.ManipulationStarting)).
        Event<UIElement>(UIElement.ManipulationStartingEvent, a => (EventHandler<ManipulationStartingEventArgs>)a.EventHandler);

    public static NProperty CreateMargin() => new NProperty(nameof(NProperties.Margin)).
        Property<FrameworkElement>(FrameworkElement.MarginProperty, NConverters.ToThickness).
        Property<Block>(Block.MarginProperty, NConverters.ToThickness).
        Property<AnchoredBlock>(AnchoredBlock.MarginProperty, NConverters.ToThickness).
        Property<ListItem>(ListItem.MarginProperty, NConverters.ToThickness);

    public static NProperty CreateMarkerOffset() => new NProperty(nameof(NProperties.MarkerOffset)).
        Property<List>(List.MarkerOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateMarkerStyle() => new NProperty(nameof(NProperties.MarkerStyle)).
        Property<List>(List.MarkerStyleProperty, NConverters.ToEnum<TextMarkerStyle>);

    public static NProperty CreateMathematicalGreek() => new NProperty(nameof(NProperties.MathematicalGreek)).
        Property<Typography>((t, v) => t.MathematicalGreek = NConverters.ToBoolT(v));

    public static NProperty CreateMaxColumnWidth() => new NProperty(nameof(NProperties.MaxColumnWidth)).
        Property<DataGrid>(DataGrid.MaxColumnWidthProperty, NConverters.ToDouble);

    public static NProperty CreateMaxDropDownHeight() => new NProperty(nameof(NProperties.MaxDropDownHeight)).
        Property<ComboBox>(ComboBox.MaxDropDownHeightProperty, NConverters.ToDouble);

    public static NProperty CreateMaxHeight() => new NProperty(nameof(NProperties.MaxHeight)).
        Property<FrameworkElement>(FrameworkElement.MaxHeightProperty, NConverters.ToDouble).
        Property<RowDefinition>(RowDefinition.MaxHeightProperty, NConverters.ToDouble);

    public static NProperty CreateMaximum() => new NProperty(nameof(NProperties.Maximum)).
        Property<RangeBase>(RangeBase.MaximumProperty, NConverters.ToDouble).
        Property<TickBar>(TickBar.MaximumProperty, NConverters.ToDouble).
        Property<Track>(Track.MaximumProperty, NConverters.ToDouble);

    public static NProperty CreateMaxLength() => new NProperty(nameof(NProperties.MaxLength)).
        Property<PasswordBox>(PasswordBox.MaxLengthProperty, NConverters.ToInt32).
        Property<TextBox>(TextBox.MaxLengthProperty, NConverters.ToInt32);

    public static NProperty CreateMaxLines() => new NProperty(nameof(NProperties.MaxLines)).
        Property<TextBox>(TextBox.MaxLinesProperty, NConverters.ToInt32);

    public static NProperty CreateMaxPagesAcross() => new NProperty(nameof(NProperties.MaxPagesAcross)).
        Property<DocumentViewer>(DocumentViewer.MaxPagesAcrossProperty, NConverters.ToInt32);

    public static NProperty CreateMaxWidth() => new NProperty(nameof(NProperties.MaxWidth)).
        Property<FrameworkElement>(FrameworkElement.MaxWidthProperty, NConverters.ToDouble).
        Property<ColumnDefinition>(ColumnDefinition.MaxWidthProperty, NConverters.ToDouble);

    public static NProperty CreateMaxZoom() => new NProperty(nameof(NProperties.MaxZoom)).
        Property<FlowDocumentReader>(FlowDocumentReader.MaxZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.MaxZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.MaxZoomProperty, NConverters.ToDouble);

    public static NProperty CreateMediaEnded() => new NProperty(nameof(NProperties.MediaEnded)).
        Event<MediaElement>(MediaElement.MediaEndedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateMediaFailed() => new NProperty(nameof(NProperties.MediaFailed)).
        Event<MediaElement>(MediaElement.MediaFailedEvent, a => (EventHandler<ExceptionRoutedEventArgs>)a.EventHandler);

    public static NProperty CreateMediaOpened() => new NProperty(nameof(NProperties.MediaOpened)).
        Event<MediaElement>(MediaElement.MediaOpenedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateMinColumnWidth() => new NProperty(nameof(NProperties.MinColumnWidth)).
        Property<DataGrid>(DataGrid.MinColumnWidthProperty, NConverters.ToDouble);

    public static NProperty CreateMinHeight() => new NProperty(nameof(NProperties.MinHeight)).
        Property<FrameworkElement>(FrameworkElement.MinHeightProperty, NConverters.ToDouble).
        Property<RowDefinition>(RowDefinition.MinHeightProperty, NConverters.ToDouble);

    public static NProperty CreateMinimum() => new NProperty(nameof(NProperties.Minimum)).
        Property<RangeBase>(RangeBase.MinimumProperty, NConverters.ToDouble).
        Property<TickBar>(TickBar.MinimumProperty, NConverters.ToDouble).
        Property<Track>(Track.MinimumProperty, NConverters.ToDouble);

    public static NProperty CreateMinLines() => new NProperty(nameof(NProperties.MinLines)).
        Property<TextBox>(TextBox.MinLinesProperty, NConverters.ToInt32);

    public static NProperty CreateMinOrphanLines() => new NProperty(nameof(NProperties.MinOrphanLines)).
        Property<Paragraph>(Paragraph.MinOrphanLinesProperty, NConverters.ToInt32);

    public static NProperty CreateMinRowHeight() => new NProperty(nameof(NProperties.MinRowHeight)).
        Property<DataGrid>(DataGrid.MinRowHeightProperty, NConverters.ToDouble);

    public static NProperty CreateMinWidowLines() => new NProperty(nameof(NProperties.MinWidowLines)).
        Property<Paragraph>(Paragraph.MinWidowLinesProperty, NConverters.ToInt32);

    public static NProperty CreateMinWidth() => new NProperty(nameof(NProperties.MinWidth)).
        Property<FrameworkElement>(FrameworkElement.MinWidthProperty, NConverters.ToDouble).
        Property<ColumnDefinition>(ColumnDefinition.MinWidthProperty, NConverters.ToDouble);

    public static NProperty CreateMinZoom() => new NProperty(nameof(NProperties.MinZoom)).
        Property<FlowDocumentReader>(FlowDocumentReader.MinZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.MinZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.MinZoomProperty, NConverters.ToDouble);

    public static NProperty CreateMouseDoubleClick() => new NProperty(nameof(NProperties.MouseDoubleClick)).
        Event<Control>(Control.MouseDoubleClickEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseDown() => new NProperty(nameof(NProperties.MouseDown)).
        Event<UIElement>(UIElement.MouseDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseEnter() => new NProperty(nameof(NProperties.MouseEnter)).
        Event<UIElement>(UIElement.MouseEnterEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreateMouseLeave() => new NProperty(nameof(NProperties.MouseLeave)).
        Event<UIElement>(UIElement.MouseLeaveEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreateMouseLeftButtonDown() => new NProperty(nameof(NProperties.MouseLeftButtonDown)).
        Event<UIElement>(UIElement.MouseLeftButtonDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseLeftButtonUp() => new NProperty(nameof(NProperties.MouseLeftButtonUp)).
        Event<UIElement>(UIElement.MouseLeftButtonUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseMove() => new NProperty(nameof(NProperties.MouseMove)).
        Event<UIElement>(UIElement.MouseMoveEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreateMouseRightButtonDown() => new NProperty(nameof(NProperties.MouseRightButtonDown)).
        Event<UIElement>(UIElement.MouseRightButtonDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseRightButtonUp() => new NProperty(nameof(NProperties.MouseRightButtonUp)).
        Event<UIElement>(UIElement.MouseRightButtonUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseUp() => new NProperty(nameof(NProperties.MouseUp)).
        Event<UIElement>(UIElement.MouseUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreateMouseWheel() => new NProperty(nameof(NProperties.MouseWheel)).
        Event<UIElement>(UIElement.MouseWheelEvent, a => (MouseWheelEventHandler)a.EventHandler);

    public static NProperty CreateMoveEnabled() => new NProperty(nameof(NProperties.MoveEnabled)).
        Property<InkCanvas>((t, v) => t.MoveEnabled = NConverters.ToBoolT(v));

    public static NProperty CreateName() => new NProperty(nameof(NProperties.Name)).
        Property<FrameworkElement>(FrameworkElement.NameProperty, NConverters.ToString);

    public static NProperty CreateNavigated() => new NProperty(nameof(NProperties.Navigated)).
        Event<NavigationWindow>((s, a) => s.Navigated += a.EventHandler).
        Event<Frame>((s, a) => s.Navigated += a.EventHandler).
        Event<WebBrowser>((s, a) => s.Navigated += a.EventHandler);

    public static NProperty CreateNavigateUri() => new NProperty(nameof(NProperties.NavigateUri)).
        Property<Hyperlink>(Hyperlink.NavigateUriProperty, NConverters.ToUri);

    public static NProperty CreateNavigating() => new NProperty(nameof(NProperties.Navigating)).
        Event<NavigationWindow>((s, a) => s.Navigating += a.EventHandler).
        Event<Frame>((s, a) => s.Navigating += a.EventHandler).
        Event<WebBrowser>((s, a) => s.Navigating += a.EventHandler);

    public static NProperty CreateNavigationFailed() => new NProperty(nameof(NProperties.NavigationFailed)).
        Event<NavigationWindow>((s, a) => s.NavigationFailed += a.EventHandler).
        Event<Frame>((s, a) => s.NavigationFailed += a.EventHandler);

    public static NProperty CreateNavigationProgress() => new NProperty(nameof(NProperties.NavigationProgress)).
        Event<NavigationWindow>((s, a) => s.NavigationProgress += a.EventHandler).
        Event<Frame>((s, a) => s.NavigationProgress += a.EventHandler);

    public static NProperty CreateNavigationStopped() => new NProperty(nameof(NProperties.NavigationStopped)).
        Event<NavigationWindow>((s, a) => s.NavigationStopped += a.EventHandler).
        Event<Frame>((s, a) => s.NavigationStopped += a.EventHandler);

    public static NProperty CreateNavigationUIVisibility() => new NProperty(nameof(NProperties.NavigationUIVisibility)).
        Property<Frame>(Frame.NavigationUIVisibilityProperty, NConverters.ToEnum<NavigationUIVisibility>);

    public static NProperty CreateNumeralAlignment() => new NProperty(nameof(NProperties.NumeralAlignment)).
        Property<Typography>((t, v) => t.NumeralAlignment = NConverters.ToEnumT<FontNumeralAlignment>(v));

    public static NProperty CreateNumeralStyle() => new NProperty(nameof(NProperties.NumeralStyle)).
        Property<Typography>((t, v) => t.NumeralStyle = NConverters.ToEnumT<FontNumeralStyle>(v));

    public static NProperty CreateOpacity() => new NProperty(nameof(NProperties.Opacity)).
        Property<UIElement>(UIElement.OpacityProperty, NConverters.ToDouble);

    public static NProperty CreateOpacityMask() => new NProperty(nameof(NProperties.OpacityMask)).
        Property<UIElement>(UIElement.OpacityMaskProperty, NConverters.ToBrush);

    public static NProperty CreateOpened() => new NProperty(nameof(NProperties.Opened)).
        Event<ToolTip>(ToolTip.OpenedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<ContextMenu>(ContextMenu.OpenedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<Popup>((s, a) => s.Opened += a.EventHandler);

    public static NProperty CreateOrientation() => new NProperty(nameof(NProperties.Orientation)).
        Property<ProgressBar>(ProgressBar.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<Slider>(Slider.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<ScrollBar>(ScrollBar.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<StackPanel>(StackPanel.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<VirtualizingStackPanel>(VirtualizingStackPanel.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<WrapPanel>(WrapPanel.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<ToolBarTray>(ToolBarTray.OrientationProperty, NConverters.ToEnum<Orientation>).
        Property<Track>(Track.OrientationProperty, NConverters.ToEnum<Orientation>);

    public static NProperty CreateOriginX() => new NProperty(nameof(NProperties.OriginX)).
        Property<Glyphs>(Glyphs.OriginXProperty, NConverters.ToDouble);

    public static NProperty CreateOriginY() => new NProperty(nameof(NProperties.OriginY)).
        Property<Glyphs>(Glyphs.OriginYProperty, NConverters.ToDouble);

    public static NProperty CreateOverridesDefaultStyle() => new NProperty(nameof(NProperties.OverridesDefaultStyle)).
        Property<FrameworkElement>(FrameworkElement.OverridesDefaultStyleProperty, NConverters.ToBool);

    public static NProperty CreatePadding() => new NProperty(nameof(NProperties.Padding)).
        Property<Control>(Control.PaddingProperty, NConverters.ToThickness).
        Property<Border>(Border.PaddingProperty, NConverters.ToThickness).
        Property<TextBlock>(TextBlock.PaddingProperty, NConverters.ToThickness).
        Property<Block>(Block.PaddingProperty, NConverters.ToThickness).
        Property<AnchoredBlock>(AnchoredBlock.PaddingProperty, NConverters.ToThickness).
        Property<ListItem>(ListItem.PaddingProperty, NConverters.ToThickness).
        Property<TableCell>(TableCell.PaddingProperty, NConverters.ToThickness);

    public static NProperty CreatePageConnected() => new NProperty(nameof(NProperties.PageConnected)).
        Event<DocumentPageView>((s, a) => s.PageConnected += a.EventHandler);

    public static NProperty CreatePageDisconnected() => new NProperty(nameof(NProperties.PageDisconnected)).
        Event<DocumentPageView>((s, a) => s.PageDisconnected += a.EventHandler);

    public static NProperty CreatePageNumber() => new NProperty(nameof(NProperties.PageNumber)).
        Property<DocumentPageView>(DocumentPageView.PageNumberProperty, NConverters.ToInt32);

    public static NProperty CreatePageViews() => new NProperty(nameof(NProperties.PageViews)).
        Property<DocumentViewerBase>((t, v) => NPatch.AssignListT(t.PageViews, v));

    public static NProperty CreatePageViewsChanged() => new NProperty(nameof(NProperties.PageViewsChanged)).
        Event<DocumentViewerBase>((s, a) => s.PageViewsChanged += a.EventHandler);

    public static NProperty CreatePanelZIndex() => new NProperty(nameof(NProperties.PanelZIndex)).
        Property<UIElement>(Panel.ZIndexProperty, NConverters.ToInt32);

    public static NProperty CreatePanningDeceleration() => new NProperty(nameof(NProperties.PanningDeceleration)).
        Property<ScrollViewer>(ScrollViewer.PanningDecelerationProperty, NConverters.ToDouble);

    public static NProperty CreatePanningMode() => new NProperty(nameof(NProperties.PanningMode)).
        Property<ScrollViewer>(ScrollViewer.PanningModeProperty, NConverters.ToEnum<PanningMode>);

    public static NProperty CreatePanningRatio() => new NProperty(nameof(NProperties.PanningRatio)).
        Property<ScrollViewer>(ScrollViewer.PanningRatioProperty, NConverters.ToDouble);

    public static NProperty CreatePassword() => new NProperty(nameof(NProperties.Password)).
        Property<PasswordBox>((t, v) => t.Password = NConverters.ToStringT(v));

    public static NProperty CreatePasswordChanged() => new NProperty(nameof(NProperties.PasswordChanged)).
        Event<PasswordBox>(PasswordBox.PasswordChangedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreatePasswordChar() => new NProperty(nameof(NProperties.PasswordChar)).
        Property<PasswordBox>(PasswordBox.PasswordCharProperty, NConverters.ToChar);

    public static NProperty CreatePenWidth() => new NProperty(nameof(NProperties.PenWidth)).
        Property<StickyNoteControl>(StickyNoteControl.PenWidthProperty, NConverters.ToDouble);

    public static NProperty CreatePlacement() => new NProperty(nameof(NProperties.Placement)).
        Property<ToolTip>(ToolTip.PlacementProperty, NConverters.ToEnum<PlacementMode>).
        Property<ContextMenu>(ContextMenu.PlacementProperty, NConverters.ToEnum<PlacementMode>).
        Property<Popup>(Popup.PlacementProperty, NConverters.ToEnum<PlacementMode>).
        Property<TickBar>(TickBar.PlacementProperty, NConverters.ToEnum<TickBarPlacement>);

    public static NProperty CreatePlacementRectangle() => new NProperty(nameof(NProperties.PlacementRectangle)).
        Property<ToolTip>(ToolTip.PlacementRectangleProperty).
        Property<ContextMenu>(ContextMenu.PlacementRectangleProperty).
        Property<Popup>(Popup.PlacementRectangleProperty);

    public static NProperty CreatePlacementTarget() => new NProperty(nameof(NProperties.PlacementTarget)).
        Property<ToolTip>(ToolTip.PlacementTargetProperty).
        Property<ContextMenu>(ContextMenu.PlacementTargetProperty).
        Property<Popup>(Popup.PlacementTargetProperty);

    public static NProperty CreatePoints() => new NProperty(nameof(NProperties.Points)).
        Property<Polygon>((t, v) => NPatch.AssignListT(t.Points, v)).
        Property<Polyline>((t, v) => NPatch.AssignListT(t.Points, v));

    public static NProperty CreatePopupAnimation() => new NProperty(nameof(NProperties.PopupAnimation)).
        Property<Popup>(Popup.PopupAnimationProperty, NConverters.ToEnum<PopupAnimation>);

    public static NProperty CreatePosition() => new NProperty(nameof(NProperties.Position)).
        Property<MediaElement>((t, v) => t.Position = NConverters.ToTimeSpanT(v));

    public static NProperty CreatePreparingCellForEdit() => new NProperty(nameof(NProperties.PreparingCellForEdit)).
        Event<DataGrid>((s, a) => s.PreparingCellForEdit += a.EventHandler);

    public static NProperty CreatePreviewDragEnter() => new NProperty(nameof(NProperties.PreviewDragEnter)).
        Event<UIElement>(UIElement.PreviewDragEnterEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreatePreviewDragLeave() => new NProperty(nameof(NProperties.PreviewDragLeave)).
        Event<UIElement>(UIElement.PreviewDragLeaveEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreatePreviewDragOver() => new NProperty(nameof(NProperties.PreviewDragOver)).
        Event<UIElement>(UIElement.PreviewDragOverEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreatePreviewDrop() => new NProperty(nameof(NProperties.PreviewDrop)).
        Event<UIElement>(UIElement.PreviewDropEvent, a => (DragEventHandler)a.EventHandler);

    public static NProperty CreatePreviewGiveFeedback() => new NProperty(nameof(NProperties.PreviewGiveFeedback)).
        Event<UIElement>(UIElement.PreviewGiveFeedbackEvent, a => (GiveFeedbackEventHandler)a.EventHandler);

    public static NProperty CreatePreviewGotKeyboardFocus() => new NProperty(nameof(NProperties.PreviewGotKeyboardFocus)).
        Event<UIElement>(UIElement.PreviewGotKeyboardFocusEvent, a => (KeyboardFocusChangedEventHandler)a.EventHandler);

    public static NProperty CreatePreviewKeyDown() => new NProperty(nameof(NProperties.PreviewKeyDown)).
        Event<UIElement>(UIElement.PreviewKeyDownEvent, a => (KeyEventHandler)a.EventHandler);

    public static NProperty CreatePreviewKeyUp() => new NProperty(nameof(NProperties.PreviewKeyUp)).
        Event<UIElement>(UIElement.PreviewKeyUpEvent, a => (KeyEventHandler)a.EventHandler);

    public static NProperty CreatePreviewLostKeyboardFocus() => new NProperty(nameof(NProperties.PreviewLostKeyboardFocus)).
        Event<UIElement>(UIElement.PreviewLostKeyboardFocusEvent, a => (KeyboardFocusChangedEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseDoubleClick() => new NProperty(nameof(NProperties.PreviewMouseDoubleClick)).
        Event<Control>(Control.PreviewMouseDoubleClickEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseDown() => new NProperty(nameof(NProperties.PreviewMouseDown)).
        Event<UIElement>(UIElement.PreviewMouseDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseLeftButtonDown() => new NProperty(nameof(NProperties.PreviewMouseLeftButtonDown)).
        Event<UIElement>(UIElement.PreviewMouseLeftButtonDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseLeftButtonUp() => new NProperty(nameof(NProperties.PreviewMouseLeftButtonUp)).
        Event<UIElement>(UIElement.PreviewMouseLeftButtonUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseMove() => new NProperty(nameof(NProperties.PreviewMouseMove)).
        Event<UIElement>(UIElement.PreviewMouseMoveEvent, a => (MouseEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseRightButtonDown() => new NProperty(nameof(NProperties.PreviewMouseRightButtonDown)).
        Event<UIElement>(UIElement.PreviewMouseRightButtonDownEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseRightButtonUp() => new NProperty(nameof(NProperties.PreviewMouseRightButtonUp)).
        Event<UIElement>(UIElement.PreviewMouseRightButtonUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseUp() => new NProperty(nameof(NProperties.PreviewMouseUp)).
        Event<UIElement>(UIElement.PreviewMouseUpEvent, a => (MouseButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewMouseWheel() => new NProperty(nameof(NProperties.PreviewMouseWheel)).
        Event<UIElement>(UIElement.PreviewMouseWheelEvent, a => (MouseWheelEventHandler)a.EventHandler);

    public static NProperty CreatePreviewQueryContinueDrag() => new NProperty(nameof(NProperties.PreviewQueryContinueDrag)).
        Event<UIElement>(UIElement.PreviewQueryContinueDragEvent, a => (QueryContinueDragEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStyle() => new NProperty(nameof(NProperties.PreviewStyle)).
        Property<GridSplitter>(GridSplitter.PreviewStyleProperty, NConverters.ToStyle);

    public static NProperty CreatePreviewStylusButtonDown() => new NProperty(nameof(NProperties.PreviewStylusButtonDown)).
        Event<UIElement>(UIElement.PreviewStylusButtonDownEvent, a => (StylusButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusButtonUp() => new NProperty(nameof(NProperties.PreviewStylusButtonUp)).
        Event<UIElement>(UIElement.PreviewStylusButtonUpEvent, a => (StylusButtonEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusDown() => new NProperty(nameof(NProperties.PreviewStylusDown)).
        Event<UIElement>(UIElement.PreviewStylusDownEvent, a => (StylusDownEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusInAirMove() => new NProperty(nameof(NProperties.PreviewStylusInAirMove)).
        Event<UIElement>(UIElement.PreviewStylusInAirMoveEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusInRange() => new NProperty(nameof(NProperties.PreviewStylusInRange)).
        Event<UIElement>(UIElement.PreviewStylusInRangeEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusMove() => new NProperty(nameof(NProperties.PreviewStylusMove)).
        Event<UIElement>(UIElement.PreviewStylusMoveEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusOutOfRange() => new NProperty(nameof(NProperties.PreviewStylusOutOfRange)).
        Event<UIElement>(UIElement.PreviewStylusOutOfRangeEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusSystemGesture() => new NProperty(nameof(NProperties.PreviewStylusSystemGesture)).
        Event<UIElement>(UIElement.PreviewStylusSystemGestureEvent, a => (StylusSystemGestureEventHandler)a.EventHandler);

    public static NProperty CreatePreviewStylusUp() => new NProperty(nameof(NProperties.PreviewStylusUp)).
        Event<UIElement>(UIElement.PreviewStylusUpEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreatePreviewTextInput() => new NProperty(nameof(NProperties.PreviewTextInput)).
        Event<UIElement>(UIElement.PreviewTextInputEvent, a => (TextCompositionEventHandler)a.EventHandler);

    public static NProperty CreatePreviewTouchDown() => new NProperty(nameof(NProperties.PreviewTouchDown)).
        Event<UIElement>(UIElement.PreviewTouchDownEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreatePreviewTouchMove() => new NProperty(nameof(NProperties.PreviewTouchMove)).
        Event<UIElement>(UIElement.PreviewTouchMoveEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreatePreviewTouchUp() => new NProperty(nameof(NProperties.PreviewTouchUp)).
        Event<UIElement>(UIElement.PreviewTouchUpEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreatePrintTicket() => new NProperty(nameof(NProperties.PrintTicket)).
        Property<FixedPage>(FixedPage.PrintTicketProperty);

    public static NProperty CreateQueryContinueDrag() => new NProperty(nameof(NProperties.QueryContinueDrag)).
        Event<UIElement>(UIElement.QueryContinueDragEvent, a => (QueryContinueDragEventHandler)a.EventHandler);

    public static NProperty CreateQueryCursor() => new NProperty(nameof(NProperties.QueryCursor)).
        Event<UIElement>(UIElement.QueryCursorEvent, a => (QueryCursorEventHandler)a.EventHandler);

    public static NProperty CreateRadiusX() => new NProperty(nameof(NProperties.RadiusX)).
        Property<Rectangle>(Rectangle.RadiusXProperty, NConverters.ToDouble);

    public static NProperty CreateRadiusY() => new NProperty(nameof(NProperties.RadiusY)).
        Property<Rectangle>(Rectangle.RadiusYProperty, NConverters.ToDouble);

    public static NProperty CreateRecognizesAccessKey() => new NProperty(nameof(NProperties.RecognizesAccessKey)).
        Property<ContentPresenter>(ContentPresenter.RecognizesAccessKeyProperty, NConverters.ToBool);

    public static NProperty CreateRemoveFromJournal() => new NProperty(nameof(NProperties.RemoveFromJournal)).
        Property<PageFunctionBase>((t, v) => t.RemoveFromJournal = NConverters.ToBoolT(v));

    public static NProperty CreateRenderTransform() => new NProperty(nameof(NProperties.RenderTransform)).
        Property<UIElement>(UIElement.RenderTransformProperty);

    public static NProperty CreateRenderTransformOrigin() => new NProperty(nameof(NProperties.RenderTransformOrigin)).
        Property<UIElement>(UIElement.RenderTransformOriginProperty, NConverters.ToPoint);

    public static NProperty CreateRequestBringIntoView() => new NProperty(nameof(NProperties.RequestBringIntoView)).
        Event<FrameworkElement>(FrameworkElement.RequestBringIntoViewEvent, a => (RequestBringIntoViewEventHandler)a.EventHandler);

    public static NProperty CreateRequestNavigate() => new NProperty(nameof(NProperties.RequestNavigate)).
        Event<Hyperlink>(Hyperlink.RequestNavigateEvent, a => (RequestNavigateEventHandler)a.EventHandler);

    public static NProperty CreateReservedSpace() => new NProperty(nameof(NProperties.ReservedSpace)).
        Property<TickBar>(TickBar.ReservedSpaceProperty, NConverters.ToDouble);

    public static NProperty CreateResizeBehavior() => new NProperty(nameof(NProperties.ResizeBehavior)).
        Property<GridSplitter>(GridSplitter.ResizeBehaviorProperty, NConverters.ToEnum<GridResizeBehavior>);

    public static NProperty CreateResizeDirection() => new NProperty(nameof(NProperties.ResizeDirection)).
        Property<GridSplitter>(GridSplitter.ResizeDirectionProperty, NConverters.ToEnum<GridResizeDirection>);

    public static NProperty CreateResizeEnabled() => new NProperty(nameof(NProperties.ResizeEnabled)).
        Property<InkCanvas>((t, v) => t.ResizeEnabled = NConverters.ToBoolT(v));

    public static NProperty CreateResizeMode() => new NProperty(nameof(NProperties.ResizeMode)).
        Property<Window>(Window.ResizeModeProperty, NConverters.ToEnum<ResizeMode>);

    public static NProperty CreateResources() => new NProperty(nameof(NProperties.Resources)).
        Property<FrameworkElement>((t, v) => t.Resources = NConverters.ToResourceDictionaryT(v));

    public static NProperty CreateRowBackground() => new NProperty(nameof(NProperties.RowBackground)).
        Property<DataGrid>(DataGrid.RowBackgroundProperty, NConverters.ToBrush);

    public static NProperty CreateRowDefinitions() => new NProperty(nameof(NProperties.RowDefinitions)).
        Property<Grid>((t, v) => NPatch.AssignListT(t.RowDefinitions, v));

    public static NProperty CreateRowDetailsTemplate() => new NProperty(nameof(NProperties.RowDetailsTemplate)).
        Property<DataGrid>(DataGrid.RowDetailsTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateRowDetailsTemplateSelector() => new NProperty(nameof(NProperties.RowDetailsTemplateSelector)).
        Property<DataGrid>(DataGrid.RowDetailsTemplateSelectorProperty);

    public static NProperty CreateRowDetailsVisibilityChanged() => new NProperty(nameof(NProperties.RowDetailsVisibilityChanged)).
        Event<DataGrid>((s, a) => s.RowDetailsVisibilityChanged += a.EventHandler);

    public static NProperty CreateRowDetailsVisibilityMode() => new NProperty(nameof(NProperties.RowDetailsVisibilityMode)).
        Property<DataGrid>(DataGrid.RowDetailsVisibilityModeProperty, NConverters.ToEnum<DataGridRowDetailsVisibilityMode>);

    public static NProperty CreateRowEditEnding() => new NProperty(nameof(NProperties.RowEditEnding)).
        Event<DataGrid>((s, a) => s.RowEditEnding += a.EventHandler);

    public static NProperty CreateRowGroups() => new NProperty(nameof(NProperties.RowGroups)).
        Property<Table>((t, v) => NPatch.AssignListT(t.RowGroups, v));

    public static NProperty CreateRowHeaderStyle() => new NProperty(nameof(NProperties.RowHeaderStyle)).
        Property<DataGrid>(DataGrid.RowHeaderStyleProperty, NConverters.ToStyle);

    public static NProperty CreateRowHeaderTemplate() => new NProperty(nameof(NProperties.RowHeaderTemplate)).
        Property<DataGrid>(DataGrid.RowHeaderTemplateProperty, NConverters.ToDataTemplate);

    public static NProperty CreateRowHeaderTemplateSelector() => new NProperty(nameof(NProperties.RowHeaderTemplateSelector)).
        Property<DataGrid>(DataGrid.RowHeaderTemplateSelectorProperty);

    public static NProperty CreateRowHeaderWidth() => new NProperty(nameof(NProperties.RowHeaderWidth)).
        Property<DataGrid>(DataGrid.RowHeaderWidthProperty, NConverters.ToDouble);

    public static NProperty CreateRowHeight() => new NProperty(nameof(NProperties.RowHeight)).
        Property<DataGrid>(DataGrid.RowHeightProperty, NConverters.ToDouble);

    public static NProperty CreateRows() => new NProperty(nameof(NProperties.Rows)).
        Property<UniformGrid>(UniformGrid.RowsProperty, NConverters.ToInt32).
        Property<TableRowGroup>((t, v) => NPatch.AssignListT(t.Rows, v));

    public static NProperty CreateRowSpan() => new NProperty(nameof(NProperties.RowSpan)).
        Property<TableCell>(TableCell.RowSpanProperty, NConverters.ToInt32);

    public static NProperty CreateRowStyle() => new NProperty(nameof(NProperties.RowStyle)).
        Property<DataGrid>(DataGrid.RowStyleProperty, NConverters.ToStyle);

    public static NProperty CreateRowStyleSelector() => new NProperty(nameof(NProperties.RowStyleSelector)).
        Property<DataGrid>(DataGrid.RowStyleSelectorProperty);

    public static NProperty CreateRowValidationErrorTemplate() => new NProperty(nameof(NProperties.RowValidationErrorTemplate)).
        Property<DataGrid>(DataGrid.RowValidationErrorTemplateProperty, NConverters.ToControlTemplate);

    public static NProperty CreateRowValidationRules() => new NProperty(nameof(NProperties.RowValidationRules)).
        Property<DataGrid>((t, v) => NPatch.AssignListT(t.RowValidationRules, v));

    public static NProperty CreateSandboxExternalContent() => new NProperty(nameof(NProperties.SandboxExternalContent)).
        Property<NavigationWindow>(NavigationWindow.SandboxExternalContentProperty, NConverters.ToBool).
        Property<Frame>(Frame.SandboxExternalContentProperty, NConverters.ToBool);

    public static NProperty CreateScriptCommand() => new NProperty(nameof(NProperties.ScriptCommand)).
        Event<MediaElement>(MediaElement.ScriptCommandEvent, a => (EventHandler<MediaScriptCommandRoutedEventArgs>)a.EventHandler);

    public static NProperty CreateScroll() => new NProperty(nameof(NProperties.Scroll)).
        Event<ScrollBar>(ScrollBar.ScrollEvent, a => (ScrollEventHandler)a.EventHandler);

    public static NProperty CreateScrollChanged() => new NProperty(nameof(NProperties.ScrollChanged)).
        Event<ScrollViewer>(ScrollViewer.ScrollChangedEvent, a => (ScrollChangedEventHandler)a.EventHandler);

    public static NProperty CreateScrollViewerCanContentScroll() => new NProperty(nameof(NProperties.ScrollViewerCanContentScroll)).
        Property<DependencyObject>(ScrollViewer.CanContentScrollProperty, NConverters.ToBool);

    public static NProperty CreateScrollViewerHorizontalScrollBarVisibility() => new NProperty(nameof(NProperties.ScrollViewerHorizontalScrollBarVisibility)).
        Property<DependencyObject>(ScrollViewer.HorizontalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>);

    public static NProperty CreateScrollViewerIsDeferredScrollingEnabled() => new NProperty(nameof(NProperties.ScrollViewerIsDeferredScrollingEnabled)).
        Property<DependencyObject>(ScrollViewer.IsDeferredScrollingEnabledProperty, NConverters.ToBool);

    public static NProperty CreateScrollViewerPanningDeceleration() => new NProperty(nameof(NProperties.ScrollViewerPanningDeceleration)).
        Property<DependencyObject>(ScrollViewer.PanningDecelerationProperty, NConverters.ToDouble);

    public static NProperty CreateScrollViewerPanningMode() => new NProperty(nameof(NProperties.ScrollViewerPanningMode)).
        Property<DependencyObject>(ScrollViewer.PanningModeProperty, NConverters.ToEnum<PanningMode>);

    public static NProperty CreateScrollViewerPanningRatio() => new NProperty(nameof(NProperties.ScrollViewerPanningRatio)).
        Property<DependencyObject>(ScrollViewer.PanningRatioProperty, NConverters.ToDouble);

    public static NProperty CreateScrollViewerVerticalScrollBarVisibility() => new NProperty(nameof(NProperties.ScrollViewerVerticalScrollBarVisibility)).
        Property<DependencyObject>(ScrollViewer.VerticalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>);

    public static NProperty CreateScrubbingEnabled() => new NProperty(nameof(NProperties.ScrubbingEnabled)).
        Property<MediaElement>(MediaElement.ScrubbingEnabledProperty, NConverters.ToBool);

    public static NProperty CreateSelected() => new NProperty(nameof(NProperties.Selected)).
        Event<DataGridCell>(DataGridCell.SelectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<ListBoxItem>(ListBoxItem.SelectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<DataGridRow>(DataGridRow.SelectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<TreeViewItem>(TreeViewItem.SelectedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateSelectedCellsChanged() => new NProperty(nameof(NProperties.SelectedCellsChanged)).
        Event<DataGrid>((s, a) => s.SelectedCellsChanged += a.EventHandler);

    public static NProperty CreateSelectedDate() => new NProperty(nameof(NProperties.SelectedDate)).
        Property<Calendar>(Calendar.SelectedDateProperty).
        Property<DatePicker>(DatePicker.SelectedDateProperty);

    public static NProperty CreateSelectedDateChanged() => new NProperty(nameof(NProperties.SelectedDateChanged)).
        Event<DatePicker>(DatePicker.SelectedDateChangedEvent, a => (EventHandler<SelectionChangedEventArgs>)a.EventHandler);

    public static NProperty CreateSelectedDateFormat() => new NProperty(nameof(NProperties.SelectedDateFormat)).
        Property<DatePicker>(DatePicker.SelectedDateFormatProperty, NConverters.ToEnum<DatePickerFormat>);

    public static NProperty CreateSelectedDates() => new NProperty(nameof(NProperties.SelectedDates)).
        Property<Calendar>((t, v) => NPatch.AssignListT(t.SelectedDates, v));

    public static NProperty CreateSelectedDatesChanged() => new NProperty(nameof(NProperties.SelectedDatesChanged)).
        Event<Calendar>(Calendar.SelectedDatesChangedEvent, a => (EventHandler<SelectionChangedEventArgs>)a.EventHandler);

    public static NProperty CreateSelectedIndex() => new NProperty(nameof(NProperties.SelectedIndex)).
        Property<Selector>(Selector.SelectedIndexProperty, NConverters.ToInt32);

    public static NProperty CreateSelectedItem() => new NProperty(nameof(NProperties.SelectedItem)).
        Property<Selector>(Selector.SelectedItemProperty);

    public static NProperty CreateSelectedItemChanged() => new NProperty(nameof(NProperties.SelectedItemChanged)).
        Event<TreeView>(TreeView.SelectedItemChangedEvent, a => (RoutedPropertyChangedEventHandler<Object>)a.EventHandler);

    public static NProperty CreateSelectedItems() => new NProperty(nameof(NProperties.SelectedItems)).
        List<ListBox>(t => t.SelectedItems).
        List<MultiSelector>(t => t.SelectedItems);

    public static NProperty CreateSelectedText() => new NProperty(nameof(NProperties.SelectedText)).
        Property<TextBox>((t, v) => t.SelectedText = NConverters.ToStringT(v));

    public static NProperty CreateSelectedValue() => new NProperty(nameof(NProperties.SelectedValue)).
        Property<Selector>(Selector.SelectedValueProperty);

    public static NProperty CreateSelectedValuePath() => new NProperty(nameof(NProperties.SelectedValuePath)).
        Property<TreeView>(TreeView.SelectedValuePathProperty, NConverters.ToString).
        Property<Selector>(Selector.SelectedValuePathProperty, NConverters.ToString);

    public static NProperty CreateSelectionBrush() => new NProperty(nameof(NProperties.SelectionBrush)).
        Property<FlowDocumentReader>(FlowDocumentReader.SelectionBrushProperty, NConverters.ToBrush).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.SelectionBrushProperty, NConverters.ToBrush).
        Property<PasswordBox>(PasswordBox.SelectionBrushProperty, NConverters.ToBrush).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.SelectionBrushProperty, NConverters.ToBrush).
        Property<TextBoxBase>(TextBoxBase.SelectionBrushProperty, NConverters.ToBrush);

    public static NProperty CreateSelectionChanged() => new NProperty(nameof(NProperties.SelectionChanged)).
        Event<Selector>(Selector.SelectionChangedEvent, a => (SelectionChangedEventHandler)a.EventHandler).
        Event<TextBoxBase>(TextBoxBase.SelectionChangedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<InkCanvas>((s, a) => s.SelectionChanged += a.EventHandler);

    public static NProperty CreateSelectionChanging() => new NProperty(nameof(NProperties.SelectionChanging)).
        Event<InkCanvas>((s, a) => s.SelectionChanging += a.EventHandler);

    public static NProperty CreateSelectionEnd() => new NProperty(nameof(NProperties.SelectionEnd)).
        Property<Slider>(Slider.SelectionEndProperty, NConverters.ToDouble).
        Property<TickBar>(TickBar.SelectionEndProperty, NConverters.ToDouble);

    public static NProperty CreateSelectionLength() => new NProperty(nameof(NProperties.SelectionLength)).
        Property<TextBox>((t, v) => t.SelectionLength = NConverters.ToInt32T(v));

    public static NProperty CreateSelectionMode() => new NProperty(nameof(NProperties.SelectionMode)).
        Property<Calendar>(Calendar.SelectionModeProperty, NConverters.ToEnum<CalendarSelectionMode>).
        Property<ListBox>(ListBox.SelectionModeProperty, NConverters.ToEnum<SelectionMode>).
        Property<DataGrid>(DataGrid.SelectionModeProperty, NConverters.ToEnum<DataGridSelectionMode>);

    public static NProperty CreateSelectionModeChanged() => new NProperty(nameof(NProperties.SelectionModeChanged)).
        Event<Calendar>((s, a) => s.SelectionModeChanged += a.EventHandler);

    public static NProperty CreateSelectionMoved() => new NProperty(nameof(NProperties.SelectionMoved)).
        Event<InkCanvas>((s, a) => s.SelectionMoved += a.EventHandler);

    public static NProperty CreateSelectionMoving() => new NProperty(nameof(NProperties.SelectionMoving)).
        Event<InkCanvas>((s, a) => s.SelectionMoving += a.EventHandler);

    public static NProperty CreateSelectionOpacity() => new NProperty(nameof(NProperties.SelectionOpacity)).
        Property<FlowDocumentReader>(FlowDocumentReader.SelectionOpacityProperty, NConverters.ToDouble).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.SelectionOpacityProperty, NConverters.ToDouble).
        Property<PasswordBox>(PasswordBox.SelectionOpacityProperty, NConverters.ToDouble).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.SelectionOpacityProperty, NConverters.ToDouble).
        Property<TextBoxBase>(TextBoxBase.SelectionOpacityProperty, NConverters.ToDouble);

    public static NProperty CreateSelectionResized() => new NProperty(nameof(NProperties.SelectionResized)).
        Event<InkCanvas>((s, a) => s.SelectionResized += a.EventHandler);

    public static NProperty CreateSelectionResizing() => new NProperty(nameof(NProperties.SelectionResizing)).
        Event<InkCanvas>((s, a) => s.SelectionResizing += a.EventHandler);

    public static NProperty CreateSelectionStart() => new NProperty(nameof(NProperties.SelectionStart)).
        Property<Slider>(Slider.SelectionStartProperty, NConverters.ToDouble).
        Property<TextBox>((t, v) => t.SelectionStart = NConverters.ToInt32T(v)).
        Property<TickBar>(TickBar.SelectionStartProperty, NConverters.ToDouble);

    public static NProperty CreateSelectionUnit() => new NProperty(nameof(NProperties.SelectionUnit)).
        Property<DataGrid>(DataGrid.SelectionUnitProperty, NConverters.ToEnum<DataGridSelectionUnit>);

    public static NProperty CreateSelectiveScrollingGridSelectiveScrollingOrientation() => new NProperty(nameof(NProperties.SelectiveScrollingGridSelectiveScrollingOrientation)).
        Property<DependencyObject>(SelectiveScrollingGrid.SelectiveScrollingOrientationProperty, NConverters.ToEnum<SelectiveScrollingOrientation>);

    public static NProperty CreateSelectorIsSelected() => new NProperty(nameof(NProperties.SelectorIsSelected)).
        Property<DependencyObject>(Selector.IsSelectedProperty, NConverters.ToBool);

    public static NProperty CreateSeparatorBrush() => new NProperty(nameof(NProperties.SeparatorBrush)).
        Property<DataGridColumnHeader>(DataGridColumnHeader.SeparatorBrushProperty, NConverters.ToBrush).
        Property<DataGridRowHeader>(DataGridRowHeader.SeparatorBrushProperty, NConverters.ToBrush);

    public static NProperty CreateSeparatorVisibility() => new NProperty(nameof(NProperties.SeparatorVisibility)).
        Property<DataGridColumnHeader>(DataGridColumnHeader.SeparatorVisibilityProperty, NConverters.ToEnum<Visibility>).
        Property<DataGridRowHeader>(DataGridRowHeader.SeparatorVisibilityProperty, NConverters.ToEnum<Visibility>);

    public static NProperty CreateShouldPreserveUserEnteredPrefix() => new NProperty(nameof(NProperties.ShouldPreserveUserEnteredPrefix)).
        Property<ComboBox>(ComboBox.ShouldPreserveUserEnteredPrefixProperty, NConverters.ToBool);

    public static NProperty CreateShowActivated() => new NProperty(nameof(NProperties.ShowActivated)).
        Property<Window>(Window.ShowActivatedProperty, NConverters.ToBool);

    public static NProperty CreateShowGridLines() => new NProperty(nameof(NProperties.ShowGridLines)).
        Property<Grid>(Grid.ShowGridLinesProperty, NConverters.ToBool);

    public static NProperty CreateShowInTaskbar() => new NProperty(nameof(NProperties.ShowInTaskbar)).
        Property<Window>(Window.ShowInTaskbarProperty, NConverters.ToBool);

    public static NProperty CreateShowPageBorders() => new NProperty(nameof(NProperties.ShowPageBorders)).
        Property<DocumentViewer>(DocumentViewer.ShowPageBordersProperty, NConverters.ToBool);

    public static NProperty CreateShowsNavigationUI() => new NProperty(nameof(NProperties.ShowsNavigationUI)).
        Property<NavigationWindow>(NavigationWindow.ShowsNavigationUIProperty, NConverters.ToBool).
        Property<Page>((t, v) => t.ShowsNavigationUI = NConverters.ToBoolT(v));

    public static NProperty CreateShowsPreview() => new NProperty(nameof(NProperties.ShowsPreview)).
        Property<GridSplitter>(GridSplitter.ShowsPreviewProperty, NConverters.ToBool);

    public static NProperty CreateSiblingBlocks() => new NProperty(nameof(NProperties.SiblingBlocks)).
        List<Block>(t => t.SiblingBlocks);

    public static NProperty CreateSiblingInlines() => new NProperty(nameof(NProperties.SiblingInlines)).
        List<Inline>(t => t.SiblingInlines);

    public static NProperty CreateSiblingListItems() => new NProperty(nameof(NProperties.SiblingListItems)).
        List<ListItem>(t => t.SiblingListItems);

    public static NProperty CreateSizeChanged() => new NProperty(nameof(NProperties.SizeChanged)).
        Event<FrameworkElement>(FrameworkElement.SizeChangedEvent, a => (SizeChangedEventHandler)a.EventHandler);

    public static NProperty CreateSizeToContent() => new NProperty(nameof(NProperties.SizeToContent)).
        Property<Window>(Window.SizeToContentProperty, NConverters.ToEnum<SizeToContent>);

    public static NProperty CreateSlashedZero() => new NProperty(nameof(NProperties.SlashedZero)).
        Property<Typography>((t, v) => t.SlashedZero = NConverters.ToBoolT(v));

    public static NProperty CreateSmallChange() => new NProperty(nameof(NProperties.SmallChange)).
        Property<RangeBase>(RangeBase.SmallChangeProperty, NConverters.ToDouble);

    public static NProperty CreateSnapsToDevicePixels() => new NProperty(nameof(NProperties.SnapsToDevicePixels)).
        Property<UIElement>(UIElement.SnapsToDevicePixelsProperty, NConverters.ToBool);

    public static NProperty CreateSorting() => new NProperty(nameof(NProperties.Sorting)).
        Event<DataGrid>((s, a) => s.Sorting += a.EventHandler);

    public static NProperty CreateSource() => new NProperty(nameof(NProperties.Source)).
        Property<DocumentReference>(DocumentReference.SourceProperty, NConverters.ToUri).
        Property<PageContent>(PageContent.SourceProperty, NConverters.ToUri).
        Property<NavigationWindow>(NavigationWindow.SourceProperty, NConverters.ToUri).
        Property<Frame>(Frame.SourceProperty, NConverters.ToUri).
        Property<Image>(Image.SourceProperty, NConverters.ToImageSource).
        Property<MediaElement>(MediaElement.SourceProperty, NConverters.ToUri).
        Property<WebBrowser>((t, v) => t.Source = NConverters.ToUriT(v));

    public static NProperty CreateSourceInitialized() => new NProperty(nameof(NProperties.SourceInitialized)).
        Event<Window>((s, a) => s.SourceInitialized += a.EventHandler);

    public static NProperty CreateSourceUpdated() => new NProperty(nameof(NProperties.SourceUpdated)).
        Event<FrameworkElement>((s, a) => s.SourceUpdated += a.EventHandler);

    public static NProperty CreateStandardLigatures() => new NProperty(nameof(NProperties.StandardLigatures)).
        Property<Typography>((t, v) => t.StandardLigatures = NConverters.ToBoolT(v));

    public static NProperty CreateStandardSwashes() => new NProperty(nameof(NProperties.StandardSwashes)).
        Property<Typography>((t, v) => t.StandardSwashes = NConverters.ToInt32T(v));

    public static NProperty CreateStartIndex() => new NProperty(nameof(NProperties.StartIndex)).
        Property<List>(List.StartIndexProperty, NConverters.ToInt32);

    public static NProperty CreateStateChanged() => new NProperty(nameof(NProperties.StateChanged)).
        Event<Window>((s, a) => s.StateChanged += a.EventHandler);

    public static NProperty CreateStaysOpen() => new NProperty(nameof(NProperties.StaysOpen)).
        Property<ToolTip>(ToolTip.StaysOpenProperty, NConverters.ToBool).
        Property<ContextMenu>(ContextMenu.StaysOpenProperty, NConverters.ToBool).
        Property<Popup>(Popup.StaysOpenProperty, NConverters.ToBool);

    public static NProperty CreateStaysOpenOnClick() => new NProperty(nameof(NProperties.StaysOpenOnClick)).
        Property<MenuItem>(MenuItem.StaysOpenOnClickProperty, NConverters.ToBool);

    public static NProperty CreateStaysOpenOnEdit() => new NProperty(nameof(NProperties.StaysOpenOnEdit)).
        Property<ComboBox>(ComboBox.StaysOpenOnEditProperty, NConverters.ToBool);

    public static NProperty CreateStretch() => new NProperty(nameof(NProperties.Stretch)).
        Property<Shape>(Shape.StretchProperty, NConverters.ToEnum<Stretch>).
        Property<Viewbox>(Viewbox.StretchProperty, NConverters.ToEnum<Stretch>).
        Property<Image>(Image.StretchProperty, NConverters.ToEnum<Stretch>).
        Property<MediaElement>(MediaElement.StretchProperty, NConverters.ToEnum<Stretch>).
        Property<DocumentPageView>(DocumentPageView.StretchProperty, NConverters.ToEnum<Stretch>);

    public static NProperty CreateStretchDirection() => new NProperty(nameof(NProperties.StretchDirection)).
        Property<Viewbox>(Viewbox.StretchDirectionProperty, NConverters.ToEnum<StretchDirection>).
        Property<Image>(Image.StretchDirectionProperty, NConverters.ToEnum<StretchDirection>).
        Property<MediaElement>(MediaElement.StretchDirectionProperty, NConverters.ToEnum<StretchDirection>).
        Property<DocumentPageView>(DocumentPageView.StretchDirectionProperty, NConverters.ToEnum<StretchDirection>);

    public static NProperty CreateStroke() => new NProperty(nameof(NProperties.Stroke)).
        Property<Shape>(Shape.StrokeProperty, NConverters.ToBrush);

    public static NProperty CreateStrokeCollected() => new NProperty(nameof(NProperties.StrokeCollected)).
        Event<InkCanvas>(InkCanvas.StrokeCollectedEvent, a => (InkCanvasStrokeCollectedEventHandler)a.EventHandler);

    public static NProperty CreateStrokeDashArray() => new NProperty(nameof(NProperties.StrokeDashArray)).
        Property<Shape>((t, v) => NPatch.AssignListT(t.StrokeDashArray, v));

    public static NProperty CreateStrokeDashCap() => new NProperty(nameof(NProperties.StrokeDashCap)).
        Property<Shape>(Shape.StrokeDashCapProperty, NConverters.ToEnum<PenLineCap>);

    public static NProperty CreateStrokeDashOffset() => new NProperty(nameof(NProperties.StrokeDashOffset)).
        Property<Shape>(Shape.StrokeDashOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateStrokeEndLineCap() => new NProperty(nameof(NProperties.StrokeEndLineCap)).
        Property<Shape>(Shape.StrokeEndLineCapProperty, NConverters.ToEnum<PenLineCap>);

    public static NProperty CreateStrokeErased() => new NProperty(nameof(NProperties.StrokeErased)).
        Event<InkCanvas>(InkCanvas.StrokeErasedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateStrokeErasing() => new NProperty(nameof(NProperties.StrokeErasing)).
        Event<InkCanvas>((s, a) => s.StrokeErasing += a.EventHandler);

    public static NProperty CreateStrokeLineJoin() => new NProperty(nameof(NProperties.StrokeLineJoin)).
        Property<Shape>(Shape.StrokeLineJoinProperty, NConverters.ToEnum<PenLineJoin>);

    public static NProperty CreateStrokeMiterLimit() => new NProperty(nameof(NProperties.StrokeMiterLimit)).
        Property<Shape>(Shape.StrokeMiterLimitProperty, NConverters.ToDouble);

    public static NProperty CreateStrokes() => new NProperty(nameof(NProperties.Strokes)).
        Property<InkPresenter>((t, v) => NPatch.AssignListT(t.Strokes, v)).
        Property<InkCanvas>((t, v) => NPatch.AssignListT(t.Strokes, v));

    public static NProperty CreateStrokesReplaced() => new NProperty(nameof(NProperties.StrokesReplaced)).
        Event<InkCanvas>((s, a) => s.StrokesReplaced += a.EventHandler);

    public static NProperty CreateStrokeStartLineCap() => new NProperty(nameof(NProperties.StrokeStartLineCap)).
        Property<Shape>(Shape.StrokeStartLineCapProperty, NConverters.ToEnum<PenLineCap>);

    public static NProperty CreateStrokeThickness() => new NProperty(nameof(NProperties.StrokeThickness)).
        Property<Shape>(Shape.StrokeThicknessProperty, NConverters.ToDouble);

    public static NProperty CreateStyle() => new NProperty(nameof(NProperties.Style)).
        Property<FrameworkElement>(FrameworkElement.StyleProperty, NConverters.ToStyle);

    public static NProperty CreateStyleSimulations() => new NProperty(nameof(NProperties.StyleSimulations)).
        Property<Glyphs>(Glyphs.StyleSimulationsProperty, NConverters.ToEnum<StyleSimulations>);

    public static NProperty CreateStylisticAlternates() => new NProperty(nameof(NProperties.StylisticAlternates)).
        Property<Typography>((t, v) => t.StylisticAlternates = NConverters.ToInt32T(v));

    public static NProperty CreateStylisticSet1() => new NProperty(nameof(NProperties.StylisticSet1)).
        Property<Typography>((t, v) => t.StylisticSet1 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet10() => new NProperty(nameof(NProperties.StylisticSet10)).
        Property<Typography>((t, v) => t.StylisticSet10 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet11() => new NProperty(nameof(NProperties.StylisticSet11)).
        Property<Typography>((t, v) => t.StylisticSet11 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet12() => new NProperty(nameof(NProperties.StylisticSet12)).
        Property<Typography>((t, v) => t.StylisticSet12 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet13() => new NProperty(nameof(NProperties.StylisticSet13)).
        Property<Typography>((t, v) => t.StylisticSet13 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet14() => new NProperty(nameof(NProperties.StylisticSet14)).
        Property<Typography>((t, v) => t.StylisticSet14 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet15() => new NProperty(nameof(NProperties.StylisticSet15)).
        Property<Typography>((t, v) => t.StylisticSet15 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet16() => new NProperty(nameof(NProperties.StylisticSet16)).
        Property<Typography>((t, v) => t.StylisticSet16 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet17() => new NProperty(nameof(NProperties.StylisticSet17)).
        Property<Typography>((t, v) => t.StylisticSet17 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet18() => new NProperty(nameof(NProperties.StylisticSet18)).
        Property<Typography>((t, v) => t.StylisticSet18 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet19() => new NProperty(nameof(NProperties.StylisticSet19)).
        Property<Typography>((t, v) => t.StylisticSet19 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet2() => new NProperty(nameof(NProperties.StylisticSet2)).
        Property<Typography>((t, v) => t.StylisticSet2 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet20() => new NProperty(nameof(NProperties.StylisticSet20)).
        Property<Typography>((t, v) => t.StylisticSet20 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet3() => new NProperty(nameof(NProperties.StylisticSet3)).
        Property<Typography>((t, v) => t.StylisticSet3 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet4() => new NProperty(nameof(NProperties.StylisticSet4)).
        Property<Typography>((t, v) => t.StylisticSet4 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet5() => new NProperty(nameof(NProperties.StylisticSet5)).
        Property<Typography>((t, v) => t.StylisticSet5 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet6() => new NProperty(nameof(NProperties.StylisticSet6)).
        Property<Typography>((t, v) => t.StylisticSet6 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet7() => new NProperty(nameof(NProperties.StylisticSet7)).
        Property<Typography>((t, v) => t.StylisticSet7 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet8() => new NProperty(nameof(NProperties.StylisticSet8)).
        Property<Typography>((t, v) => t.StylisticSet8 = NConverters.ToBoolT(v));

    public static NProperty CreateStylisticSet9() => new NProperty(nameof(NProperties.StylisticSet9)).
        Property<Typography>((t, v) => t.StylisticSet9 = NConverters.ToBoolT(v));

    public static NProperty CreateStylusButtonDown() => new NProperty(nameof(NProperties.StylusButtonDown)).
        Event<UIElement>(UIElement.StylusButtonDownEvent, a => (StylusButtonEventHandler)a.EventHandler);

    public static NProperty CreateStylusButtonUp() => new NProperty(nameof(NProperties.StylusButtonUp)).
        Event<UIElement>(UIElement.StylusButtonUpEvent, a => (StylusButtonEventHandler)a.EventHandler);

    public static NProperty CreateStylusDown() => new NProperty(nameof(NProperties.StylusDown)).
        Event<UIElement>(UIElement.StylusDownEvent, a => (StylusDownEventHandler)a.EventHandler);

    public static NProperty CreateStylusEnter() => new NProperty(nameof(NProperties.StylusEnter)).
        Event<UIElement>(UIElement.StylusEnterEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusInAirMove() => new NProperty(nameof(NProperties.StylusInAirMove)).
        Event<UIElement>(UIElement.StylusInAirMoveEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusInRange() => new NProperty(nameof(NProperties.StylusInRange)).
        Event<UIElement>(UIElement.StylusInRangeEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusLeave() => new NProperty(nameof(NProperties.StylusLeave)).
        Event<UIElement>(UIElement.StylusLeaveEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusMove() => new NProperty(nameof(NProperties.StylusMove)).
        Event<UIElement>(UIElement.StylusMoveEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusOutOfRange() => new NProperty(nameof(NProperties.StylusOutOfRange)).
        Event<UIElement>(UIElement.StylusOutOfRangeEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateStylusSystemGesture() => new NProperty(nameof(NProperties.StylusSystemGesture)).
        Event<UIElement>(UIElement.StylusSystemGestureEvent, a => (StylusSystemGestureEventHandler)a.EventHandler);

    public static NProperty CreateStylusUp() => new NProperty(nameof(NProperties.StylusUp)).
        Event<UIElement>(UIElement.StylusUpEvent, a => (StylusEventHandler)a.EventHandler);

    public static NProperty CreateSubmenuClosed() => new NProperty(nameof(NProperties.SubmenuClosed)).
        Event<MenuItem>(MenuItem.SubmenuClosedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateSubmenuOpened() => new NProperty(nameof(NProperties.SubmenuOpened)).
        Event<MenuItem>(MenuItem.SubmenuOpenedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateTabIndex() => new NProperty(nameof(NProperties.TabIndex)).
        Property<Control>(Control.TabIndexProperty, NConverters.ToInt32);

    public static NProperty CreateTabStripPlacement() => new NProperty(nameof(NProperties.TabStripPlacement)).
        Property<TabControl>(TabControl.TabStripPlacementProperty, NConverters.ToEnum<Dock>);

    public static NProperty CreateTag() => new NProperty(nameof(NProperties.Tag)).
        Property<FrameworkElement>(FrameworkElement.TagProperty);

    public static NProperty CreateTarget() => new NProperty(nameof(NProperties.Target)).
        Property<Label>(Label.TargetProperty);

    public static NProperty CreateTargetName() => new NProperty(nameof(NProperties.TargetName)).
        Property<Hyperlink>(Hyperlink.TargetNameProperty, NConverters.ToString);

    public static NProperty CreateTargetUpdated() => new NProperty(nameof(NProperties.TargetUpdated)).
        Event<FrameworkElement>((s, a) => s.TargetUpdated += a.EventHandler);

    public static NProperty CreateTaskbarItemInfo() => new NProperty(nameof(NProperties.TaskbarItemInfo)).
        Property<Window>(Window.TaskbarItemInfoProperty);

    public static NProperty CreateTemplate() => new NProperty(nameof(NProperties.Template)).
        Property<Control>(Control.TemplateProperty, NConverters.ToControlTemplate).
        Property<Page>(Page.TemplateProperty, NConverters.ToControlTemplate);

    public static NProperty CreateText() => new NProperty(nameof(NProperties.Text)).
        Property<AccessText>(AccessText.TextProperty, NConverters.ToString).
        Property<DatePicker>(DatePicker.TextProperty, NConverters.ToString).
        Property<ComboBox>(ComboBox.TextProperty, NConverters.ToString).
        Property<TextBox>(TextBox.TextProperty, NConverters.ToString).
        Property<TextBlock>(TextBlock.TextProperty, NConverters.ToString).
        Property<Run>(Run.TextProperty, NConverters.ToString);

    public static NProperty CreateTextAlignment() => new NProperty(nameof(NProperties.TextAlignment)).
        Property<AccessText>(AccessText.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<TextBox>(TextBox.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<TextBlock>(TextBlock.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<Block>(Block.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<AnchoredBlock>(AnchoredBlock.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<ListItem>(ListItem.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>).
        Property<TableCell>(TableCell.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>);

    public static NProperty CreateTextBlockBaselineOffset() => new NProperty(nameof(NProperties.TextBlockBaselineOffset)).
        Property<DependencyObject>(TextBlock.BaselineOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateTextBlockFontFamily() => new NProperty(nameof(NProperties.TextBlockFontFamily)).
        Property<DependencyObject>(TextBlock.FontFamilyProperty, NConverters.ToFontFamily);

    public static NProperty CreateTextBlockFontSize() => new NProperty(nameof(NProperties.TextBlockFontSize)).
        Property<DependencyObject>(TextBlock.FontSizeProperty, NConverters.ToDouble);

    public static NProperty CreateTextBlockFontStretch() => new NProperty(nameof(NProperties.TextBlockFontStretch)).
        Property<DependencyObject>(TextBlock.FontStretchProperty, NConverters.ToFontStretch);

    public static NProperty CreateTextBlockFontStyle() => new NProperty(nameof(NProperties.TextBlockFontStyle)).
        Property<DependencyObject>(TextBlock.FontStyleProperty, NConverters.ToFontStyle);

    public static NProperty CreateTextBlockFontWeight() => new NProperty(nameof(NProperties.TextBlockFontWeight)).
        Property<DependencyObject>(TextBlock.FontWeightProperty, NConverters.ToFontWeight);

    public static NProperty CreateTextBlockForeground() => new NProperty(nameof(NProperties.TextBlockForeground)).
        Property<DependencyObject>(TextBlock.ForegroundProperty, NConverters.ToBrush);

    public static NProperty CreateTextBlockLineHeight() => new NProperty(nameof(NProperties.TextBlockLineHeight)).
        Property<DependencyObject>(TextBlock.LineHeightProperty, NConverters.ToDouble);

    public static NProperty CreateTextBlockLineStackingStrategy() => new NProperty(nameof(NProperties.TextBlockLineStackingStrategy)).
        Property<DependencyObject>(TextBlock.LineStackingStrategyProperty, NConverters.ToEnum<LineStackingStrategy>);

    public static NProperty CreateTextBlockTextAlignment() => new NProperty(nameof(NProperties.TextBlockTextAlignment)).
        Property<DependencyObject>(TextBlock.TextAlignmentProperty, NConverters.ToEnum<TextAlignment>);

    public static NProperty CreateTextChanged() => new NProperty(nameof(NProperties.TextChanged)).
        Event<TextBoxBase>(TextBoxBase.TextChangedEvent, a => (TextChangedEventHandler)a.EventHandler);

    public static NProperty CreateTextDecorations() => new NProperty(nameof(NProperties.TextDecorations)).
        Property<AccessText>((t, v) => NPatch.AssignListT(t.TextDecorations, v)).
        Property<TextBox>((t, v) => NPatch.AssignListT(t.TextDecorations, v)).
        Property<TextBlock>((t, v) => NPatch.AssignListT(t.TextDecorations, v)).
        Property<Paragraph>((t, v) => NPatch.AssignListT(t.TextDecorations, v)).
        Property<Inline>((t, v) => NPatch.AssignListT(t.TextDecorations, v));

    public static NProperty CreateTextEffects() => new NProperty(nameof(NProperties.TextEffects)).
        Property<AccessText>((t, v) => NPatch.AssignListT(t.TextEffects, v)).
        Property<TextBlock>((t, v) => NPatch.AssignListT(t.TextEffects, v)).
        Property<TextElement>((t, v) => NPatch.AssignListT(t.TextEffects, v));

    public static NProperty CreateTextElementFontFamily() => new NProperty(nameof(NProperties.TextElementFontFamily)).
        Property<DependencyObject>(TextElement.FontFamilyProperty, NConverters.ToFontFamily);

    public static NProperty CreateTextElementFontSize() => new NProperty(nameof(NProperties.TextElementFontSize)).
        Property<DependencyObject>(TextElement.FontSizeProperty, NConverters.ToDouble);

    public static NProperty CreateTextElementFontStretch() => new NProperty(nameof(NProperties.TextElementFontStretch)).
        Property<DependencyObject>(TextElement.FontStretchProperty, NConverters.ToFontStretch);

    public static NProperty CreateTextElementFontStyle() => new NProperty(nameof(NProperties.TextElementFontStyle)).
        Property<DependencyObject>(TextElement.FontStyleProperty, NConverters.ToFontStyle);

    public static NProperty CreateTextElementFontWeight() => new NProperty(nameof(NProperties.TextElementFontWeight)).
        Property<DependencyObject>(TextElement.FontWeightProperty, NConverters.ToFontWeight);

    public static NProperty CreateTextElementForeground() => new NProperty(nameof(NProperties.TextElementForeground)).
        Property<DependencyObject>(TextElement.ForegroundProperty, NConverters.ToBrush);

    public static NProperty CreateTextIndent() => new NProperty(nameof(NProperties.TextIndent)).
        Property<Paragraph>(Paragraph.TextIndentProperty, NConverters.ToDouble);

    public static NProperty CreateTextInput() => new NProperty(nameof(NProperties.TextInput)).
        Event<UIElement>(UIElement.TextInputEvent, a => (TextCompositionEventHandler)a.EventHandler);

    public static NProperty CreateTextOptionsTextFormattingMode() => new NProperty(nameof(NProperties.TextOptionsTextFormattingMode)).
        Property<DependencyObject>(TextOptions.TextFormattingModeProperty, NConverters.ToEnum<TextFormattingMode>);

    public static NProperty CreateTextOptionsTextHintingMode() => new NProperty(nameof(NProperties.TextOptionsTextHintingMode)).
        Property<DependencyObject>(TextOptions.TextHintingModeProperty, NConverters.ToEnum<TextHintingMode>);

    public static NProperty CreateTextOptionsTextRenderingMode() => new NProperty(nameof(NProperties.TextOptionsTextRenderingMode)).
        Property<DependencyObject>(TextOptions.TextRenderingModeProperty, NConverters.ToEnum<TextRenderingMode>);

    public static NProperty CreateTextTrimming() => new NProperty(nameof(NProperties.TextTrimming)).
        Property<AccessText>(AccessText.TextTrimmingProperty, NConverters.ToEnum<TextTrimming>).
        Property<TextBlock>(TextBlock.TextTrimmingProperty, NConverters.ToEnum<TextTrimming>);

    public static NProperty CreateTextWrapping() => new NProperty(nameof(NProperties.TextWrapping)).
        Property<AccessText>(AccessText.TextWrappingProperty, NConverters.ToEnum<TextWrapping>).
        Property<TextBox>(TextBox.TextWrappingProperty, NConverters.ToEnum<TextWrapping>).
        Property<TextBlock>(TextBlock.TextWrappingProperty, NConverters.ToEnum<TextWrapping>);

    public static NProperty CreateTickFrequency() => new NProperty(nameof(NProperties.TickFrequency)).
        Property<Slider>(Slider.TickFrequencyProperty, NConverters.ToDouble).
        Property<TickBar>(TickBar.TickFrequencyProperty, NConverters.ToDouble);

    public static NProperty CreateTickPlacement() => new NProperty(nameof(NProperties.TickPlacement)).
        Property<Slider>(Slider.TickPlacementProperty, NConverters.ToEnum<TickPlacement>);

    public static NProperty CreateTicks() => new NProperty(nameof(NProperties.Ticks)).
        Property<Slider>((t, v) => NPatch.AssignListT(t.Ticks, v)).
        Property<TickBar>((t, v) => NPatch.AssignListT(t.Ticks, v));

    public static NProperty CreateTitle() => new NProperty(nameof(NProperties.Title)).
        Property<Window>(Window.TitleProperty, NConverters.ToString).
        Property<Page>(Page.TitleProperty, NConverters.ToString);

    public static NProperty CreateToolBarOverflowMode() => new NProperty(nameof(NProperties.ToolBarOverflowMode)).
        Property<DependencyObject>(ToolBar.OverflowModeProperty, NConverters.ToEnum<OverflowMode>);

    public static NProperty CreateToolBars() => new NProperty(nameof(NProperties.ToolBars)).
        Property<ToolBarTray>((t, v) => NPatch.AssignListT(t.ToolBars, v));

    public static NProperty CreateToolBarTrayIsLocked() => new NProperty(nameof(NProperties.ToolBarTrayIsLocked)).
        Property<DependencyObject>(ToolBarTray.IsLockedProperty, NConverters.ToBool);

    public static NProperty CreateToolTip() => new NProperty(nameof(NProperties.ToolTip)).
        Property<FrameworkElement>(FrameworkElement.ToolTipProperty);

    public static NProperty CreateToolTipClosing() => new NProperty(nameof(NProperties.ToolTipClosing)).
        Event<FrameworkElement>(FrameworkElement.ToolTipClosingEvent, a => (ToolTipEventHandler)a.EventHandler);

    public static NProperty CreateToolTipOpening() => new NProperty(nameof(NProperties.ToolTipOpening)).
        Event<FrameworkElement>(FrameworkElement.ToolTipOpeningEvent, a => (ToolTipEventHandler)a.EventHandler);

    public static NProperty CreateToolTipServiceBetweenShowDelay() => new NProperty(nameof(NProperties.ToolTipServiceBetweenShowDelay)).
        Property<DependencyObject>(ToolTipService.BetweenShowDelayProperty, NConverters.ToInt32);

    public static NProperty CreateToolTipServiceHasDropShadow() => new NProperty(nameof(NProperties.ToolTipServiceHasDropShadow)).
        Property<DependencyObject>(ToolTipService.HasDropShadowProperty, NConverters.ToBool);

    public static NProperty CreateToolTipServiceHorizontalOffset() => new NProperty(nameof(NProperties.ToolTipServiceHorizontalOffset)).
        Property<DependencyObject>(ToolTipService.HorizontalOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateToolTipServiceInitialShowDelay() => new NProperty(nameof(NProperties.ToolTipServiceInitialShowDelay)).
        Property<DependencyObject>(ToolTipService.InitialShowDelayProperty, NConverters.ToInt32);

    public static NProperty CreateToolTipServiceIsEnabled() => new NProperty(nameof(NProperties.ToolTipServiceIsEnabled)).
        Property<DependencyObject>(ToolTipService.IsEnabledProperty, NConverters.ToBool);

    public static NProperty CreateToolTipServicePlacement() => new NProperty(nameof(NProperties.ToolTipServicePlacement)).
        Property<DependencyObject>(ToolTipService.PlacementProperty, NConverters.ToEnum<PlacementMode>);

    public static NProperty CreateToolTipServicePlacementRectangle() => new NProperty(nameof(NProperties.ToolTipServicePlacementRectangle)).
        Property<DependencyObject>(ToolTipService.PlacementRectangleProperty);

    public static NProperty CreateToolTipServicePlacementTarget() => new NProperty(nameof(NProperties.ToolTipServicePlacementTarget)).
        Property<DependencyObject>(ToolTipService.PlacementTargetProperty);

    public static NProperty CreateToolTipServiceShowDuration() => new NProperty(nameof(NProperties.ToolTipServiceShowDuration)).
        Property<DependencyObject>(ToolTipService.ShowDurationProperty, NConverters.ToInt32);

    public static NProperty CreateToolTipServiceShowOnDisabled() => new NProperty(nameof(NProperties.ToolTipServiceShowOnDisabled)).
        Property<DependencyObject>(ToolTipService.ShowOnDisabledProperty, NConverters.ToBool);

    public static NProperty CreateToolTipServiceToolTip() => new NProperty(nameof(NProperties.ToolTipServiceToolTip)).
        Property<DependencyObject>(ToolTipService.ToolTipProperty);

    public static NProperty CreateToolTipServiceVerticalOffset() => new NProperty(nameof(NProperties.ToolTipServiceVerticalOffset)).
        Property<DependencyObject>(ToolTipService.VerticalOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateTop() => new NProperty(nameof(NProperties.Top)).
        Property<Window>(Window.TopProperty, NConverters.ToDouble);

    public static NProperty CreateTopmost() => new NProperty(nameof(NProperties.Topmost)).
        Property<Window>(Window.TopmostProperty, NConverters.ToBool);

    public static NProperty CreateTouchDown() => new NProperty(nameof(NProperties.TouchDown)).
        Event<UIElement>(UIElement.TouchDownEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateTouchEnter() => new NProperty(nameof(NProperties.TouchEnter)).
        Event<UIElement>(UIElement.TouchEnterEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateTouchLeave() => new NProperty(nameof(NProperties.TouchLeave)).
        Event<UIElement>(UIElement.TouchLeaveEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateTouchMove() => new NProperty(nameof(NProperties.TouchMove)).
        Event<UIElement>(UIElement.TouchMoveEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateTouchUp() => new NProperty(nameof(NProperties.TouchUp)).
        Event<UIElement>(UIElement.TouchUpEvent, a => (EventHandler<TouchEventArgs>)a.EventHandler);

    public static NProperty CreateTriggers() => new NProperty(nameof(NProperties.Triggers)).
        Property<FrameworkElement>((t, v) => NPatch.AssignListT(t.Triggers, v));

    public static NProperty CreateTypographyAnnotationAlternates() => new NProperty(nameof(NProperties.TypographyAnnotationAlternates)).
        Property<DependencyObject>(Typography.AnnotationAlternatesProperty, NConverters.ToInt32);

    public static NProperty CreateTypographyCapitals() => new NProperty(nameof(NProperties.TypographyCapitals)).
        Property<DependencyObject>(Typography.CapitalsProperty, NConverters.ToEnum<FontCapitals>);

    public static NProperty CreateTypographyCapitalSpacing() => new NProperty(nameof(NProperties.TypographyCapitalSpacing)).
        Property<DependencyObject>(Typography.CapitalSpacingProperty, NConverters.ToBool);

    public static NProperty CreateTypographyCaseSensitiveForms() => new NProperty(nameof(NProperties.TypographyCaseSensitiveForms)).
        Property<DependencyObject>(Typography.CaseSensitiveFormsProperty, NConverters.ToBool);

    public static NProperty CreateTypographyContextualAlternates() => new NProperty(nameof(NProperties.TypographyContextualAlternates)).
        Property<DependencyObject>(Typography.ContextualAlternatesProperty, NConverters.ToBool);

    public static NProperty CreateTypographyContextualLigatures() => new NProperty(nameof(NProperties.TypographyContextualLigatures)).
        Property<DependencyObject>(Typography.ContextualLigaturesProperty, NConverters.ToBool);

    public static NProperty CreateTypographyContextualSwashes() => new NProperty(nameof(NProperties.TypographyContextualSwashes)).
        Property<DependencyObject>(Typography.ContextualSwashesProperty, NConverters.ToInt32);

    public static NProperty CreateTypographyDiscretionaryLigatures() => new NProperty(nameof(NProperties.TypographyDiscretionaryLigatures)).
        Property<DependencyObject>(Typography.DiscretionaryLigaturesProperty, NConverters.ToBool);

    public static NProperty CreateTypographyEastAsianExpertForms() => new NProperty(nameof(NProperties.TypographyEastAsianExpertForms)).
        Property<DependencyObject>(Typography.EastAsianExpertFormsProperty, NConverters.ToBool);

    public static NProperty CreateTypographyEastAsianLanguage() => new NProperty(nameof(NProperties.TypographyEastAsianLanguage)).
        Property<DependencyObject>(Typography.EastAsianLanguageProperty, NConverters.ToEnum<FontEastAsianLanguage>);

    public static NProperty CreateTypographyEastAsianWidths() => new NProperty(nameof(NProperties.TypographyEastAsianWidths)).
        Property<DependencyObject>(Typography.EastAsianWidthsProperty, NConverters.ToEnum<FontEastAsianWidths>);

    public static NProperty CreateTypographyFraction() => new NProperty(nameof(NProperties.TypographyFraction)).
        Property<DependencyObject>(Typography.FractionProperty, NConverters.ToEnum<FontFraction>);

    public static NProperty CreateTypographyHistoricalForms() => new NProperty(nameof(NProperties.TypographyHistoricalForms)).
        Property<DependencyObject>(Typography.HistoricalFormsProperty, NConverters.ToBool);

    public static NProperty CreateTypographyHistoricalLigatures() => new NProperty(nameof(NProperties.TypographyHistoricalLigatures)).
        Property<DependencyObject>(Typography.HistoricalLigaturesProperty, NConverters.ToBool);

    public static NProperty CreateTypographyKerning() => new NProperty(nameof(NProperties.TypographyKerning)).
        Property<DependencyObject>(Typography.KerningProperty, NConverters.ToBool);

    public static NProperty CreateTypographyMathematicalGreek() => new NProperty(nameof(NProperties.TypographyMathematicalGreek)).
        Property<DependencyObject>(Typography.MathematicalGreekProperty, NConverters.ToBool);

    public static NProperty CreateTypographyNumeralAlignment() => new NProperty(nameof(NProperties.TypographyNumeralAlignment)).
        Property<DependencyObject>(Typography.NumeralAlignmentProperty, NConverters.ToEnum<FontNumeralAlignment>);

    public static NProperty CreateTypographyNumeralStyle() => new NProperty(nameof(NProperties.TypographyNumeralStyle)).
        Property<DependencyObject>(Typography.NumeralStyleProperty, NConverters.ToEnum<FontNumeralStyle>);

    public static NProperty CreateTypographySlashedZero() => new NProperty(nameof(NProperties.TypographySlashedZero)).
        Property<DependencyObject>(Typography.SlashedZeroProperty, NConverters.ToBool);

    public static NProperty CreateTypographyStandardLigatures() => new NProperty(nameof(NProperties.TypographyStandardLigatures)).
        Property<DependencyObject>(Typography.StandardLigaturesProperty, NConverters.ToBool);

    public static NProperty CreateTypographyStandardSwashes() => new NProperty(nameof(NProperties.TypographyStandardSwashes)).
        Property<DependencyObject>(Typography.StandardSwashesProperty, NConverters.ToInt32);

    public static NProperty CreateTypographyStylisticAlternates() => new NProperty(nameof(NProperties.TypographyStylisticAlternates)).
        Property<DependencyObject>(Typography.StylisticAlternatesProperty, NConverters.ToInt32);

    public static NProperty CreateTypographyStylisticSet1() => new NProperty(nameof(NProperties.TypographyStylisticSet1)).
        Property<DependencyObject>(Typography.StylisticSet1Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet10() => new NProperty(nameof(NProperties.TypographyStylisticSet10)).
        Property<DependencyObject>(Typography.StylisticSet10Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet11() => new NProperty(nameof(NProperties.TypographyStylisticSet11)).
        Property<DependencyObject>(Typography.StylisticSet11Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet12() => new NProperty(nameof(NProperties.TypographyStylisticSet12)).
        Property<DependencyObject>(Typography.StylisticSet12Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet13() => new NProperty(nameof(NProperties.TypographyStylisticSet13)).
        Property<DependencyObject>(Typography.StylisticSet13Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet14() => new NProperty(nameof(NProperties.TypographyStylisticSet14)).
        Property<DependencyObject>(Typography.StylisticSet14Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet15() => new NProperty(nameof(NProperties.TypographyStylisticSet15)).
        Property<DependencyObject>(Typography.StylisticSet15Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet16() => new NProperty(nameof(NProperties.TypographyStylisticSet16)).
        Property<DependencyObject>(Typography.StylisticSet16Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet17() => new NProperty(nameof(NProperties.TypographyStylisticSet17)).
        Property<DependencyObject>(Typography.StylisticSet17Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet18() => new NProperty(nameof(NProperties.TypographyStylisticSet18)).
        Property<DependencyObject>(Typography.StylisticSet18Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet19() => new NProperty(nameof(NProperties.TypographyStylisticSet19)).
        Property<DependencyObject>(Typography.StylisticSet19Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet2() => new NProperty(nameof(NProperties.TypographyStylisticSet2)).
        Property<DependencyObject>(Typography.StylisticSet2Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet20() => new NProperty(nameof(NProperties.TypographyStylisticSet20)).
        Property<DependencyObject>(Typography.StylisticSet20Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet3() => new NProperty(nameof(NProperties.TypographyStylisticSet3)).
        Property<DependencyObject>(Typography.StylisticSet3Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet4() => new NProperty(nameof(NProperties.TypographyStylisticSet4)).
        Property<DependencyObject>(Typography.StylisticSet4Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet5() => new NProperty(nameof(NProperties.TypographyStylisticSet5)).
        Property<DependencyObject>(Typography.StylisticSet5Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet6() => new NProperty(nameof(NProperties.TypographyStylisticSet6)).
        Property<DependencyObject>(Typography.StylisticSet6Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet7() => new NProperty(nameof(NProperties.TypographyStylisticSet7)).
        Property<DependencyObject>(Typography.StylisticSet7Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet8() => new NProperty(nameof(NProperties.TypographyStylisticSet8)).
        Property<DependencyObject>(Typography.StylisticSet8Property, NConverters.ToBool);

    public static NProperty CreateTypographyStylisticSet9() => new NProperty(nameof(NProperties.TypographyStylisticSet9)).
        Property<DependencyObject>(Typography.StylisticSet9Property, NConverters.ToBool);

    public static NProperty CreateTypographyVariants() => new NProperty(nameof(NProperties.TypographyVariants)).
        Property<DependencyObject>(Typography.VariantsProperty, NConverters.ToEnum<FontVariants>);

    public static NProperty CreateUid() => new NProperty(nameof(NProperties.Uid)).
        Property<UIElement>(UIElement.UidProperty, NConverters.ToString);

    public static NProperty CreateUnchecked() => new NProperty(nameof(NProperties.Unchecked)).
        Event<ToggleButton>(ToggleButton.UncheckedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<MenuItem>(MenuItem.UncheckedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateUndoLimit() => new NProperty(nameof(NProperties.UndoLimit)).
        Property<TextBoxBase>(TextBoxBase.UndoLimitProperty, NConverters.ToInt32);

    public static NProperty CreateUnicodeString() => new NProperty(nameof(NProperties.UnicodeString)).
        Property<Glyphs>(Glyphs.UnicodeStringProperty, NConverters.ToString);

    public static NProperty CreateUnloaded() => new NProperty(nameof(NProperties.Unloaded)).
        Event<FrameworkElement>(FrameworkElement.UnloadedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateUnloadedBehavior() => new NProperty(nameof(NProperties.UnloadedBehavior)).
        Property<MediaElement>(MediaElement.UnloadedBehaviorProperty, NConverters.ToEnum<MediaState>);

    public static NProperty CreateUnloadingRow() => new NProperty(nameof(NProperties.UnloadingRow)).
        Event<DataGrid>((s, a) => s.UnloadingRow += a.EventHandler);

    public static NProperty CreateUnloadingRowDetails() => new NProperty(nameof(NProperties.UnloadingRowDetails)).
        Event<DataGrid>((s, a) => s.UnloadingRowDetails += a.EventHandler);

    public static NProperty CreateUnselected() => new NProperty(nameof(NProperties.Unselected)).
        Event<DataGridCell>(DataGridCell.UnselectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<ListBoxItem>(ListBoxItem.UnselectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<DataGridRow>(DataGridRow.UnselectedEvent, a => (RoutedEventHandler)a.EventHandler).
        Event<TreeViewItem>(TreeViewItem.UnselectedEvent, a => (RoutedEventHandler)a.EventHandler);

    public static NProperty CreateUseCustomCursor() => new NProperty(nameof(NProperties.UseCustomCursor)).
        Property<InkCanvas>((t, v) => t.UseCustomCursor = NConverters.ToBoolT(v));

    public static NProperty CreateUseLayoutRounding() => new NProperty(nameof(NProperties.UseLayoutRounding)).
        Property<FrameworkElement>(FrameworkElement.UseLayoutRoundingProperty, NConverters.ToBool);

    public static NProperty CreateUsesItemContainerTemplate() => new NProperty(nameof(NProperties.UsesItemContainerTemplate)).
        Property<MenuItem>(MenuItem.UsesItemContainerTemplateProperty, NConverters.ToBool).
        Property<MenuBase>(MenuBase.UsesItemContainerTemplateProperty, NConverters.ToBool).
        Property<StatusBar>(StatusBar.UsesItemContainerTemplateProperty, NConverters.ToBool);

    public static NProperty CreateValidationErrorTemplate() => new NProperty(nameof(NProperties.ValidationErrorTemplate)).
        Property<DataGridRow>(DataGridRow.ValidationErrorTemplateProperty, NConverters.ToControlTemplate);

    public static NProperty CreateValue() => new NProperty(nameof(NProperties.Value)).
        Property<RangeBase>(RangeBase.ValueProperty, NConverters.ToDouble).
        Property<Track>(Track.ValueProperty, NConverters.ToDouble);

    public static NProperty CreateValueChanged() => new NProperty(nameof(NProperties.ValueChanged)).
        Event<RangeBase>(RangeBase.ValueChangedEvent, a => (RoutedPropertyChangedEventHandler<Double>)a.EventHandler);

    public static NProperty CreateVariants() => new NProperty(nameof(NProperties.Variants)).
        Property<Typography>((t, v) => t.Variants = NConverters.ToEnumT<FontVariants>(v));

    public static NProperty CreateVerticalAlignment() => new NProperty(nameof(NProperties.VerticalAlignment)).
        Property<FrameworkElement>(FrameworkElement.VerticalAlignmentProperty, NConverters.ToEnum<VerticalAlignment>);

    public static NProperty CreateVerticalAnchor() => new NProperty(nameof(NProperties.VerticalAnchor)).
        Property<Figure>(Figure.VerticalAnchorProperty, NConverters.ToEnum<FigureVerticalAnchor>);

    public static NProperty CreateVerticalContentAlignment() => new NProperty(nameof(NProperties.VerticalContentAlignment)).
        Property<Control>(Control.VerticalContentAlignmentProperty, NConverters.ToEnum<VerticalAlignment>);

    public static NProperty CreateVerticalGridLinesBrush() => new NProperty(nameof(NProperties.VerticalGridLinesBrush)).
        Property<DataGrid>(DataGrid.VerticalGridLinesBrushProperty, NConverters.ToBrush);

    public static NProperty CreateVerticalOffset() => new NProperty(nameof(NProperties.VerticalOffset)).
        Property<ToolTip>(ToolTip.VerticalOffsetProperty, NConverters.ToDouble).
        Property<ContextMenu>(ContextMenu.VerticalOffsetProperty, NConverters.ToDouble).
        Property<DocumentViewer>(DocumentViewer.VerticalOffsetProperty, NConverters.ToDouble).
        Property<Popup>(Popup.VerticalOffsetProperty, NConverters.ToDouble).
        Property<Figure>(Figure.VerticalOffsetProperty, NConverters.ToDouble);

    public static NProperty CreateVerticalPageSpacing() => new NProperty(nameof(NProperties.VerticalPageSpacing)).
        Property<DocumentViewer>(DocumentViewer.VerticalPageSpacingProperty, NConverters.ToDouble);

    public static NProperty CreateVerticalScrollBarVisibility() => new NProperty(nameof(NProperties.VerticalScrollBarVisibility)).
        Property<ScrollViewer>(ScrollViewer.VerticalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.VerticalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<DataGrid>(DataGrid.VerticalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>).
        Property<TextBoxBase>(TextBoxBase.VerticalScrollBarVisibilityProperty, NConverters.ToEnum<ScrollBarVisibility>);

    public static NProperty CreateView() => new NProperty(nameof(NProperties.View)).
        Property<ListView>(ListView.ViewProperty);

    public static NProperty CreateViewingMode() => new NProperty(nameof(NProperties.ViewingMode)).
        Property<FlowDocumentReader>(FlowDocumentReader.ViewingModeProperty, NConverters.ToEnum<FlowDocumentReaderViewingMode>);

    public static NProperty CreateViewportSize() => new NProperty(nameof(NProperties.ViewportSize)).
        Property<ScrollBar>(ScrollBar.ViewportSizeProperty, NConverters.ToDouble).
        Property<Track>(Track.ViewportSizeProperty, NConverters.ToDouble);

    public static NProperty CreateVirtualizingPanelCacheLength() => new NProperty(nameof(NProperties.VirtualizingPanelCacheLength)).
        Property<DependencyObject>(VirtualizingPanel.CacheLengthProperty);

    public static NProperty CreateVirtualizingPanelCacheLengthUnit() => new NProperty(nameof(NProperties.VirtualizingPanelCacheLengthUnit)).
        Property<DependencyObject>(VirtualizingPanel.CacheLengthUnitProperty, NConverters.ToEnum<VirtualizationCacheLengthUnit>);

    public static NProperty CreateVirtualizingPanelIsContainerVirtualizable() => new NProperty(nameof(NProperties.VirtualizingPanelIsContainerVirtualizable)).
        Property<DependencyObject>(VirtualizingPanel.IsContainerVirtualizableProperty, NConverters.ToBool);

    public static NProperty CreateVirtualizingPanelIsVirtualizing() => new NProperty(nameof(NProperties.VirtualizingPanelIsVirtualizing)).
        Property<DependencyObject>(VirtualizingPanel.IsVirtualizingProperty, NConverters.ToBool);

    public static NProperty CreateVirtualizingPanelIsVirtualizingWhenGrouping() => new NProperty(nameof(NProperties.VirtualizingPanelIsVirtualizingWhenGrouping)).
        Property<DependencyObject>(VirtualizingPanel.IsVirtualizingWhenGroupingProperty, NConverters.ToBool);

    public static NProperty CreateVirtualizingPanelScrollUnit() => new NProperty(nameof(NProperties.VirtualizingPanelScrollUnit)).
        Property<DependencyObject>(VirtualizingPanel.ScrollUnitProperty, NConverters.ToEnum<ScrollUnit>);

    public static NProperty CreateVirtualizingPanelVirtualizationMode() => new NProperty(nameof(NProperties.VirtualizingPanelVirtualizationMode)).
        Property<DependencyObject>(VirtualizingPanel.VirtualizationModeProperty, NConverters.ToEnum<VirtualizationMode>);

    public static NProperty CreateVisibility() => new NProperty(nameof(NProperties.Visibility)).
        Property<UIElement>(UIElement.VisibilityProperty, NConverters.ToEnum<Visibility>);

    public static NProperty CreateVolume() => new NProperty(nameof(NProperties.Volume)).
        Property<MediaElement>(MediaElement.VolumeProperty, NConverters.ToDouble);

    public static NProperty CreateWidth() => new NProperty(nameof(NProperties.Width)).
        Property<FrameworkElement>(FrameworkElement.WidthProperty, NConverters.ToLength).
        Property<Figure>(Figure.WidthProperty).
        Property<Floater>(Floater.WidthProperty, NConverters.ToDouble).
        Property<ColumnDefinition>(ColumnDefinition.WidthProperty, NConverters.ToGridLength);

    public static NProperty CreateWindowStartupLocation() => new NProperty(nameof(NProperties.WindowStartupLocation)).
        Property<Window>((t, v) => t.WindowStartupLocation = NConverters.ToEnumT<WindowStartupLocation>(v));

    public static NProperty CreateWindowState() => new NProperty(nameof(NProperties.WindowState)).
        Property<Window>(Window.WindowStateProperty, NConverters.ToEnum<WindowState>);

    public static NProperty CreateWindowStyle() => new NProperty(nameof(NProperties.WindowStyle)).
        Property<Window>(Window.WindowStyleProperty, NConverters.ToEnum<WindowStyle>);

    public static NProperty CreateWindowTitle() => new NProperty(nameof(NProperties.WindowTitle)).
        Property<Page>((t, v) => t.WindowTitle = NConverters.ToStringT(v));

    public static NProperty CreateWrapDirection() => new NProperty(nameof(NProperties.WrapDirection)).
        Property<Figure>(Figure.WrapDirectionProperty, NConverters.ToEnum<WrapDirection>);

    public static NProperty CreateWrapWidth() => new NProperty(nameof(NProperties.WrapWidth)).
        Property<ToolBarOverflowPanel>(ToolBarOverflowPanel.WrapWidthProperty, NConverters.ToDouble);

    public static NProperty CreateX1() => new NProperty(nameof(NProperties.X1)).
        Property<Line>(Line.X1Property, NConverters.ToDouble);

    public static NProperty CreateX2() => new NProperty(nameof(NProperties.X2)).
        Property<Line>(Line.X2Property, NConverters.ToDouble);

    public static NProperty CreateY1() => new NProperty(nameof(NProperties.Y1)).
        Property<Line>(Line.Y1Property, NConverters.ToDouble);

    public static NProperty CreateY2() => new NProperty(nameof(NProperties.Y2)).
        Property<Line>(Line.Y2Property, NConverters.ToDouble);

    public static NProperty CreateZoom() => new NProperty(nameof(NProperties.Zoom)).
        Property<FlowDocumentReader>(FlowDocumentReader.ZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.ZoomProperty, NConverters.ToDouble).
        Property<DocumentViewer>(DocumentViewer.ZoomProperty, NConverters.ToDouble).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.ZoomProperty, NConverters.ToDouble);

    public static NProperty CreateZoomIncrement() => new NProperty(nameof(NProperties.ZoomIncrement)).
        Property<FlowDocumentReader>(FlowDocumentReader.ZoomIncrementProperty, NConverters.ToDouble).
        Property<FlowDocumentScrollViewer>(FlowDocumentScrollViewer.ZoomIncrementProperty, NConverters.ToDouble).
        Property<FlowDocumentPageViewer>(FlowDocumentPageViewer.ZoomIncrementProperty, NConverters.ToDouble);

  }
}
